const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function addBotToken(storeId, botToken) {
  try {
    console.log(`üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: ${storeId}\n`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    const tokenPattern = /^\d+:[A-Za-z0-9_-]+$/;
    if (!tokenPattern.test(botToken)) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞!');
      console.log('üìù –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: 1234567890:ABCdefGhIJklmNOpqRStuvwXYz');
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–≥–∞–∑–∏–Ω
    const store = await prisma.store.findUnique({
      where: { id: storeId },
      select: {
        id: true,
        name: true,
        slug: true,
        botToken: true,
        botUsername: true,
        botStatus: true
      }
    });

    if (!store) {
      console.error(`‚ùå –ú–∞–≥–∞–∑–∏–Ω —Å ID "${storeId}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω –º–∞–≥–∞–∑–∏–Ω: ${store.name} (/${store.slug})`);

    if (store.botToken) {
      console.log(`‚ö†Ô∏è  –£ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω!`);
      console.log(`–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (masked): ${store.botToken.slice(0, 10)}...${store.botToken.slice(-10)}`);
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å readline)
      console.log(`\n‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω? (yes/no)`);
      console.log(`   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node backend/scripts/update-bot-token.js ${storeId} "–ù–û–í–´–ô_–¢–û–ö–ï–ù"`);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    const updated = await prisma.store.update({
      where: { id: storeId },
      data: {
        botToken: botToken,
        botStatus: 'INACTIVE', // –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è INACTIVE –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        botCreatedAt: new Date()
      }
    });

    console.log(`\n‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    console.log(`üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:`);
    console.log(`   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É: –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã`);
    console.log(`   2. –ù–∞–π–¥–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω "${store.name}"`);
    console.log(`   3. –¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å, –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –£–¥–∞–ª–∏—Ç—å)`);
    console.log(`   4. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞`);

  } catch (error) {
    if (error.code === 'P2002') {
      console.error('‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º!');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const storeId = process.argv[2];
const botToken = process.argv[3];

if (!storeId || !botToken) {
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('   node backend/scripts/add-bot-token.js <STORE_ID> "<BOT_TOKEN>"');
  console.log('');
  console.log('üìù –ü—Ä–∏–º–µ—Ä:');
  console.log('   node backend/scripts/add-bot-token.js clxxxx123 "1234567890:ABCdefGhIJklmNOpqRStuvwXYz"');
  console.log('');
  console.log('üí° –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ check-bot-token.js —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID –º–∞–≥–∞–∑–∏–Ω–∞:');
  console.log('   node backend/scripts/check-bot-token.js paymenttest');
  process.exit(1);
}

addBotToken(storeId, botToken);

