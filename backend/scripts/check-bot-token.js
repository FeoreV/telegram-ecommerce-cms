const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function checkBotToken(searchTerm) {
  try {
    console.log(`üîç –ò—â–µ–º –º–∞–≥–∞–∑–∏–Ω/–±–æ—Ç–∞: "${searchTerm}"\n`);

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –º–∞–≥–∞–∑–∏–Ω–∞, slug –∏–ª–∏ botUsername
    const stores = await prisma.store.findMany({
      where: {
        OR: [
          { name: { contains: searchTerm } },
          { slug: { contains: searchTerm } },
          { botUsername: { contains: searchTerm } }
        ]
      },
      select: {
        id: true,
        name: true,
        slug: true,
        botToken: true,
        botUsername: true,
        botStatus: true,
        botCreatedAt: true,
        botLastActive: true,
        _count: {
          select: {
            products: true,
            orders: true
          }
        }
      }
    });

    if (stores.length === 0) {
      console.log('‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
      console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã:');
      
      const allStores = await prisma.store.findMany({
        select: {
          name: true,
          slug: true,
          botUsername: true
        }
      });
      
      allStores.forEach(store => {
        console.log(`  - ${store.name} (/${store.slug}) ${store.botUsername ? `[@${store.botUsername}]` : '[–ù–µ—Ç –±–æ—Ç–∞]'}`);
      });
      return;
    }

    stores.forEach((store, index) => {
      console.log(`\n${'='.repeat(60)}`);
      console.log(`üì¶ –ú–∞–≥–∞–∑–∏–Ω #${index + 1}: ${store.name}`);
      console.log(`${'='.repeat(60)}`);
      console.log(`ID:           ${store.id}`);
      console.log(`Slug:         /${store.slug}`);
      console.log(`Bot Username: ${store.botUsername || '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      console.log(`Bot Status:   ${store.botStatus}`);
      console.log(`Bot Token:    ${store.botToken ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
      
      if (store.botToken) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–∫–µ–Ω–∞
        const token = store.botToken;
        const masked = token.slice(0, 10) + '...' + token.slice(-10);
        console.log(`Token (masked): ${masked}`);
      }
      
      console.log(`–°–æ–∑–¥–∞–Ω:       ${store.botCreatedAt ? new Date(store.botCreatedAt).toLocaleString('ru-RU') : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
      console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${store.botLastActive ? new Date(store.botLastActive).toLocaleString('ru-RU') : '–ù–∏–∫–æ–≥–¥–∞'}`);
      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`  - –¢–æ–≤–∞—Ä–æ–≤: ${store._count.products}`);
      console.log(`  - –ó–∞–∫–∞–∑–æ–≤: ${store._count.orders}`);
      
      if (!store.botToken) {
        console.log(`\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –£ —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞!`);
        console.log(`üìù –†–µ—à–µ–Ω–∏–µ:`);
        console.log(`   1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram`);
        console.log(`   2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω`);
        console.log(`   3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É: –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã -> –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞`);
        console.log(`   –ò–õ–ò`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: node backend/scripts/add-bot-token.js ${store.id} "–í–ê–®_–¢–û–ö–ï–ù"`);
      } else {
        console.log(`\n‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∫–µ.`);
      }
    });

    console.log(`\n${'='.repeat(60)}\n`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const searchTerm = process.argv[2] || 'paymenttest';
checkBotToken(searchTerm);

