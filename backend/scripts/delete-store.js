const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function deleteStore(searchTerm) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞: "${searchTerm}"\n`);

    // –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    const stores = await prisma.store.findMany({
      where: {
        OR: [
          { name: { contains: searchTerm } },
          { slug: { contains: searchTerm } },
          { id: searchTerm }
        ]
      },
      select: {
        id: true,
        name: true,
        slug: true,
        botToken: true,
        botUsername: true,
        botStatus: true,
        createdAt: true,
        _count: {
          select: {
            products: true,
            orders: true,
            admins: true,
            vendors: true
          }
        }
      }
    });

    if (stores.length === 0) {
      console.log('‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω\n');
      return;
    }

    if (stores.length > 1) {
      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ (${stores.length}). –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:\n`);
      stores.forEach((store, index) => {
        console.log(`${index + 1}. ${store.name} (/${store.slug}) [ID: ${store.id}]`);
      });
      console.log('\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–π ID –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
      return;
    }

    const store = stores[0];

    console.log(`${'='.repeat(60)}`);
    console.log(`üì¶ –ú–ê–ì–ê–ó–ò–ù –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø`);
    console.log(`${'='.repeat(60)}`);
    console.log(`ID:           ${store.id}`);
    console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ:     ${store.name}`);
    console.log(`Slug:         /${store.slug}`);
    console.log(`Bot Username: ${store.botUsername || '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`Bot Status:   ${store.botStatus}`);
    console.log(`Bot Token:    ${store.botToken ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`);
    console.log(`–°–æ–∑–¥–∞–Ω:       ${new Date(store.createdAt).toLocaleString('ru-RU')}`);
    console.log(`\nüìä –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:`);
    console.log(`  - –¢–æ–≤–∞—Ä–æ–≤: ${store._count.products}`);
    console.log(`  - –ó–∞–∫–∞–∑–æ–≤: ${store._count.orders}`);
    console.log(`  - –ê–¥–º–∏–Ω–æ–≤: ${store._count.admins}`);
    console.log(`  - –í–µ–Ω–¥–æ—Ä–æ–≤: ${store._count.vendors}`);
    console.log(`${'='.repeat(60)}`);
    console.log(`\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`);
    console.log(`‚ö†Ô∏è  –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã (—Ç–æ–≤–∞—Ä—ã, –∑–∞–∫–∞–∑—ã, –∏ —Ç.–¥.)\n`);

    const confirm1 = await question(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ "${store.name}" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `);
    
    if (confirm1.trim() !== store.name) {
      console.log('\n‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      rl.close();
      return;
    }

    const confirm2 = await question(`\n–í—ã –ê–ë–°–û–õ–Æ–¢–ù–û –£–í–ï–†–ï–ù–´? –í–≤–µ–¥–∏—Ç–µ "–£–î–ê–õ–ò–¢–¨" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `);
    
    if (confirm2.trim() !== '–£–î–ê–õ–ò–¢–¨') {
      console.log('\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      rl.close();
      return;
    }

    console.log(`\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞...`);

    // –£–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è Prisma)
    await prisma.store.delete({
      where: { id: store.id }
    });

    console.log(`\n‚úÖ –ú–∞–≥–∞–∑–∏–Ω "${store.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!`);
    console.log(`\nüìù –£–¥–∞–ª–µ–Ω–æ:`);
    console.log(`  ‚úì –ú–∞–≥–∞–∑–∏–Ω`);
    console.log(`  ‚úì ${store._count.products} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`  ‚úì ${store._count.orders} –∑–∞–∫–∞–∑–æ–≤`);
    console.log(`  ‚úì –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ª–æ–≥–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏ —Ç.–¥.)`);
    console.log(`\n${'='.repeat(60)}\n`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error.message);
  } finally {
    rl.close();
    await prisma.$disconnect();
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const searchTerm = process.argv[2];

if (!searchTerm) {
  console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('   node backend/scripts/delete-store.js <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–ª–∏_id_–º–∞–≥–∞–∑–∏–Ω–∞>');
  console.log('');
  console.log('üìù –ü—Ä–∏–º–µ—Ä—ã:');
  console.log('   node backend/scripts/delete-store.js paymenttest');
  console.log('   node backend/scripts/delete-store.js cmg9asld800056s4cqgw1xufd');
  console.log('');
  process.exit(1);
}

deleteStore(searchTerm);

