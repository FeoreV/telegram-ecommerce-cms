import TelegramBot from 'node-telegram-bot-api';
import { prisma } from '../lib/prisma.js';
import { SupportedLanguage, isSupportedLanguage, t } from '../utils/i18n.js';
import { logger } from '../utils/logger.js';
import { sanitizeForLog } from '../utils/sanitizer.js';
import BotDataService from './botDataService.js';
import { encryptionService } from './EncryptionService.js';
import path from 'path';
import * as fs from 'fs/promises';
import fetch from 'node-fetch';

interface BotSession {
  userId: string;
  storeId: string;
  currentAction?: string;
  cart?: CartItem[];
  customerInfo?: any;
  data?: any;
  paymentProofFlow?: {
    orderId: string;
    awaitingPhoto: boolean;
  };
}

interface CartItem {
  productId: string;
  variantId?: string;
  quantity: number;
  price: number;
  name: string;
}

/**
 * Bot Handler Service - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç BotDataService –¥–ª—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º
 */
export class BotHandlerService {
  private storeId: string;
  private dataService: BotDataService;
  private sessions: Map<string, BotSession> = new Map();
  private language: SupportedLanguage = 'ru';

  constructor(storeId: string) {
    this.storeId = storeId;
    this.dataService = new BotDataService(storeId);
    // Initialize language asynchronously
    this.initializeLanguage();
  }

  /**
   * Initialize language from store settings
   */
  private async initializeLanguage(): Promise<void> {
    try {
      const storeInfo = await this.dataService.getStoreInfo();
      const lang = storeInfo.botSettings?.language;
      if (lang && isSupportedLanguage(lang)) {
        this.language = lang;
      }
    } catch (_error) {
      logger.warn(`Could not load language for store ${sanitizeForLog(this.storeId)}, using default (ru)`);
    }
  }

  /**
   * Get translated text for current store language
   */
  private translate(key: string): string {
    return t(key, this.language);
  }

  async handleMessage(bot: TelegramBot, msg: unknown): Promise<void> {
    try {
      const message = msg as any;
      const chatId = message.chat.id;
      const userId = message.from.id.toString();
      const text = message.text || '';

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      let session = this.getSession(userId);
      if (!session) {
        session = await this.createSession(userId, message.from);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω–∞
      await this.dataService.updateStoreStats();

      // Handle payment proof uploads (photos and documents)
      if ((message.photo || message.document) && session.paymentProofFlow?.awaitingPhoto) {
        await this.handlePaymentProofUpload(bot, chatId, message, session);
        this.saveSession(userId, session);
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text.startsWith('/')) {
        await this.handleCommand(bot, chatId, text, session);
      } else {
        await this.handleTextMessage(bot, chatId, text, session);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
      this.saveSession(userId, session);

    } catch (error) {
      logger.error(`Error handling message for store ${sanitizeForLog(this.storeId)}:`, error);

      // Check if this is a store-not-found error
      if (error instanceof Error && error.message.startsWith('STORE_NOT_FOUND')) {
        logger.error(`‚õî Store ${sanitizeForLog(this.storeId)} no longer exists - bot should be stopped`);
        await bot.sendMessage(
          (msg as any).chat.id,
          '‚ö†Ô∏è –≠—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
        ).catch(() => {}); // Ignore if message fails
        throw error; // Re-throw to signal bot should stop
      }

        await bot.sendMessage((msg as any).chat.id, `‚ùå ${this.translate('error.generic')}`).catch(() => {});
    }
  }

  private async handleCommand(bot: TelegramBot, chatId: number, command: string, session: BotSession): Promise<void> {
    const cmd = command.split(' ')[0].toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞
    const customCommandResponse = await this.checkCustomCommands(cmd);
    if (customCommandResponse) {
      await bot.sendMessage(chatId, customCommandResponse, { parse_mode: 'Markdown' });
      return;
    }

    switch (cmd) {
      case '/start':
        await this.handleStartCommand(bot, chatId, session);
        break;

      case '/catalog':
      case '/catalogue':
        await this.showCatalog(bot, chatId, session);
        break;


      case '/orders':
        await this.showMyOrders(bot, chatId, session);
        break;

      case '/help':
        await this.showHelp(bot, chatId);
        break;

      default:
        await bot.sendMessage(chatId, this.translate('error.unknown_command'));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
   */
  private async checkCustomCommands(command: string): Promise<string | null> {
    try {
      const storeInfo = await this.dataService.getStoreInfo();
      const settings = storeInfo.botSettings;

      if (!settings?.customCommands || !Array.isArray(settings.customCommands)) {
        return null;
      }

      for (const customCmd of settings.customCommands) {
        if (!customCmd.enabled) continue;

        const cmdPattern = customCmd.command.toLowerCase().trim();
        const inputCmd = command.toLowerCase().trim();

        if (inputCmd === cmdPattern || inputCmd === `/${cmdPattern}`) {
          return customCmd.response;
        }
      }

      return null;
    } catch (error) {
      logger.error('Error checking custom commands:', error);
      return null;
    }
  }

  private async handleTextMessage(bot: TelegramBot, chatId: number, text: string, session: BotSession): Promise<void> {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    switch (session.currentAction) {
      case 'awaiting_customer_info':
        // Handle customer info for checkout
        await this.handleCustomerInfo(bot, chatId, text, session);
        break;

      default:
        {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ FAQ
          const autoResponse = await this.checkAutoResponses(text);
          if (autoResponse) {
            await bot.sendMessage(chatId, autoResponse, { parse_mode: 'Markdown' });
          } else {
            // –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
            await bot.sendMessage(chatId,
              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏'
            );
          }
        }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –∏ FAQ
   */
  private async checkAutoResponses(text: string): Promise<string | null> {
    try {
      const storeInfo = await this.dataService.getStoreInfo();
      const settings = storeInfo.botSettings;

      if (!settings) return null;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
      if (settings.autoResponses?.responses && Array.isArray(settings.autoResponses.responses)) {
        for (const autoResp of settings.autoResponses.responses) {
          if (!autoResp.enabled) continue;

          const trigger = autoResp.trigger.toLowerCase().trim();
          const messageText = text.toLowerCase().trim();

          // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∏–≥–≥–µ—Ä
          if (messageText === trigger || messageText.includes(trigger)) {
            return autoResp.response;
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º FAQ
      if (settings.faqs && Array.isArray(settings.faqs)) {
        for (const faq of settings.faqs) {
          const question = faq.question.toLowerCase().trim();
          const messageText = text.toLowerCase().trim();

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
          if (messageText.includes(question) || question.includes(messageText)) {
            return `‚ùì **${faq.question}**\n\n${faq.answer}`;
          }
        }
      }

      return null;
    } catch (error) {
      logger.error('Error checking auto responses:', error);
      return null;
    }
  }

  private async handleStartCommand(bot: TelegramBot, chatId: number, _session: BotSession): Promise<void> {
    const storeInfo = await this.dataService.getStoreInfo();
    const stats = await this.dataService.getBasicStats();

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∏–∑ botSettings
    const customization = storeInfo.botSettings?.startCustomization || {};

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const emoji = customization.emoji || 'üõçÔ∏è';
    const greeting = customization.greeting || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å';
    const welcomeText = customization.welcomeText || storeInfo.botSettings?.welcome_message ||
      `${greeting} –≤ –º–∞–≥–∞–∑–∏–Ω "${storeInfo.name}"!`;
    const showStats = customization.showStats !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    const showDescription = customization.showDescription !== false;
    const additionalText = customization.additionalText || '';
    const headerImage = customization.headerImage || null;

    // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    const catalogButton = customization.catalogButton || {
      text: 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      emoji: 'üõí'
    };
    const profileButton = customization.profileButton || {
      text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
      emoji: 'üë§'
    };
    const helpButton = customization.helpButton || {
      text: '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
      emoji: '‚ùì'
    };

    // –°—Ç—Ä–æ–∏–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: catalogButton.text, callback_data: 'catalog' }
          ],
          [
            { text: profileButton.text, callback_data: 'profile' },
            { text: helpButton.text, callback_data: 'help' }
          ]
        ]
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    if (customization.extraButtons && Array.isArray(customization.extraButtons)) {
      customization.extraButtons.forEach((btn: any) => {
        if (btn.text && (btn.callback_data || btn.url)) {
          const button: any = { text: btn.text };
          if (btn.url) {
            button.url = btn.url;
          } else {
            button.callback_data = btn.callback_data;
          }
          keyboard.reply_markup.inline_keyboard.push([button]);
        }
      });
    }

    // –°—Ç—Ä–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `${emoji} **${welcomeText}**\n\n`;

    // –û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    if (showDescription && storeInfo.description) {
      message += `üìù ${storeInfo.description}\n\n`;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if (additionalText) {
      message += `${additionalText}\n\n`;
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    if (showStats) {
      message += `üìä **–û –º–∞–≥–∞–∑–∏–Ω–µ:**\n`;
      message += `‚Ä¢ ${stats.products.active} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏\n`;
      message += `‚Ä¢ ${stats.orders.total} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n`;
      message += `‚Ä¢ –í–∞–ª—é—Ç–∞: ${storeInfo.currency}\n\n`;
    }

    message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –±–µ–∑
    if (headerImage) {
      try {
        await bot.sendPhoto(chatId, headerImage, {
          caption: message,
          parse_mode: 'Markdown',
          ...keyboard
        });
      } catch (error) {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–º
        logger.warn(`Failed to send header image for store ${sanitizeForLog(this.storeId)}:`, error);
        await bot.sendMessage(chatId, message, {
          parse_mode: 'Markdown',
          ...keyboard
        });
      }
    } else {
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  }

  private async showCatalog(bot: TelegramBot, chatId: number, _session: BotSession): Promise<void> {
    try {
      const [categories, productsResult] = await Promise.all([
        this.dataService.getCategories(),
        this.dataService.getProducts({ limit: 10 })
      ]);

      let message = 'üõí **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤**\n\n';

      if (categories.length > 0) {
        message += 'üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n';
        categories.forEach(category => {
          message += `‚Ä¢ ${category.name} (${category._count.products})\n`;
        });
        message += '\n';
      }

      if (productsResult.products.length > 0) {
        message += 'üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n';
        const currency = await this.getCurrency();
        for (const product of productsResult.products.slice(0, 5)) {
          message += `‚Ä¢ ${product.name} - ${product.price} ${currency}\n`;
        }
        message += '\n';
      }

      const keyboardButtons = [];

      // Add category buttons
      if (categories.length > 0) {
        keyboardButtons.push(...categories.map(category => ([
          { text: `üìÇ ${category.name}`, callback_data: `category_${category.id}` }
        ])));
      }

      // Add product buttons - —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
      if (productsResult.products.length > 0) {
        keyboardButtons.push(...productsResult.products.slice(0, 5).map(product => ([
          { text: `üõí ${product.name}`, callback_data: `product_${product.id}` }
        ])));
      }

      // Add utility buttons
      keyboardButtons.push([
        { text: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'search' },
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }
      ]);

      const keyboard = {
        reply_markup: {
          inline_keyboard: keyboardButtons
        }
      };

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      logger.error(`Error showing catalog for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
  }

  private async showCart(bot: TelegramBot, chatId: number, session: BotSession): Promise<void> {
    if (!session.cart || session.cart.length === 0) {
      await bot.sendMessage(chatId, 'üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
          ]
        }
      });
      return;
    }

    let message = 'üõçÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n';
    let total = 0;
    const currency = await this.getCurrency();

    session.cart.forEach((item, index) => {
      const itemTotal = item.price * item.quantity;
      total += itemTotal;
      message += `${index + 1}. ${item.name}\n`;
      message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
      message += `   –¶–µ–Ω–∞: ${itemTotal} ${currency}\n\n`;
    });

    message += `üí∞ **–ò—Ç–æ–≥–æ: ${total} ${currency}**`;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' },
            { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' }
          ],
          [
            { text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }
          ]
        ]
      }
    };

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  private async showMyOrders(bot: TelegramBot, chatId: number, session: BotSession): Promise<void> {
    try {
      const orders = await this.dataService.getCustomerOrders(session.userId, 5);

      if (orders.length === 0) {
        await bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
            ]
          }
        });
        return;
      }

      let message = 'üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:**\n\n';
      const defaultCurrency = await this.getCurrency();

      orders.forEach(order => {
        message += `üßæ **–ó–∞–∫–∞–∑ ${order.orderNumber}**\n`;
        message += `üìÖ ${new Date(order.createdAt).toLocaleDateString('ru-RU')}\n`;
        message += `üí∞ ${order.totalAmount} ${order.currency || defaultCurrency}\n`;
        message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}\n\n`;
      });

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...orders.slice(0, 3).map(order => ([
              { text: `üìã ${order.orderNumber}`, callback_data: `order_${order.id}` }
            ])),
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }]
          ]
        }
      };

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      logger.error(`Error showing orders for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  }

  private async handleSearch(bot: TelegramBot, chatId: number, query: string, session: BotSession): Promise<void> {
    try {
      const result = await this.dataService.getProducts({
        search: query,
        limit: 10
      });

      if (result.products.length === 0) {
        await bot.sendMessage(chatId, `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üõí –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }]
            ]
          }
        });
        return;
      }

      let message = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${query}":**\n\n`;
      message += `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.total}\n\n`;

      const currency = await this.getCurrency();
      result.products.forEach(product => {
        message += `üì¶ **${product.name}**\n`;
        if (product.description) {
          message += `${product.description.substring(0, 100)}${product.description.length > 100 ? '...' : ''}\n`;
        }
        message += `üí∞ ${product.price} ${currency}\n`;
        message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}\n\n`;
      });

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...result.products.slice(0, 5).map(product => ([
              { text: `üì¶ ${product.name}`, callback_data: `product_${product.id}` }
            ])),
            [
              { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search' },
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }
            ]
          ]
        }
      };

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
      session.currentAction = undefined;
    } catch (error) {
      logger.error(`Error handling search for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
    }
  }

  private async showHelp(bot: TelegramBot, chatId: number): Promise<void> {
    try {
      const storeInfo = await this.dataService.getStoreInfo();
      const menuCustomization = storeInfo.botSettings?.menuCustomization || {};

      let message = `‚ùì **–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã**\n\n`;

      // –ü–æ–º–æ—â—å
      message += `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
      message += `/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n`;
      message += `/catalog - ${menuCustomization.catalogText || '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'}\n`;
      message += `/orders - ${menuCustomization.ordersText || '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'}\n`;
      message += `/help - ${menuCustomization.helpText || '–≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞'}\n`;

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
      if (storeInfo.botSettings?.customCommands && Array.isArray(storeInfo.botSettings.customCommands)) {
        const enabledCommands = storeInfo.botSettings.customCommands.filter((cmd: any) => cmd.enabled);
        if (enabledCommands.length > 0) {
          message += `\n**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
          enabledCommands.forEach((cmd: any) => {
            message += `/${cmd.command} - ${cmd.description || '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'}\n`;
          });
        }
      }

      message += `\n**–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:**\n`;
      message += `1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n`;
      message += `2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n`;
      message += `3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n`;
      message += `4Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n`;
      message += `5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\n`;

      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      message += `üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
      message += `üè™ ${storeInfo.name}\n`;

      if (storeInfo.contactInfo) {
        try {
          const contacts = JSON.parse(storeInfo.contactInfo);
          if (contacts.phone) message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${contacts.phone}\n`;
          if (contacts.email) message += `üìß Email: ${contacts.email}\n`;
          if (contacts.address) message += `üìç –ê–¥—Ä–µ—Å: ${contacts.address}\n`;
        } catch (error) {
          message += `üìû ${storeInfo.contactInfo}\n`;
        }
      }

      message += `\nüí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ!`;

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
          ]
        }
      });
    } catch (error) {
      logger.error(`Error showing help for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  private async showProfile(bot: TelegramBot, chatId: number, session: BotSession): Promise<void> {
    try {
      // Get user orders
      const orders = await this.dataService.getCustomerOrders(session.userId, 5);
      const currency = await this.getCurrency();

      let message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n`;
      message += `üÜî ID: ${session.userId}\n`;
      message += `üìã –ó–∞–∫–∞–∑–æ–≤: ${orders.length}\n\n`;

      // Calculate statistics
      let totalSpent = 0;
      let paidOrders = 0;
      orders.forEach((order: any) => {
        if (order.status === 'PAID' || order.status === 'DELIVERED') {
          totalSpent += order.totalAmount || 0;
          paidOrders++;
        }
      });

      message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `‚úÖ –û–ø–ª–∞—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${paidOrders}\n`;
      message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${totalSpent.toFixed(2)} ${currency}\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*`;

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' }
            ],
            [
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }
            ]
          ]
        }
      });
    } catch (_error) {
      logger.error(`Error showing profile for store ${sanitizeForLog(this.storeId)}:`, _error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    }
  }


  // Session management
  private getSession(userId: string): BotSession | null {
    return this.sessions.get(userId) || null;
  }

  private async createSession(userId: string, telegramUser: unknown): Promise<BotSession> {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const tgUser = telegramUser as any;
    const user = await this.dataService.getOrCreateCustomer(userId, {
      username: tgUser.username,
      firstName: tgUser.first_name,
      lastName: tgUser.last_name
    });

    const session: BotSession = {
      userId: user.id,
      storeId: this.storeId,
      cart: [],
      data: {}
    };

    this.sessions.set(userId, session);
    return session;
  }

  private saveSession(userId: string, session: BotSession): void {
    this.sessions.set(userId, session);
  }

  // Utility methods
  private async getCurrency(): Promise<string> {
    try {
      const storeInfo = await this.dataService.getStoreInfo();
      return storeInfo.currency || 'USD';
    } catch (_error) {
      return 'USD';
    }
  }

  private getStatusText(status: string): string {
    const statusMap: Record<string, string> = {
      'PENDING_ADMIN': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'PAID': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
      'SHIPPED': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'DELIVERED': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'REJECTED': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω',
      'CANCELLED': 'üö´ –û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusMap[status] || status;
  }

  // Callback query handler
  async handleCallbackQuery(bot: TelegramBot, query: unknown): Promise<void> {
    try {
      const callbackQuery = query as any;
      const chatId = callbackQuery.message.chat.id;
      const userId = callbackQuery.from.id.toString();
      const data = callbackQuery.data;

      let session = this.getSession(userId);
      if (!session) {
        session = await this.createSession(userId, callbackQuery.from);
      }

      await bot.answerCallbackQuery(callbackQuery.id);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback data
      if (data === 'start') {
        await this.handleStartCommand(bot, chatId, session);
      } else if (data === 'catalog') {
        await this.showCatalog(bot, chatId, session);
      } else if (data === 'profile') {
        await this.showProfile(bot, chatId, session);
      } else if (data === 'orders') {
        await this.showMyOrders(bot, chatId, session);
      } else if (data === 'help') {
        await this.showHelp(bot, chatId);
      } else if (data.startsWith('category_')) {
        const categoryId = data.replace('category_', '');
        await this.showCategoryProducts(bot, chatId, categoryId, session);
      } else if (data.startsWith('product_')) {
        const productId = data.replace('product_', '');
        await this.showProduct(bot, chatId, productId, session);
      } else if (data.startsWith('buy_now_')) {
        // Handle direct purchase: buy_now_productId_quantity
        const parts = data.replace('buy_now_', '').split('_');
        if (parts.length >= 2) {
          const productId = parts[0];
          const quantity = parseInt(parts[1]) || 1;
          await this.handleDirectPurchase(bot, chatId, productId, quantity, session);
        }
      } else if (data.startsWith('confirm_order_')) {
        // Create order: confirm_order_productId_quantity
        const parts = data.replace('confirm_order_', '').split('_');
        if (parts.length >= 2) {
          const productId = parts[0];
          const quantity = parseInt(parts[1]) || 1;
          await this.createOrderFromDirect(bot, chatId, productId, quantity, session);
        }
      } else if (data.startsWith('upload_proof_')) {
        // Initiate payment proof upload flow
        const orderId = data.replace('upload_proof_', '');
        await this.initiatePaymentProofFlow(bot, chatId, orderId, session);
      } else if (data === 'cancel_payment_proof') {
        // Cancel payment proof upload
        session.paymentProofFlow = undefined;
        await bot.sendMessage(chatId, '‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
            ]
          }
        });
      }

      this.saveSession(userId, session);
    } catch (error) {
      logger.error(`Error handling callback query for store ${sanitizeForLog(this.storeId)}:`, error);
    }
  }

  private async showCategoryProducts(bot: TelegramBot, chatId: number, categoryId: string, _session: BotSession): Promise<void> {
    try {
      const result = await this.dataService.getProducts({
        categoryId,
        limit: 10
      });

      if (result.products.length === 0) {
        await bot.sendMessage(chatId, 'üì¶ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
            ]
          }
        });
        return;
      }

      let message = `üìÇ **–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n`;
      message += `–ù–∞–π–¥–µ–Ω–æ: ${result.total} —Ç–æ–≤–∞—Ä–æ–≤\n\n`;

      const currency = await this.getCurrency();
      result.products.forEach(product => {
        message += `üì¶ **${product.name}**\n`;
        message += `üí∞ ${product.price} ${currency}\n`;
        message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}\n\n`;
      });

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            ...result.products.map(product => ([
              { text: `üì¶ ${product.name}`, callback_data: `product_${product.id}` }
            ])),
            [{ text: '‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
          ]
        }
      };

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      logger.error(`Error showing category products for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    }
  }

  private async showProduct(bot: TelegramBot, chatId: number, productId: string, _session: BotSession): Promise<void> {
    try {
      const product = await this.dataService.getProduct(productId);

      let message = `üì¶ **${product.name}**\n\n`;

      if (product.description) {
        message += `üìù ${product.description}\n\n`;
      }

      const currency = await this.getCurrency();
      message += `üí∞ –¶–µ–Ω–∞: ${product.price} ${currency}\n`;
      message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;

      if (product.variants && product.variants.length > 0) {
        message += `\nüé® **–í–∞—Ä–∏–∞–Ω—Ç—ã:**\n`;
        product.variants.forEach(variant => {
          message += `‚Ä¢ ${variant.name}: ${variant.value}`;
          if (variant.price) {
            message += ` (+${variant.price} ${currency})`;
          }
          message += `\n`;
        });
      }

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '1 —à—Ç.', callback_data: `buy_now_${productId}_1` },
              { text: '2 —à—Ç.', callback_data: `buy_now_${productId}_2` },
              { text: '3 —à—Ç.', callback_data: `buy_now_${productId}_3` }
            ],
            [
              { text: '4 —à—Ç.', callback_data: `buy_now_${productId}_4` },
              { text: '5 —à—Ç.', callback_data: `buy_now_${productId}_5` }
            ],
            [
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'catalog' }
            ]
          ]
        }
      };

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      logger.error(`Error showing product for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  }

  /**
   * Handle customer information for checkout
   */
  private async handleCustomerInfo(bot: TelegramBot, chatId: number, customerInfo: string, session: unknown): Promise<void> {
    try {
      // Parse customer info (expecting format like: "Name: John, Phone: +1234567890, Address: 123 Main St")
      const info = this.parseCustomerInfo(customerInfo);

      if (!info.name || !info.phone) {
        await bot.sendMessage(chatId, `‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n\n` +
          `–ò–º—è: –í–∞—à–µ –∏–º—è\n` +
          `–¢–µ–ª–µ—Ñ–æ–Ω: +7xxxxxxxxxx\n` +
          `–ê–¥—Ä–µ—Å: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n` +
          `–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +79001234567, —É–ª. –õ–µ–Ω–∏–Ω–∞ 123`);
        return;
      }

      // Store customer info in session
      (session as any).customerInfo = JSON.stringify(info);

      // Create order with the cart items
      if ((session as any).cart && Object.keys((session as any).cart).length > 0) {
        const cartItems = Object.entries((session as any).cart).map(([productId, quantity]) => ({
          productId,
          quantity: Number(quantity)
        }));

        // Calculate total (simplified)
        let totalAmount = 0;
        for (const item of cartItems) {
          // In real implementation, fetch actual product price
          totalAmount += 100 * item.quantity; // Placeholder price
        }

        // Here you would create the actual order in the database
        // For now, just confirm the order
        await bot.sendMessage(chatId,
          `‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
          `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${info.name}\n` +
          `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${info.phone}\n` +
          `üìç –ê–¥—Ä–µ—Å: ${info.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
          `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${cartItems.length}\n` +
          `üí∞ –°—É–º–º–∞: ${totalAmount}‚ÇΩ\n\n` +
          `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'show_categories' }],
                [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
              ]
            }
          }
        );

        // Clear cart and reset session
        (session as any).cart = {};
        (session as any).currentAction = undefined;

      } else {
        await bot.sendMessage(chatId, '‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.');
      }

    } catch (error) {
      logger.error(`Error handling customer info for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  /**
   * Parse customer info from text
   */
  private parseCustomerInfo(text: string): { name?: string; phone?: string; address?: string } {
    const info: { name?: string; phone?: string; address?: string } = {};

    // Simple parsing - in production, use more robust parsing
    const lines = text.split(/[,\n]/).map(line => line.trim());

    for (const line of lines) {

      // Phone number detection
      const phoneMatch = line.match(/(\+?\d{10,15})/);
      if (phoneMatch && !info.phone) {
        info.phone = phoneMatch[1];
        continue;
      }

      // If no specific pattern matched, treat as name if it's the first unmatched line
      if (!info.name && line.length > 2 && !phoneMatch) {
        // Simple name detection - contains letters but not too many numbers
        const numberCount = (line.match(/\d/g) || []).length;
        if (numberCount < line.length / 3) {
          info.name = line;
          continue;
        }
      }

      // Everything else as address
      if (info.name && info.phone && !info.address && line.length > 5) {
        info.address = line;
      }
    }

    // Fallback: if we have text but no name, use the first part as name
    if (!info.name && text.length > 0) {
      const firstPart = text.split(/[,\n]/)[0].trim();
      if (firstPart.length > 2) {
        info.name = firstPart;
      }
    }

    return info;
  }

  /**
   * Create order from direct purchase and show payment details
   */
  private async createOrderFromDirect(bot: TelegramBot, chatId: number, productId: string, quantity: number, session: BotSession): Promise<void> {
    try {
      const loadingMsg = await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑...');

      // Get product info
      const product = await this.dataService.getProduct(productId);
      const currency = await this.getCurrency();
      const totalAmount = product.price * quantity;

      // Create order in database
      const order = await this.dataService.createOrder({
        customerId: session.userId,
        items: [{
          productId,
          quantity,
          price: product.price
        }],
        customerInfo: {},
        notes: `–ó–∞–∫–∞–∑ –∏–∑ –±–æ—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞`
      });

      // Get store payment info
      const storeInfo = await this.dataService.getStoreInfo();

      // Parse botSettings if it's a string (shouldn't be, but defensive check)
      let botSettings = storeInfo.botSettings;
      if (typeof botSettings === 'string') {
        try {
          botSettings = JSON.parse(botSettings);
        } catch (error) {
          logger.error(`Failed to parse botSettings for store ${sanitizeForLog(this.storeId)}:`, error);
          botSettings = {};
        }
      }

      // Support both old and new payment structure
      const paymentSettings = botSettings?.paymentSettings || {};
      const paymentRequisites = botSettings?.paymentRequisites || {}; // OLD structure from frontend

      // Build order confirmation message with payment details
      let message = `‚úÖ **–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!** #${order.orderNumber || order.id}\n\n`;
      message += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.name}\n`;
      message += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
      message += `üí≥ **–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} ${currency}**\n`;
      message += `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${storeInfo.name}\n\n`;
      message += `üí∞ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:**\n`;

      // Instructions can be in two places
      const instructions = paymentSettings.instructions || botSettings?.paymentInstructions;
      if (instructions) {
        message += `üìù ${instructions}\n\n`;
      } else {
        message += `üìù –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ\n\n`;
      }

      // Try new structure first (paymentSettings.bankDetails)
      const bankDetails = paymentSettings.bankDetails;
      if (bankDetails && (bankDetails.accountNumber || bankDetails.accountName)) {
        message += `üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n`;
        if (bankDetails.accountNumber) {
          message += `üí≥ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: \`${bankDetails.accountNumber}\`\n`;
        }
        if (bankDetails.accountName) {
          message += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${bankDetails.accountName}\n`;
        }
        if (bankDetails.bankName) {
          message += `üè¶ –ë–∞–Ω–∫: ${bankDetails.bankName}\n`;
        }
        if (bankDetails.notes) {
          message += `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${bankDetails.notes}\n`;
        }
        message += `\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!\n\n`;
      }
      // Fallback to old structure (paymentRequisites)
      else if (paymentRequisites && (paymentRequisites.card || paymentRequisites.receiver)) {
        message += `üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n`;
        if (paymentRequisites.card) {
          message += `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${paymentRequisites.card}\`\n`;
        }
        if (paymentRequisites.receiver) {
          message += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${paymentRequisites.receiver}\n`;
        }
        if (paymentRequisites.bank) {
          message += `üè¶ –ë–∞–Ω–∫: ${paymentRequisites.bank}\n`;
        }
        if (paymentRequisites.comment) {
          message += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${paymentRequisites.comment}\n`;
        }
        message += `\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!\n\n`;
      }
      else {
        message += `‚ùó –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n`;
      }

      message += `üì∏ **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)**\n`;
      message += `üìã –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: **#${order.orderNumber || order.id}**`;

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã', callback_data: `upload_proof_${order.id}` }
            ],
            [
              { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' }
            ],
            [
              { text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' },
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }
            ]
          ]
        }
      };

      await bot.deleteMessage(chatId, loadingMsg.message_id);
      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      const sanitizedOrderId = String(order.id).replace(/[\r\n]/g, ' ');
      logger.info(`Order created for store ${sanitizeForLog(this.storeId)}: ${sanitizedOrderId}`, { storeId: sanitizeForLog(this.storeId), orderId: sanitizedOrderId });

    } catch (error) {
      const sanitizedError = error instanceof Error ? error.message.replace(/[\r\n]/g, ' ') : String(error).replace(/[\r\n]/g, ' ');
      logger.error(`Error creating order for store ${sanitizeForLog(this.storeId)}:`, { error: sanitizedError, storeId: sanitizeForLog(this.storeId) });
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  /**
   * Handle payment proof upload (photo or document)
   */
  private async handlePaymentProofUpload(bot: TelegramBot, chatId: number, message: any, session: BotSession): Promise<void> {
    try {
      const orderId = session.paymentProofFlow?.orderId;
      if (!orderId) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const processingMsg = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —á–µ–∫...');

      try {
        logger.info('Starting payment proof upload process', { orderId: sanitizeForLog(orderId) });

        // Get file info
        const photo = message.photo?.[message.photo.length - 1];
        const document = message.document;
        const fileId = photo?.file_id || document?.file_id;

        if (!fileId) {
          logger.error('No fileId found in message');
          await bot.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª', {
            chat_id: chatId,
            message_id: processingMsg.message_id
          });
          return;
        }

        logger.info('Getting file info from Telegram', { fileId: sanitizeForLog(fileId) });

        // Download file from Telegram
        const fileInfo = await bot.getFile(fileId);
        const filePath = fileInfo.file_path;

        if (!filePath) {
          logger.error('No filePath in fileInfo');
          throw new Error('Failed to get file path');
        }

        logger.info('File path received', { filePath: sanitizeForLog(filePath) });

        // Get bot token from database
        const store = await prisma.store.findUnique({
          where: { id: this.storeId },
          select: { botToken: true }
        });

        if (!store?.botToken) {
          logger.error('Bot token not found in database');
          throw new Error('Bot token not found');
        }

        logger.info('Bot token found, attempting decryption');

        // Decrypt bot token (tokens are encrypted in DB for security)
        let decryptedToken: string;
        try {
          decryptedToken = await encryptionService.decryptData(store.botToken);
          logger.info('Bot token decrypted successfully');
        } catch (error) {
          // If decryption fails, token might not be encrypted (legacy data)
          logger.warn('Failed to decrypt token, trying as plaintext', { error });
          decryptedToken = store.botToken;
        }

        logger.info('Downloading file from Telegram');

        const fileUrl = `https://api.telegram.org/file/bot${decryptedToken}/${filePath}`;
        const response = await fetch(fileUrl);

        if (!response.ok) {
          logger.error('Failed to download file', { status: response.status, statusText: response.statusText });
          throw new Error(`Failed to download file: ${response.status} ${response.statusText}`);
        }

        logger.info('File downloaded successfully, saving to disk');

        const buffer = await response.arrayBuffer();
        const fileExtension = path.extname(filePath) || '.jpg';
        const fileName = `payment_proof_${orderId}_${Date.now()}${fileExtension}`;

        // Save file to uploads directory
        const uploadsDir = path.join(process.cwd(), 'uploads', 'payment-proofs');
        await fs.mkdir(uploadsDir, { recursive: true });
        const localFilePath = path.join(uploadsDir, fileName);
        await fs.writeFile(localFilePath, Buffer.from(buffer));

        logger.info('File saved to disk', { localFilePath: sanitizeForLog(localFilePath) });

        // Update order with payment proof
        const relativePath = path.relative(process.cwd(), localFilePath);
        await prisma.order.update({
          where: { id: orderId },
          data: { paymentProof: relativePath }
        });

        logger.info('Order updated with payment proof');

        // Get order details
        const order = await prisma.order.findUnique({
          where: { id: orderId }
        });

        // Clear payment proof flow
        session.paymentProofFlow = undefined;

        // Send success message
        await bot.editMessageText(
          `‚úÖ *–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!*\n\n` +
          `üìã –ó–∞–∫–∞–∑: #${order?.orderNumber}\n` +
          `üí∞ –°—É–º–º–∞: ${order?.totalAmount} ${order?.currency}\n\n` +
          `üë§ –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n` +
          `‚è±Ô∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
          {
            chat_id: chatId,
            message_id: processingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' },
                  { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }
                ]
              ]
            }
          }
        );

        logger.info(`Payment proof uploaded successfully for order ${sanitizeForLog(orderId)}`);

      } catch (error) {
        logger.error(`Payment proof processing failed:`, {
          error: error instanceof Error ? error.message : String(error),
          stack: error instanceof Error ? error.stack : undefined,
          storeId: sanitizeForLog(this.storeId),
          orderId: sanitizeForLog(orderId)
        });
        await bot.editMessageText(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          {
            chat_id: chatId,
            message_id: processingMsg.message_id
          }
        );
      }
    } catch (error) {
      logger.error(`Payment proof upload error for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    }
  }

  /**
   * Initiate payment proof upload flow
   */
  private async initiatePaymentProofFlow(bot: TelegramBot, chatId: number, orderId: string, session: BotSession): Promise<void> {
    try {
      // Get order details
      const order = await prisma.order.findUnique({
        where: { id: orderId },
        include: {
          store: true
        }
      });

      if (!order) {
        await bot.sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // Update session to track payment proof flow
      session.paymentProofFlow = {
        orderId,
        awaitingPhoto: true
      };
      this.saveSession(session.userId, session);

      let instructionText = `üì∏ *–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã*\n\n`;
      instructionText += `üìã –ó–∞–∫–∞–∑: #${order.orderNumber}\n`;
      instructionText += `üí∞ –°—É–º–º–∞: ${order.totalAmount} ${order.currency}\n\n`;
      instructionText += `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n\n`;
      instructionText += `‚Ä¢ –§–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ\n`;
      instructionText += `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n`;
      instructionText += `‚Ä¢ –õ—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É\n\n`;
      instructionText += `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã:\n`;
      instructionText += `- –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n`;
      instructionText += `- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n`;
      instructionText += `- –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è`;

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_payment_proof' }]
          ]
        }
      };

      await bot.sendMessage(chatId, instructionText, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      logger.info(`Payment proof flow initiated for order ${sanitizeForLog(orderId)} in store ${sanitizeForLog(this.storeId)}`);
    } catch (error) {
      logger.error(`Error initiating payment proof flow for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞');
    }
  }

  /**
   * Handle direct purchase - create order immediately
   */
  private async handleDirectPurchase(bot: TelegramBot, chatId: number, productId: string, quantity: number, session: BotSession): Promise<void> {
    try {
      // Get product info
      const product = await this.dataService.getProduct(productId);

      // Check stock
      if (product.stock < quantity) {
        await bot.sendMessage(chatId,
          `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n–î–æ—Å—Ç—É–ø–Ω–æ: ${product.stock} —à—Ç.`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_${productId}` }]
              ]
            }
          }
        );
        return;
      }

      const currency = await this.getCurrency();
      const totalAmount = product.price * quantity;

      // Show confirmation
      let message = `üßæ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**\n\n`;
      message += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.name}\n`;
      message += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
      message += `üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${product.price} ${currency}\n`;
      message += `üí≥ **–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} ${currency}**\n\n`;
      message += `‚ö° –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`;

      await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `confirm_order_${productId}_${quantity}` }
            ],
            [
              { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_${productId}` },
              { text: 'üõí –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }
            ]
          ]
        }
      });

    } catch (error) {
      logger.error(`Error handling direct purchase for store ${sanitizeForLog(this.storeId)}:`, error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
  }

  // Cleanup method
  cleanup(): void {
    this.sessions.clear();
  }
}

export default BotHandlerService;
