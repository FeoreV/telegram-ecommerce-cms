import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Seeding database...');

  // Create super admin user
  const superAdminTelegramId = process.env.SUPER_ADMIN_TELEGRAM_ID || '123456789';
  const superAdminEmail = process.env.SUPER_ADMIN_EMAIL || 'admin@botrt.local';
  
  const superAdmin = await prisma.user.upsert({
    where: { telegramId: superAdminTelegramId },
    update: { 
      role: 'OWNER',
      email: superAdminEmail 
    },
    create: {
      telegramId: superAdminTelegramId,
      email: superAdminEmail,
      firstName: 'Super',
      lastName: 'Admin',
      role: 'OWNER',
      isActive: true,
    },
  });

  console.log('‚úÖ Super admin created:', superAdmin);

  // Create demo store
  const demoStore = await prisma.store.upsert({
    where: { slug: 'demo-store' },
    update: {},
    create: {
      name: 'Demo Store',
      description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      slug: 'demo-store',
      currency: 'RUB',
      contactInfo: JSON.stringify({
        phone: '+7 (900) 123-45-67',
        email: 'demo@store.com',
        address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123'
      }),
      settings: JSON.stringify({
        paymentInstructions: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
        deliveryInfo: '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –¥–Ω–µ–π'
      }),
      ownerId: superAdmin.id,
    },
  });

  console.log('‚úÖ Demo store created:', demoStore);

  // Create demo categories
  const categories = await Promise.all([
    prisma.category.upsert({
      where: { slug: 'electronics' },
      update: {},
      create: {
        name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        slug: 'electronics',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'clothing' },
      update: {},
      create: {
        name: '–û–¥–µ–∂–¥–∞',
        slug: 'clothing',
      },
    }),
    prisma.category.upsert({
      where: { slug: 'books' },
      update: {},
      create: {
        name: '–ö–Ω–∏–≥–∏',
        slug: 'books',
      },
    }),
  ]);

  console.log('‚úÖ Categories created:', categories.length);

  // Delete existing products first
  await prisma.product.deleteMany({ where: { storeId: demoStore.id } });
  
  // Create demo products
  const products = await Promise.all([
    prisma.product.create({
      data: {
        name: 'iPhone 15 Pro',
        description: '–ù–æ–≤–µ–π—à–∏–π —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏',
        sku: 'IPHONE15PRO',
        price: 89999,
        stock: 10,
        images: JSON.stringify(["https://example.com/iphone15pro.jpg"]),
        storeId: demoStore.id,
        categoryId: categories[0].id,
        variants: {
          create: [
            { name: '–¶–≤–µ—Ç', value: '–¢–∏—Ç–∞–Ω–æ–≤—ã–π –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π', price: 89999, stock: 5 },
            { name: '–¶–≤–µ—Ç', value: '–¢–∏—Ç–∞–Ω–æ–≤—ã–π —Å–∏–Ω–∏–π', price: 89999, stock: 3 },
            { name: '–¶–≤–µ—Ç', value: '–¢–∏—Ç–∞–Ω–æ–≤—ã–π –±–µ–ª—ã–π', price: 89999, stock: 2 },
          ],
        },
      },
    }),
    prisma.product.create({
      data: {
        name: '–§—É—Ç–±–æ–ª–∫–∞ –±–∞–∑–æ–≤–∞—è',
        description: '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏',
        sku: 'TSHIRT001',
        price: 1299,
        stock: 50,
        images: JSON.stringify(["https://example.com/tshirt.jpg"]),
        storeId: demoStore.id,
        categoryId: categories[1].id,
        variants: {
          create: [
            { name: '–†–∞–∑–º–µ—Ä', value: 'S', stock: 10 },
            { name: '–†–∞–∑–º–µ—Ä', value: 'M', stock: 15 },
            { name: '–†–∞–∑–º–µ—Ä', value: 'L', stock: 15 },
            { name: '–†–∞–∑–º–µ—Ä', value: 'XL', stock: 10 },
          ],
        },
      },
    }),
    prisma.product.create({
      data: {
        name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ JavaScript',
        description: '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É JavaScript –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
        sku: 'BOOK001',
        price: 2499,
        stock: 25,
        images: JSON.stringify(["https://example.com/jsbook.jpg"]),
        storeId: demoStore.id,
        categoryId: categories[2].id,
      },
    }),
  ]);

  console.log('‚úÖ Demo products created:', products.length);

  // Create demo orders with different statuses and dates
  console.log('üì¶ Creating demo orders...');
  
  // Create some demo customers first
  const demoCustomers = await Promise.all([
    prisma.user.create({
      data: {
        telegramId: '11111111',
        firstName: '–ê–Ω–Ω–∞',
        lastName: '–°–º–∏—Ä–Ω–æ–≤–∞', 
        role: 'CUSTOMER',
        isActive: true,
        lastLoginAt: new Date(),
      }
    }),
    prisma.user.create({
      data: {
        telegramId: '22222222',
        firstName: '–ò–≤–∞–Ω',
        lastName: '–ü–µ—Ç—Ä–æ–≤',
        role: 'CUSTOMER', 
        isActive: true,
        lastLoginAt: new Date(),
      }
    }),
    prisma.user.create({
      data: {
        telegramId: '33333333',
        firstName: '–ú–∞—Ä–∏—è',
        lastName: '–ö–æ–∑–ª–æ–≤–∞',
        role: 'CUSTOMER',
        isActive: true,
        lastLoginAt: new Date(),
      }
    })
  ]);

  // Create orders with different dates and statuses
  const orders = [];
  const statuses = ['PENDING_ADMIN', 'PAID', 'SHIPPED', 'DELIVERED'];
  
  for (let i = 0; i < 15; i++) {
    const randomCustomer = demoCustomers[Math.floor(Math.random() * demoCustomers.length)];
    const randomProduct = products[Math.floor(Math.random() * products.length)];
    const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
    
    // Create order with date in last 30 days
    const orderDate = new Date();
    orderDate.setDate(orderDate.getDate() - Math.floor(Math.random() * 30));
    
    const quantity = Math.floor(Math.random() * 3) + 1;
    const price = randomProduct.price;
    const totalAmount = price * quantity;
    
    // Set timestamps based on status
    let paidAt = null;
    let shippedAt = null; 
    let deliveredAt = null;
    
    if (randomStatus === 'PAID' || randomStatus === 'SHIPPED' || randomStatus === 'DELIVERED') {
      paidAt = new Date(orderDate.getTime() + Math.random() * 24 * 60 * 60 * 1000); // 0-24 hours after creation
    }
    
    if (randomStatus === 'SHIPPED' || randomStatus === 'DELIVERED') {
      shippedAt = new Date(paidAt!.getTime() + Math.random() * 48 * 60 * 60 * 1000); // 0-48 hours after payment
    }
    
    if (randomStatus === 'DELIVERED') {
      deliveredAt = new Date(shippedAt!.getTime() + Math.random() * 72 * 60 * 60 * 1000); // 0-72 hours after shipping
    }

    const order = await prisma.order.create({
      data: {
        customerId: randomCustomer.id,
        storeId: demoStore.id,
        status: randomStatus,
        totalAmount,
        orderNumber: `ORD-${Date.now()}-${i}`,
        customerInfo: JSON.stringify({
          name: `${randomCustomer.firstName} ${randomCustomer.lastName}`,
          telegramId: randomCustomer.telegramId
        }),
        currency: 'RUB',
        createdAt: orderDate,
        paidAt,
        shippedAt,
        deliveredAt,
        items: {
          create: {
            productId: randomProduct.id,
            quantity,
            price,
          }
        }
      }
    });
    
    orders.push(order);
  }

  console.log('‚úÖ Demo orders created:', orders.length);

  // Update product stock based on sold quantities
  for (const product of products) {
    const soldQuantity = orders
      .filter(order => order.status !== 'PENDING_ADMIN')
      .reduce((total, order) => {
        // This is simplified - in real app would check order items
        return total + Math.floor(Math.random() * 2);
      }, 0);
    
    await prisma.product.update({
      where: { id: product.id },
      data: { stock: Math.max(0, product.stock - soldQuantity) }
    });
  }

  console.log('‚úÖ Product stock updated based on orders');
  console.log('üéâ Database seeding completed!');
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });