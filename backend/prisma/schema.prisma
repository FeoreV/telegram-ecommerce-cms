generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  telegramId    String         @unique @map("telegram_id")
  username      String?
  firstName     String?        @map("first_name")
  lastName      String?        @map("last_name")
  email         String?        @unique
  password      String?        // For email/password authentication
  phone         String?
  role          String         @default("CUSTOMER")
  isActive      Boolean        @default(true)
  lastLoginAt   DateTime?      @map("last_login_at")
  profilePhoto  String?        @map("profile_photo")
  balance       Float          @default(0)
  adminLogs     AdminLog[]
  orders        Order[]
  managedStores StoreAdmin[]
  assignedAdmins StoreAdmin[]  @relation("AssignedAdmins")
  ownedStores   Store[]        @relation("StoreOwner")
  vendorStores  StoreVendor[]
  sessions      UserSession[]
  notifications Notification[]
  receivedInvitations EmployeeInvitation[]
  sentInvitations     EmployeeInvitation[] @relation("InvitationsSent")
  employeeActivities  EmployeeActivity[]   @relation("EmployeeActivities")
  createdInviteLinks  InviteLink[]         @relation("CreatedInviteLinks")
  createdCustomRoles  CustomRole[]         @relation("CreatedCustomRoles")

  @@map("users")
}

model Store {
  id                    String               @id @default(cuid())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  name                  String
  description           String?
  slug                  String               @unique
  status                String               @default("ACTIVE")
  currency              String               @default("USD")
  domain                String?              @unique
  contactInfo           String?
  contactPhone          String?              @map("contact_phone")
  settings              String?
  logoUrl               String?              @map("logo_url")
  bannerUrl             String?              @map("banner_url")
  lowStockThreshold     Int                  @default(10) @map("low_stock_threshold")
  criticalStockThreshold Int                 @default(5) @map("critical_stock_threshold")
  enableStockAlerts     Boolean              @default(true) @map("enable_stock_alerts")
  // Telegram Bot Configuration
  botToken              String?              @unique @map("bot_token")
  botUsername           String?              @unique @map("bot_username") 
  botStatus             String               @default("INACTIVE") @map("bot_status") // INACTIVE, ACTIVE, SUSPENDED
  botWebhookUrl         String?              @map("bot_webhook_url")
  botSettings           String?              @map("bot_settings") // JSON config
  botCreatedAt          DateTime?            @map("bot_created_at")
  botLastActive         DateTime?            @map("bot_last_active")
  ownerId               String               @map("owner_id")
  integrationMappings   IntegrationMapping[]
  orders                Order[]
  products              Product[]
  admins                StoreAdmin[]
  vendors               StoreVendor[]
  stockLogs             StockLog[]
  notifications         Notification[]
  employeeInvitations   EmployeeInvitation[]
  employeeActivities    EmployeeActivity[]
  inviteLinks           InviteLink[]
  customRoles           CustomRole[]
  owner                 User                 @relation("StoreOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId], map: "stores_owner_id_idx")
  @@index([botToken], map: "stores_bot_token_idx")
  @@index([botStatus], map: "stores_bot_status_idx")
  @@map("stores")
}

model StoreAdmin {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  storeId    String    @map("store_id")
  userId     String    @map("user_id")
  assignedBy String?   @map("assigned_by")
  store      Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User? @relation("AssignedAdmins", fields: [assignedBy], references: [id])

  @@unique([storeId, userId])
  @@index([userId], map: "store_admins_user_id_idx")
  @@index([assignedBy], map: "store_admins_assigned_by_idx")
  @@map("store_admins")
}

model Category {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  slug      String     @unique
  parentId  String?    @map("parent_id")
  parent    Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryHierarchy")
  products  Product[]

  @@index([parentId], map: "categories_parent_id_fkey")
  @@map("categories")
}

model Product {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  description String?
  sku         String?
  price       Float
  stock       Int              @default(0)
  trackStock  Boolean          @default(true) @map("track_stock")
  isActive    Boolean          @default(true)
  images      String?
  storeId     String           @map("store_id")
  categoryId  String?          @map("category_id")
  orderItems  OrderItem[]
  variants    ProductVariant[]
  stockLogs   StockLog[]
  category    Category?        @relation(fields: [categoryId], references: [id])
  store       Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, sku])
  @@index([categoryId], map: "products_category_id_fkey")
  @@map("products")
}

model ProductVariant {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String
  value      String
  price      Float?
  stock      Int?
  sku        String?
  productId  String      @map("product_id")
  orderItems OrderItem[]
  stockLogs  StockLog[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, name, value])
  @@map("product_variants")
}

model Order {
  id                  String      @id @default(cuid())
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  orderNumber         String      @unique
  status              String      @default("PENDING_ADMIN")
  totalAmount         Float
  currency            String      @default("USD")
  customerInfo        String
  notes               String?
  paidAt              DateTime?   @map("paid_at")
  rejectedAt          DateTime?   @map("rejected_at")
  rejectionReason     String?     @map("rejection_reason")
  shippedAt           DateTime?   @map("shipped_at")
  deliveredAt         DateTime?   @map("delivered_at")
  cancelledAt         DateTime?   @map("cancelled_at")
  trackingNumber      String?     @map("tracking_number")
  carrier             String?
  deliveryNotes       String?     @map("delivery_notes")
  cancellationReason  String?     @map("cancellation_reason")
  paymentProof        String?     @map("payment_proof")
  clientRequestId     String?     @unique @map("client_request_id")
  customerId          String      @map("customer_id")
  storeId             String      @map("store_id")
  adminLogs           AdminLog[]
  items               OrderItem[]
  notifications       Notification[]
  customer            User        @relation(fields: [customerId], references: [id])
  store               Store       @relation(fields: [storeId], references: [id])

  @@index([customerId], map: "orders_customer_id_fkey")
  @@index([storeId], map: "orders_store_id_fkey")
  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  quantity  Int
  price     Float
  orderId   String          @map("order_id")
  productId String          @map("product_id")
  variantId String?         @map("variant_id")
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId], map: "order_items_order_id_fkey")
  @@index([productId], map: "order_items_product_id_fkey")
  @@index([variantId], map: "order_items_variant_id_fkey")
  @@map("order_items")
}

model AdminLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  action    String
  details   String?
  adminId   String   @map("admin_id")
  orderId   String?  @map("order_id")
  admin     User     @relation(fields: [adminId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])

  @@index([adminId], map: "admin_logs_admin_id_fkey")
  @@index([orderId], map: "admin_logs_order_id_fkey")
  @@map("admin_logs")
}

model IntegrationMapping {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  source     String
  entityType String   @map("entity_type")
  localId    String   @map("local_id")
  externalId String   @map("external_id")
  storeId    String?  @map("store_id")
  store      Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([source, entityType, externalId])
  @@unique([source, entityType, localId])
  @@index([storeId], map: "integration_mappings_store_id_fkey")
  @@map("integration_mappings")
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  title     String
  message   String
  priority  String   @default("MEDIUM")
  channels  String   // JSON array of channels
  data      String?  // JSON data
  readAt    DateTime?  @map("read_at")
  storeId   String?  @map("store_id")
  orderId   String?  @map("order_id")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([userId], map: "notifications_user_id_fkey")
  @@index([storeId], map: "notifications_store_id_fkey")
  @@index([orderId], map: "notifications_order_id_fkey")
  @@index([createdAt], map: "notifications_created_at_idx")
  @@map("notifications")
}

model UserSession {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String    @map("user_id")
  refreshToken String    @unique @map("refresh_token")
  expiresAt    DateTime  @map("expires_at")
  ipAddress    String?   @map("ip_address")
  userAgent    String?   @map("user_agent")
  isRevoked    Boolean   @default(false) @map("is_revoked")
  revokedAt    DateTime? @map("revoked_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_sessions_user_id_idx")
  @@index([refreshToken], map: "user_sessions_refresh_token_idx")
  @@index([expiresAt], map: "user_sessions_expires_at_idx")
  @@map("user_sessions")
}

model StoreVendor {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  storeId      String      @map("store_id")
  userId       String      @map("user_id")
  assignedBy   String?     @map("assigned_by")
  isActive     Boolean     @default(true) @map("is_active")
  permissions  String?     // JSON permissions (legacy)
  customRoleId String?     @map("custom_role_id")
  store        Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  customRole   CustomRole? @relation(fields: [customRoleId], references: [id])

  @@unique([storeId, userId])
  @@index([userId], map: "store_vendors_user_id_idx")
  @@index([storeId], map: "store_vendors_store_id_idx")
  @@index([customRoleId], map: "store_vendors_custom_role_id_idx")
  @@map("store_vendors")
}

model StockLog {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  productId   String   @map("product_id")
  storeId     String   @map("store_id")
  variantId   String?  @map("variant_id")
  changeType  String   // MANUAL_ADJUSTMENT, ORDER_PLACED, ORDER_CANCELLED, RETURNED, etc.
  previousQty Int      @map("previous_qty")
  newQty      Int      @map("new_qty")
  changeQty   Int      @map("change_qty")
  reason      String?
  userId      String?  @map("user_id") // Who made the change
  orderId     String?  @map("order_id") // Related order if applicable
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([productId], map: "stock_logs_product_id_idx")
  @@index([storeId], map: "stock_logs_store_id_idx")
  @@index([createdAt], map: "stock_logs_created_at_idx")
  @@index([variantId], map: "stock_logs_variant_id_idx")
  @@map("stock_logs")
}

model EmployeeInvitation {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  storeId      String      @map("store_id")
  userId       String      @map("user_id")
  invitedBy    String      @map("invited_by")
  role         String?     // ADMIN, VENDOR (legacy)
  customRoleId String?     @map("custom_role_id")
  permissions  String?     // JSON permissions (legacy)
  token        String      @unique
  expiresAt    DateTime    @map("expires_at")
  acceptedAt   DateTime?   @map("accepted_at")
  rejectedAt   DateTime?   @map("rejected_at")
  message      String?     // Optional invitation message
  status       String      @default("PENDING") // PENDING, ACCEPTED, REJECTED, EXPIRED
  inviteLinkId String?     @map("invite_link_id")
  store        Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter      User        @relation("InvitationsSent", fields: [invitedBy], references: [id])
  inviteLink   InviteLink? @relation(fields: [inviteLinkId], references: [id])

  @@index([token], map: "employee_invitations_token_idx")
  @@index([storeId], map: "employee_invitations_store_id_idx")
  @@index([userId], map: "employee_invitations_user_id_idx")
  @@index([status], map: "employee_invitations_status_idx")
  @@index([expiresAt], map: "employee_invitations_expires_at_idx")
  @@index([customRoleId], map: "employee_invitations_custom_role_id_idx")
  @@index([inviteLinkId], map: "employee_invitations_invite_link_id_idx")
  @@map("employee_invitations")
}

model EmployeeActivity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  storeId   String   @map("store_id")
  userId    String   @map("user_id")
  action    String   // LOGIN, LOGOUT, PRODUCT_CREATED, PRODUCT_UPDATED, ORDER_PROCESSED, etc.
  details   String?  // JSON details
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user      User     @relation("EmployeeActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([storeId], map: "employee_activities_store_id_idx")
  @@index([userId], map: "employee_activities_user_id_idx")
  @@index([createdAt], map: "employee_activities_created_at_idx")
  @@index([action], map: "employee_activities_action_idx")
  @@map("employee_activities")
}

model InviteLink {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  storeId     String    @map("store_id")
  createdBy   String    @map("created_by")
  token       String    @unique
  role        String?   // ADMIN, VENDOR, or custom role ID
  customRoleId String?  @map("custom_role_id")
  permissions String?   // JSON permissions for direct assignment
  maxUses     Int       @default(1) @map("max_uses")
  usedCount   Int       @default(0) @map("used_count")
  expiresAt   DateTime? @map("expires_at")
  isActive    Boolean   @default(true) @map("is_active")
  description String?   // Optional description of the invite link
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  creator     User      @relation("CreatedInviteLinks", fields: [createdBy], references: [id])
  customRole  CustomRole? @relation(fields: [customRoleId], references: [id])
  invitations EmployeeInvitation[]

  @@index([token], map: "invite_links_token_idx")
  @@index([storeId], map: "invite_links_store_id_idx")
  @@index([createdBy], map: "invite_links_created_by_idx")
  @@index([isActive], map: "invite_links_is_active_idx")
  @@index([expiresAt], map: "invite_links_expires_at_idx")
  @@map("invite_links")
}

model CustomRole {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  storeId     String     @map("store_id")
  name        String
  description String?
  permissions String     // JSON array of permissions
  color       String     @default("#6366f1") // Hex color for UI
  icon        String?    // Optional icon name
  isActive    Boolean    @default(true) @map("is_active")
  createdBy   String     @map("created_by")
  store       Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  creator     User       @relation("CreatedCustomRoles", fields: [createdBy], references: [id])
  vendors     StoreVendor[]
  inviteLinks InviteLink[]

  @@unique([storeId, name])
  @@index([storeId], map: "custom_roles_store_id_idx")
  @@index([isActive], map: "custom_roles_is_active_idx")
  @@index([createdBy], map: "custom_roles_created_by_idx")
  @@map("custom_roles")
}
