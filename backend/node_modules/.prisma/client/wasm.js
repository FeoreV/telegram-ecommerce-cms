
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  phone: 'phone',
  role: 'role',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  profilePhoto: 'profilePhoto',
  balance: 'balance'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  slug: 'slug',
  status: 'status',
  currency: 'currency',
  domain: 'domain',
  contactInfo: 'contactInfo',
  contactPhone: 'contactPhone',
  settings: 'settings',
  logoUrl: 'logoUrl',
  bannerUrl: 'bannerUrl',
  lowStockThreshold: 'lowStockThreshold',
  criticalStockThreshold: 'criticalStockThreshold',
  enableStockAlerts: 'enableStockAlerts',
  botToken: 'botToken',
  botUsername: 'botUsername',
  botStatus: 'botStatus',
  botWebhookUrl: 'botWebhookUrl',
  botSettings: 'botSettings',
  botCreatedAt: 'botCreatedAt',
  botLastActive: 'botLastActive',
  ownerId: 'ownerId'
};

exports.Prisma.StoreAdminScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  storeId: 'storeId',
  userId: 'userId',
  assignedBy: 'assignedBy'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  sku: 'sku',
  price: 'price',
  stock: 'stock',
  trackStock: 'trackStock',
  isActive: 'isActive',
  images: 'images',
  storeId: 'storeId',
  categoryId: 'categoryId'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  value: 'value',
  price: 'price',
  stock: 'stock',
  sku: 'sku',
  productId: 'productId'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  orderNumber: 'orderNumber',
  status: 'status',
  totalAmount: 'totalAmount',
  currency: 'currency',
  customerInfo: 'customerInfo',
  notes: 'notes',
  paidAt: 'paidAt',
  rejectedAt: 'rejectedAt',
  rejectionReason: 'rejectionReason',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  cancelledAt: 'cancelledAt',
  trackingNumber: 'trackingNumber',
  carrier: 'carrier',
  deliveryNotes: 'deliveryNotes',
  cancellationReason: 'cancellationReason',
  paymentProof: 'paymentProof',
  clientRequestId: 'clientRequestId',
  customerId: 'customerId',
  storeId: 'storeId'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  quantity: 'quantity',
  price: 'price',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  action: 'action',
  details: 'details',
  adminId: 'adminId',
  orderId: 'orderId'
};

exports.Prisma.IntegrationMappingScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  source: 'source',
  entityType: 'entityType',
  localId: 'localId',
  externalId: 'externalId',
  storeId: 'storeId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  channels: 'channels',
  data: 'data',
  readAt: 'readAt',
  storeId: 'storeId',
  orderId: 'orderId',
  userId: 'userId'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isRevoked: 'isRevoked',
  revokedAt: 'revokedAt'
};

exports.Prisma.StoreVendorScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId',
  userId: 'userId',
  assignedBy: 'assignedBy',
  isActive: 'isActive',
  permissions: 'permissions',
  customRoleId: 'customRoleId'
};

exports.Prisma.StockLogScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  productId: 'productId',
  storeId: 'storeId',
  variantId: 'variantId',
  changeType: 'changeType',
  previousQty: 'previousQty',
  newQty: 'newQty',
  changeQty: 'changeQty',
  reason: 'reason',
  userId: 'userId',
  orderId: 'orderId'
};

exports.Prisma.EmployeeInvitationScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId',
  userId: 'userId',
  invitedBy: 'invitedBy',
  role: 'role',
  customRoleId: 'customRoleId',
  permissions: 'permissions',
  token: 'token',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  rejectedAt: 'rejectedAt',
  message: 'message',
  status: 'status',
  inviteLinkId: 'inviteLinkId'
};

exports.Prisma.EmployeeActivityScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  storeId: 'storeId',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};

exports.Prisma.InviteLinkScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId',
  createdBy: 'createdBy',
  token: 'token',
  role: 'role',
  customRoleId: 'customRoleId',
  permissions: 'permissions',
  maxUses: 'maxUses',
  usedCount: 'usedCount',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  description: 'description'
};

exports.Prisma.CustomRoleScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  color: 'color',
  icon: 'icon',
  isActive: 'isActive',
  createdBy: 'createdBy'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Store: 'Store',
  StoreAdmin: 'StoreAdmin',
  Category: 'Category',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  Order: 'Order',
  OrderItem: 'OrderItem',
  AdminLog: 'AdminLog',
  IntegrationMapping: 'IntegrationMapping',
  Notification: 'Notification',
  UserSession: 'UserSession',
  StoreVendor: 'StoreVendor',
  StockLog: 'StockLog',
  EmployeeInvitation: 'EmployeeInvitation',
  EmployeeActivity: 'EmployeeActivity',
  InviteLink: 'InviteLink',
  CustomRole: 'CustomRole'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
