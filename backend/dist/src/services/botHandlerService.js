"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BotHandlerService = void 0;
const i18n_js_1 = require("../utils/i18n.js");
const logger_js_1 = require("../utils/logger.js");
const sanitizer_js_1 = require("../utils/sanitizer.js");
const botDataService_js_1 = __importDefault(require("./botDataService.js"));
class BotHandlerService {
    constructor(storeId) {
        this.sessions = new Map();
        this.language = 'ru';
        this.storeId = storeId;
        this.dataService = new botDataService_js_1.default(storeId);
        this.initializeLanguage();
    }
    async initializeLanguage() {
        try {
            const storeInfo = await this.dataService.getStoreInfo();
            const lang = storeInfo.botSettings?.language;
            if (lang && (0, i18n_js_1.isSupportedLanguage)(lang)) {
                this.language = lang;
            }
        }
        catch (_error) {
            logger_js_1.logger.warn(`Could not load language for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}, using default (ru)`);
        }
    }
    translate(key) {
        return (0, i18n_js_1.t)(key, this.language);
    }
    async handleMessage(bot, msg) {
        try {
            const message = msg;
            const chatId = message.chat.id;
            const userId = message.from.id.toString();
            const text = message.text || '';
            let session = this.getSession(userId);
            if (!session) {
                session = await this.createSession(userId, message.from);
            }
            await this.dataService.updateStoreStats();
            if (text.startsWith('/')) {
                await this.handleCommand(bot, chatId, text, session);
            }
            else {
                await this.handleTextMessage(bot, chatId, text, session);
            }
            this.saveSession(userId, session);
        }
        catch (error) {
            logger_js_1.logger.error(`Error handling message for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            if (error instanceof Error && error.message.startsWith('STORE_NOT_FOUND')) {
                logger_js_1.logger.error(`‚õî Store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)} no longer exists - bot should be stopped`);
                await bot.sendMessage(msg.chat.id, '‚ö†Ô∏è –≠—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.').catch(() => { });
                throw error;
            }
            await bot.sendMessage(msg.chat.id, `‚ùå ${this.translate('error.generic')}`).catch(() => { });
        }
    }
    async handleCommand(bot, chatId, command, session) {
        const cmd = command.split(' ')[0].toLowerCase();
        const customCommandResponse = await this.checkCustomCommands(cmd);
        if (customCommandResponse) {
            await bot.sendMessage(chatId, customCommandResponse, { parse_mode: 'Markdown' });
            return;
        }
        switch (cmd) {
            case '/start':
                await this.handleStartCommand(bot, chatId, session);
                break;
            case '/catalog':
            case '/catalogue':
                await this.showCatalog(bot, chatId, session);
                break;
            case '/orders':
                await this.showMyOrders(bot, chatId, session);
                break;
            case '/help':
                await this.showHelp(bot, chatId);
                break;
            default:
                await bot.sendMessage(chatId, this.translate('error.unknown_command'));
        }
    }
    async checkCustomCommands(command) {
        try {
            const storeInfo = await this.dataService.getStoreInfo();
            const settings = storeInfo.botSettings;
            if (!settings?.customCommands || !Array.isArray(settings.customCommands)) {
                return null;
            }
            for (const customCmd of settings.customCommands) {
                if (!customCmd.enabled)
                    continue;
                const cmdPattern = customCmd.command.toLowerCase().trim();
                const inputCmd = command.toLowerCase().trim();
                if (inputCmd === cmdPattern || inputCmd === `/${cmdPattern}`) {
                    return customCmd.response;
                }
            }
            return null;
        }
        catch (error) {
            logger_js_1.logger.error('Error checking custom commands:', error);
            return null;
        }
    }
    async handleTextMessage(bot, chatId, text, session) {
        switch (session.currentAction) {
            case 'awaiting_customer_info':
                await this.handleCustomerInfo(bot, chatId, text, session);
                break;
            default:
                {
                    const autoResponse = await this.checkAutoResponses(text);
                    if (autoResponse) {
                        await bot.sendMessage(chatId, autoResponse, { parse_mode: 'Markdown' });
                    }
                    else {
                        await bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏');
                    }
                }
        }
    }
    async checkAutoResponses(text) {
        try {
            const storeInfo = await this.dataService.getStoreInfo();
            const settings = storeInfo.botSettings;
            if (!settings)
                return null;
            if (settings.autoResponses?.responses && Array.isArray(settings.autoResponses.responses)) {
                for (const autoResp of settings.autoResponses.responses) {
                    if (!autoResp.enabled)
                        continue;
                    const trigger = autoResp.trigger.toLowerCase().trim();
                    const messageText = text.toLowerCase().trim();
                    if (messageText === trigger || messageText.includes(trigger)) {
                        return autoResp.response;
                    }
                }
            }
            if (settings.faqs && Array.isArray(settings.faqs)) {
                for (const faq of settings.faqs) {
                    const question = faq.question.toLowerCase().trim();
                    const messageText = text.toLowerCase().trim();
                    if (messageText.includes(question) || question.includes(messageText)) {
                        return `‚ùì **${faq.question}**\n\n${faq.answer}`;
                    }
                }
            }
            return null;
        }
        catch (error) {
            logger_js_1.logger.error('Error checking auto responses:', error);
            return null;
        }
    }
    async handleStartCommand(bot, chatId, _session) {
        const storeInfo = await this.dataService.getStoreInfo();
        const stats = await this.dataService.getBasicStats();
        const customization = storeInfo.botSettings?.startCustomization || {};
        const emoji = customization.emoji || 'üõçÔ∏è';
        const greeting = customization.greeting || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å';
        const welcomeText = customization.welcomeText || storeInfo.botSettings?.welcome_message ||
            `${greeting} –≤ –º–∞–≥–∞–∑–∏–Ω "${storeInfo.name}"!`;
        const showStats = customization.showStats !== false;
        const showDescription = customization.showDescription !== false;
        const additionalText = customization.additionalText || '';
        const headerImage = customization.headerImage || null;
        const catalogButton = customization.catalogButton || {
            text: 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
            emoji: 'üõí'
        };
        const profileButton = customization.profileButton || {
            text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
            emoji: 'üë§'
        };
        const helpButton = customization.helpButton || {
            text: '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
            emoji: '‚ùì'
        };
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: catalogButton.text, callback_data: 'catalog' }
                    ],
                    [
                        { text: profileButton.text, callback_data: 'profile' },
                        { text: helpButton.text, callback_data: 'help' }
                    ]
                ]
            }
        };
        if (customization.extraButtons && Array.isArray(customization.extraButtons)) {
            customization.extraButtons.forEach((btn) => {
                if (btn.text && (btn.callback_data || btn.url)) {
                    const button = { text: btn.text };
                    if (btn.url) {
                        button.url = btn.url;
                    }
                    else {
                        button.callback_data = btn.callback_data;
                    }
                    keyboard.reply_markup.inline_keyboard.push([button]);
                }
            });
        }
        let message = `${emoji} **${welcomeText}**\n\n`;
        if (showDescription && storeInfo.description) {
            message += `üìù ${storeInfo.description}\n\n`;
        }
        if (additionalText) {
            message += `${additionalText}\n\n`;
        }
        if (showStats) {
            message += `üìä **–û –º–∞–≥–∞–∑–∏–Ω–µ:**\n`;
            message += `‚Ä¢ ${stats.products.active} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏\n`;
            message += `‚Ä¢ ${stats.orders.total} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n`;
            message += `‚Ä¢ –í–∞–ª—é—Ç–∞: ${storeInfo.currency}\n\n`;
        }
        message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        if (headerImage) {
            try {
                await bot.sendPhoto(chatId, headerImage, {
                    caption: message,
                    parse_mode: 'Markdown',
                    ...keyboard
                });
            }
            catch (error) {
                logger_js_1.logger.warn(`Failed to send header image for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
                await bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    ...keyboard
                });
            }
        }
        else {
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
    }
    async showCatalog(bot, chatId, _session) {
        try {
            const [categories, productsResult] = await Promise.all([
                this.dataService.getCategories(),
                this.dataService.getProducts({ limit: 10 })
            ]);
            let message = 'üõí **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤**\n\n';
            if (categories.length > 0) {
                message += 'üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n';
                categories.forEach(category => {
                    message += `‚Ä¢ ${category.name} (${category._count.products})\n`;
                });
                message += '\n';
            }
            if (productsResult.products.length > 0) {
                message += 'üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n';
                const currency = await this.getCurrency();
                for (const product of productsResult.products.slice(0, 5)) {
                    message += `‚Ä¢ ${product.name} - ${product.price} ${currency}\n`;
                }
                message += '\n';
            }
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        ...categories.map(category => ([
                            { text: `üìÇ ${category.name}`, callback_data: `category_${category.id}` }
                        ])),
                        [
                            { text: 'üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'search' },
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }
                        ]
                    ]
                }
            };
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        catch (error) {
            logger_js_1.logger.error(`Error showing catalog for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞');
        }
    }
    async showCart(bot, chatId, session) {
        if (!session.cart || session.cart.length === 0) {
            await bot.sendMessage(chatId, 'üõçÔ∏è –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /catalog –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
                    ]
                }
            });
            return;
        }
        let message = 'üõçÔ∏è **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:**\n\n';
        let total = 0;
        const currency = await this.getCurrency();
        session.cart.forEach((item, index) => {
            const itemTotal = item.price * item.quantity;
            total += itemTotal;
            message += `${index + 1}. ${item.name}\n`;
            message += `   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n`;
            message += `   –¶–µ–Ω–∞: ${itemTotal} ${currency}\n\n`;
        });
        message += `üí∞ **–ò—Ç–æ–≥–æ: ${total} ${currency}**`;
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' },
                        { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' }
                    ],
                    [
                        { text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' },
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }
                    ]
                ]
            }
        };
        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            ...keyboard
        });
    }
    async showMyOrders(bot, chatId, session) {
        try {
            const orders = await this.dataService.getCustomerOrders(session.userId, 5);
            if (orders.length === 0) {
                await bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
                        ]
                    }
                });
                return;
            }
            let message = 'üìã **–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:**\n\n';
            const defaultCurrency = await this.getCurrency();
            orders.forEach(order => {
                message += `üßæ **–ó–∞–∫–∞–∑ ${order.orderNumber}**\n`;
                message += `üìÖ ${new Date(order.createdAt).toLocaleDateString('ru-RU')}\n`;
                message += `üí∞ ${order.totalAmount} ${order.currency || defaultCurrency}\n`;
                message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}\n\n`;
            });
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        ...orders.slice(0, 3).map(order => ([
                            { text: `üìã ${order.orderNumber}`, callback_data: `order_${order.id}` }
                        ])),
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }]
                    ]
                }
            };
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        catch (error) {
            logger_js_1.logger.error(`Error showing orders for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
        }
    }
    async handleSearch(bot, chatId, query, session) {
        try {
            const result = await this.dataService.getProducts({
                search: query,
                limit: 10
            });
            if (result.products.length === 0) {
                await bot.sendMessage(chatId, `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üõí –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }]
                        ]
                    }
                });
                return;
            }
            let message = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${query}":**\n\n`;
            message += `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.total}\n\n`;
            const currency = await this.getCurrency();
            result.products.forEach(product => {
                message += `üì¶ **${product.name}**\n`;
                if (product.description) {
                    message += `${product.description.substring(0, 100)}${product.description.length > 100 ? '...' : ''}\n`;
                }
                message += `üí∞ ${product.price} ${currency}\n`;
                message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}\n\n`;
            });
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        ...result.products.slice(0, 5).map(product => ([
                            { text: `üì¶ ${product.name}`, callback_data: `product_${product.id}` }
                        ])),
                        [
                            { text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search' },
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'start' }
                        ]
                    ]
                }
            };
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
            session.currentAction = undefined;
        }
        catch (error) {
            logger_js_1.logger.error(`Error handling search for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
        }
    }
    async showHelp(bot, chatId) {
        try {
            const storeInfo = await this.dataService.getStoreInfo();
            const menuCustomization = storeInfo.botSettings?.menuCustomization || {};
            let message = `‚ùì **–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã**\n\n`;
            message += `**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
            message += `/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n`;
            message += `/catalog - ${menuCustomization.catalogText || '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'}\n`;
            message += `/orders - ${menuCustomization.ordersText || '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'}\n`;
            message += `/help - ${menuCustomization.helpText || '–≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞'}\n`;
            if (storeInfo.botSettings?.customCommands && Array.isArray(storeInfo.botSettings.customCommands)) {
                const enabledCommands = storeInfo.botSettings.customCommands.filter((cmd) => cmd.enabled);
                if (enabledCommands.length > 0) {
                    message += `\n**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
                    enabledCommands.forEach((cmd) => {
                        message += `/${cmd.command} - ${cmd.description || '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'}\n`;
                    });
                }
            }
            message += `\n**–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:**\n`;
            message += `1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ\n`;
            message += `2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n`;
            message += `3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑\n`;
            message += `4Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n`;
            message += `5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n\n`;
            message += `üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
            message += `üè™ ${storeInfo.name}\n`;
            if (storeInfo.contactInfo) {
                try {
                    const contacts = JSON.parse(storeInfo.contactInfo);
                    if (contacts.phone)
                        message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${contacts.phone}\n`;
                    if (contacts.email)
                        message += `üìß Email: ${contacts.email}\n`;
                    if (contacts.address)
                        message += `üìç –ê–¥—Ä–µ—Å: ${contacts.address}\n`;
                }
                catch (error) {
                    message += `üìû ${storeInfo.contactInfo}\n`;
                }
            }
            message += `\nüí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ!`;
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }]
                    ]
                }
            });
        }
        catch (error) {
            logger_js_1.logger.error(`Error showing help for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
        }
    }
    async showProfile(bot, chatId, session) {
        try {
            const orders = await this.dataService.getCustomerOrders(session.userId, 5);
            const currency = await this.getCurrency();
            let message = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n`;
            message += `üÜî ID: ${session.userId}\n`;
            message += `üìã –ó–∞–∫–∞–∑–æ–≤: ${orders.length}\n\n`;
            let totalSpent = 0;
            let paidOrders = 0;
            orders.forEach((order) => {
                if (order.status === 'PAID' || order.status === 'DELIVERED') {
                    totalSpent += order.totalAmount || 0;
                    paidOrders++;
                }
            });
            message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
            message += `‚úÖ –û–ø–ª–∞—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${paidOrders}\n`;
            message += `üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: ${totalSpent.toFixed(2)} ${currency}\n\n`;
            message += `*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:*`;
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' }
                        ],
                        [
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }
                        ]
                    ]
                }
            });
        }
        catch (_error) {
            logger_js_1.logger.error(`Error showing profile for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, _error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        }
    }
    getSession(userId) {
        return this.sessions.get(userId) || null;
    }
    async createSession(userId, telegramUser) {
        const tgUser = telegramUser;
        const user = await this.dataService.getOrCreateCustomer(userId, {
            username: tgUser.username,
            firstName: tgUser.first_name,
            lastName: tgUser.last_name
        });
        const session = {
            userId: user.id,
            storeId: this.storeId,
            cart: [],
            data: {}
        };
        this.sessions.set(userId, session);
        return session;
    }
    saveSession(userId, session) {
        this.sessions.set(userId, session);
    }
    async getCurrency() {
        try {
            const storeInfo = await this.dataService.getStoreInfo();
            return storeInfo.currency || 'USD';
        }
        catch (_error) {
            return 'USD';
        }
    }
    getStatusText(status) {
        const statusMap = {
            'PENDING_ADMIN': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'PAID': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
            'SHIPPED': 'üöö –û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'DELIVERED': 'üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'REJECTED': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω',
            'CANCELLED': 'üö´ –û—Ç–º–µ–Ω–µ–Ω'
        };
        return statusMap[status] || status;
    }
    async handleCallbackQuery(bot, query) {
        try {
            const callbackQuery = query;
            const chatId = callbackQuery.message.chat.id;
            const userId = callbackQuery.from.id.toString();
            const data = callbackQuery.data;
            let session = this.getSession(userId);
            if (!session) {
                session = await this.createSession(userId, callbackQuery.from);
            }
            await bot.answerCallbackQuery(callbackQuery.id);
            if (data === 'start') {
                await this.handleStartCommand(bot, chatId, session);
            }
            else if (data === 'catalog') {
                await this.showCatalog(bot, chatId, session);
            }
            else if (data === 'profile') {
                await this.showProfile(bot, chatId, session);
            }
            else if (data === 'orders') {
                await this.showMyOrders(bot, chatId, session);
            }
            else if (data === 'help') {
                await this.showHelp(bot, chatId);
            }
            else if (data.startsWith('category_')) {
                const categoryId = data.replace('category_', '');
                await this.showCategoryProducts(bot, chatId, categoryId, session);
            }
            else if (data.startsWith('product_')) {
                const productId = data.replace('product_', '');
                await this.showProduct(bot, chatId, productId, session);
            }
            else if (data.startsWith('buy_now_')) {
                const parts = data.replace('buy_now_', '').split('_');
                if (parts.length >= 2) {
                    const productId = parts[0];
                    const quantity = parseInt(parts[1]) || 1;
                    await this.handleDirectPurchase(bot, chatId, productId, quantity, session);
                }
            }
            else if (data.startsWith('confirm_order_')) {
                const parts = data.replace('confirm_order_', '').split('_');
                if (parts.length >= 2) {
                    const productId = parts[0];
                    const quantity = parseInt(parts[1]) || 1;
                    await this.createOrderFromDirect(bot, chatId, productId, quantity, session);
                }
            }
            this.saveSession(userId, session);
        }
        catch (error) {
            logger_js_1.logger.error(`Error handling callback query for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
        }
    }
    async showCategoryProducts(bot, chatId, categoryId, _session) {
        try {
            const result = await this.dataService.getProducts({
                categoryId,
                limit: 10
            });
            if (result.products.length === 0) {
                await bot.sendMessage(chatId, 'üì¶ –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
                        ]
                    }
                });
                return;
            }
            let message = `üìÇ **–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n`;
            message += `–ù–∞–π–¥–µ–Ω–æ: ${result.total} —Ç–æ–≤–∞—Ä–æ–≤\n\n`;
            const currency = await this.getCurrency();
            result.products.forEach(product => {
                message += `üì¶ **${product.name}**\n`;
                message += `üí∞ ${product.price} ${currency}\n`;
                message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock}\n\n`;
            });
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        ...result.products.map(product => ([
                            { text: `üì¶ ${product.name}`, callback_data: `product_${product.id}` }
                        ])),
                        [{ text: '‚¨ÖÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
                    ]
                }
            };
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        catch (error) {
            logger_js_1.logger.error(`Error showing category products for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
        }
    }
    async showProduct(bot, chatId, productId, _session) {
        try {
            const product = await this.dataService.getProduct(productId);
            let message = `üì¶ **${product.name}**\n\n`;
            if (product.description) {
                message += `üìù ${product.description}\n\n`;
            }
            const currency = await this.getCurrency();
            message += `üí∞ –¶–µ–Ω–∞: ${product.price} ${currency}\n`;
            message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;
            if (product.variants && product.variants.length > 0) {
                message += `\nüé® **–í–∞—Ä–∏–∞–Ω—Ç—ã:**\n`;
                product.variants.forEach(variant => {
                    message += `‚Ä¢ ${variant.name}: ${variant.value}`;
                    if (variant.price) {
                        message += ` (+${variant.price} ${currency})`;
                    }
                    message += `\n`;
                });
            }
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '1 —à—Ç.', callback_data: `buy_now_${productId}_1` },
                            { text: '2 —à—Ç.', callback_data: `buy_now_${productId}_2` },
                            { text: '3 —à—Ç.', callback_data: `buy_now_${productId}_3` }
                        ],
                        [
                            { text: '4 —à—Ç.', callback_data: `buy_now_${productId}_4` },
                            { text: '5 —à—Ç.', callback_data: `buy_now_${productId}_5` }
                        ],
                        [
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'catalog' }
                        ]
                    ]
                }
            };
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
        }
        catch (error) {
            logger_js_1.logger.error(`Error showing product for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }
    async handleCustomerInfo(bot, chatId, customerInfo, session) {
        try {
            const info = this.parseCustomerInfo(customerInfo);
            if (!info.name || !info.phone) {
                await bot.sendMessage(chatId, `‚ùå –ù–µ–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n\n` +
                    `–ò–º—è: –í–∞—à–µ –∏–º—è\n` +
                    `–¢–µ–ª–µ—Ñ–æ–Ω: +7xxxxxxxxxx\n` +
                    `–ê–¥—Ä–µ—Å: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n\n` +
                    `–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +79001234567, —É–ª. –õ–µ–Ω–∏–Ω–∞ 123`);
                return;
            }
            session.customerInfo = JSON.stringify(info);
            if (session.cart && Object.keys(session.cart).length > 0) {
                const cartItems = Object.entries(session.cart).map(([productId, quantity]) => ({
                    productId,
                    quantity: Number(quantity)
                }));
                let totalAmount = 0;
                for (const item of cartItems) {
                    totalAmount += 100 * item.quantity;
                }
                await bot.sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n` +
                    `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${info.name}\n` +
                    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${info.phone}\n` +
                    `üìç –ê–¥—Ä–µ—Å: ${info.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
                    `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${cartItems.length}\n` +
                    `üí∞ –°—É–º–º–∞: ${totalAmount}‚ÇΩ\n\n` +
                    `–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üõç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'show_categories' }],
                            [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                        ]
                    }
                });
                session.cart = {};
                session.currentAction = undefined;
            }
            else {
                await bot.sendMessage(chatId, '‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.');
            }
        }
        catch (error) {
            logger_js_1.logger.error(`Error handling customer info for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
    parseCustomerInfo(text) {
        const info = {};
        const lines = text.split(/[,\n]/).map(line => line.trim());
        for (const line of lines) {
            const phoneMatch = line.match(/(\+?\d{10,15})/);
            if (phoneMatch && !info.phone) {
                info.phone = phoneMatch[1];
                continue;
            }
            if (!info.name && line.length > 2 && !phoneMatch) {
                const numberCount = (line.match(/\d/g) || []).length;
                if (numberCount < line.length / 3) {
                    info.name = line;
                    continue;
                }
            }
            if (info.name && info.phone && !info.address && line.length > 5) {
                info.address = line;
            }
        }
        if (!info.name && text.length > 0) {
            const firstPart = text.split(/[,\n]/)[0].trim();
            if (firstPart.length > 2) {
                info.name = firstPart;
            }
        }
        return info;
    }
    async createOrderFromDirect(bot, chatId, productId, quantity, session) {
        try {
            const loadingMsg = await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑...');
            const product = await this.dataService.getProduct(productId);
            const currency = await this.getCurrency();
            const totalAmount = product.price * quantity;
            const order = await this.dataService.createOrder({
                customerId: session.userId,
                items: [{
                        productId,
                        quantity,
                        price: product.price
                    }],
                customerInfo: {},
                notes: `–ó–∞–∫–∞–∑ –∏–∑ –±–æ—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞`
            });
            const storeInfo = await this.dataService.getStoreInfo();
            let botSettings = storeInfo.botSettings;
            if (typeof botSettings === 'string') {
                try {
                    botSettings = JSON.parse(botSettings);
                }
                catch (error) {
                    logger_js_1.logger.error(`Failed to parse botSettings for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
                    botSettings = {};
                }
            }
            const paymentSettings = botSettings?.paymentSettings || {};
            const paymentRequisites = botSettings?.paymentRequisites || {};
            let message = `‚úÖ **–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!** #${order.orderNumber || order.id}\n\n`;
            message += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.name}\n`;
            message += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
            message += `üí≥ **–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} ${currency}**\n`;
            message += `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${storeInfo.name}\n\n`;
            message += `üí∞ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:**\n`;
            const instructions = paymentSettings.instructions || botSettings?.paymentInstructions;
            if (instructions) {
                message += `üìù ${instructions}\n\n`;
            }
            else {
                message += `üìù –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ\n\n`;
            }
            const bankDetails = paymentSettings.bankDetails;
            if (bankDetails && (bankDetails.accountNumber || bankDetails.accountName)) {
                message += `üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n`;
                if (bankDetails.accountNumber) {
                    message += `üí≥ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: \`${bankDetails.accountNumber}\`\n`;
                }
                if (bankDetails.accountName) {
                    message += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${bankDetails.accountName}\n`;
                }
                if (bankDetails.bankName) {
                    message += `üè¶ –ë–∞–Ω–∫: ${bankDetails.bankName}\n`;
                }
                if (bankDetails.notes) {
                    message += `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${bankDetails.notes}\n`;
                }
                message += `\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!\n\n`;
            }
            else if (paymentRequisites && (paymentRequisites.card || paymentRequisites.receiver)) {
                message += `üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n`;
                if (paymentRequisites.card) {
                    message += `üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: \`${paymentRequisites.card}\`\n`;
                }
                if (paymentRequisites.receiver) {
                    message += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${paymentRequisites.receiver}\n`;
                }
                if (paymentRequisites.bank) {
                    message += `üè¶ –ë–∞–Ω–∫: ${paymentRequisites.bank}\n`;
                }
                if (paymentRequisites.comment) {
                    message += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${paymentRequisites.comment}\n`;
                }
                message += `\n‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ!\n\n`;
            }
            else {
                message += `‚ùó –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Ç–æ—á–Ω–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n`;
            }
            message += `üì± –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.\n`;
            message += `üìã –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: **#${order.orderNumber || order.id}**`;
            const keyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' }
                        ],
                        [
                            { text: 'üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'catalog' },
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }
                        ]
                    ]
                }
            };
            await bot.deleteMessage(chatId, loadingMsg.message_id);
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                ...keyboard
            });
            logger_js_1.logger.info(`Order created for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}: ${order.id}`);
        }
        catch (error) {
            logger_js_1.logger.error(`Error creating order for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async handleDirectPurchase(bot, chatId, productId, quantity, session) {
        try {
            const product = await this.dataService.getProduct(productId);
            if (product.stock < quantity) {
                await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n–î–æ—Å—Ç—É–ø–Ω–æ: ${product.stock} —à—Ç.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_${productId}` }]
                        ]
                    }
                });
                return;
            }
            const currency = await this.getCurrency();
            const totalAmount = product.price * quantity;
            let message = `üßæ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**\n\n`;
            message += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.name}\n`;
            message += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
            message += `üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${product.price} ${currency}\n`;
            message += `üí≥ **–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} ${currency}**\n\n`;
            message += `‚ö° –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞`;
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `confirm_order_${productId}_${quantity}` }
                        ],
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_${productId}` },
                            { text: 'üõí –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }
                        ]
                    ]
                }
            });
        }
        catch (error) {
            logger_js_1.logger.error(`Error handling direct purchase for store ${(0, sanitizer_js_1.sanitizeForLog)(this.storeId)}:`, error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
        }
    }
    cleanup() {
        this.sessions.clear();
    }
}
exports.BotHandlerService = BotHandlerService;
exports.default = BotHandlerService;
//# sourceMappingURL=botHandlerService.js.map