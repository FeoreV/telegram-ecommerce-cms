import { Request, Response, NextFunction } from 'express';
export interface ResourceLimits {
    maxMemoryMB: number;
    memoryWarningThreshold: number;
    memoryCriticalThreshold: number;
    maxCpuPercent: number;
    cpuWarningThreshold: number;
    cpuCriticalThreshold: number;
    maxFileDescriptors: number;
    fdWarningThreshold: number;
    fdCriticalThreshold: number;
    maxConnections: number;
    maxRequestsPerSecond: number;
    maxBandwidthMBps: number;
    maxDiskReadMBps: number;
    maxDiskWriteMBps: number;
    maxTempStorageMB: number;
    maxConcurrentRequests: number;
    maxUploadSizeMB: number;
    maxDatabaseConnections: number;
    maxCacheSize: number;
    maxChildProcesses: number;
    maxThreads: number;
    maxRequestTimeoutMs: number;
    maxIdleTimeMs: number;
    enableRateLimiting: boolean;
    enableAdaptiveRateLimiting: boolean;
    enableEmergencyThrottling: boolean;
    enableProcessTermination: boolean;
    enableConnectionDraining: boolean;
}
export interface ResourceUsage {
    timestamp: Date;
    memoryUsedMB: number;
    memoryUsagePercent: number;
    heapUsedMB: number;
    heapTotalMB: number;
    cpuUsagePercent: number;
    loadAverage: number[];
    openFileDescriptors: number;
    fdUsagePercent: number;
    activeConnections: number;
    requestsPerSecond: number;
    networkBandwidthMBps: number;
    diskReadMBps: number;
    diskWriteMBps: number;
    tempStorageUsedMB: number;
    concurrentRequests: number;
    databaseConnections: number;
    cacheUsageMB: number;
    childProcesses: number;
    threadCount: number;
    eventLoopLag: number;
    eventLoopUtilization: number;
}
export interface ResourceAlert {
    id: string;
    timestamp: Date;
    type: 'warning' | 'critical' | 'emergency';
    resource: string;
    currentValue: number;
    threshold: number;
    limit: number;
    message: string;
    action: 'monitor' | 'throttle' | 'terminate' | 'drain';
}
export declare class ResourceLimitService {
    private static instance;
    private limits;
    private usage;
    private alerts;
    private monitoringInterval;
    private connectionCount;
    private requestCount;
    private concurrentRequests;
    private lastRequestReset;
    private cpuUsageHistory;
    private memoryUsageHistory;
    private emergencyMode;
    private constructor();
    static getInstance(): ResourceLimitService;
    private createEmptyUsage;
    private initializeResourceMonitoring;
    private setupProcessHandlers;
    private collectResourceUsage;
    private measureEventLoopLag;
    private measureEventLoopUtilization;
    private getOpenFileDescriptors;
    private getTempStorageUsage;
    private getChildProcessCount;
    private getThreadCount;
    private checkResourceLimits;
    private checkMemoryLimits;
    private checkCpuLimits;
    private checkConnectionLimits;
    private checkFileDescriptorLimits;
    private checkConcurrentRequestLimits;
    private checkEventLoopHealth;
    private createAlert;
    private determineAction;
    private enterEmergencyMode;
    private exitEmergencyMode;
    private throttleIncomingRequests;
    private startConnectionDraining;
    private gracefulShutdown;
    requestTrackingMiddleware(): (req: Request, res: Response, next: NextFunction) => Response<any, Record<string, any>>;
    connectionTrackingMiddleware(): (req: Request, res: Response, next: NextFunction) => void;
    isUnderStress(): boolean;
    getResourceUsage(): ResourceUsage;
    getActiveAlerts(): ResourceAlert[];
    getResourceLimits(): ResourceLimits;
    healthCheck(): {
        status: string;
        usage: ResourceUsage;
        alerts: ResourceAlert[];
        emergencyMode: boolean;
    };
}
export declare const resourceLimitService: ResourceLimitService;
//# sourceMappingURL=ResourceLimitService.d.ts.map