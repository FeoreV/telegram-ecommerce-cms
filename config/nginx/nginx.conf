# NGINX Configuration for Telegram E-commerce Bot Platform
# Production-ready setup with SSL, load balancing, and security

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load modules
load_module modules/ngx_http_realip_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic Settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'request_time=$request_time';
                    
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'request_time=$request_time upstream_time=$upstream_response_time '
                       'pipe=$pipe connection=$connection_requests';

    access_log /var/log/nginx/access.log detailed;

    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer Settings
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    client_max_body_size 50M;
    large_client_header_buffers 2 1k;
    
    # Timeout Settings
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn perip 20;

    # Real IP Settings (for reverse proxy)
    set_real_ip_from 172.20.0.0/16;
    set_real_ip_from 127.0.0.1;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' wss: https:; frame-ancestors 'none';" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

    # Upstream Backend Servers
    upstream backend_servers {
        least_conn;
        server backend:3001 max_fails=3 fail_timeout=30s;
        # Add more backend servers for load balancing:
        # server backend2:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Upstream Bot Webhook Servers
    upstream bot_webhook_servers {
        least_conn;
        server bot:8443 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Frontend Servers
    upstream frontend_servers {
        least_conn;
        server frontend:80 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Default Server (catch-all)
    server {
        listen 80 default_server;
        listen 443 ssl default_server;
        server_name _;
        
        # SSL Certificate (self-signed for default)
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        return 444;
    }

    # HTTP to HTTPS Redirect
    server {
        listen 80;
        server_name yourdomain.com www.yourdomain.com;
        
        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
            allow all;
        }
        
        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Main Application Server
    server {
        listen 443 ssl http2;
        server_name yourdomain.com www.yourdomain.com;
        
        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/yourdomain.com.crt;
        ssl_certificate_key /etc/nginx/ssl/yourdomain.com.key;
        
        # HSTS Header
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Error pages configuration
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        # Custom 404 page for API endpoints
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Custom 50x error pages
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }

        # Frontend (React App) - SPA with fallback handling
        location / {
            # Try to serve the file directly, fallback to index.html for SPA routing
            try_files $uri $uri/ @fallback;
            
            proxy_pass http://frontend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Browser caching for static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                # If static asset not found, return 404 instead of falling back
                try_files $uri =404;
            }
        }
        
        # Fallback location for SPA routing
        location @fallback {
            # For React Router, all unmatched routes should serve index.html
            # This allows the React app to handle 404s internally
            proxy_pass http://frontend_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API Endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # API endpoints should return JSON errors, not HTML pages
            error_page 404 = @api_404;
            error_page 500 502 503 504 = @api_error;
            
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts for API requests
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            
            # Handle specific API errors
            proxy_intercept_errors on;
        }
        
        # API 404 handler
        location @api_404 {
            add_header Content-Type application/json always;
            return 404 '{"error":"API endpoint not found","statusCode":404,"timestamp":"$time_iso8601","path":"$request_uri"}';
        }
        
        # API Error handler  
        location @api_error {
            add_header Content-Type application/json always;
            return 500 '{"error":"Internal server error","statusCode":500,"timestamp":"$time_iso8601","path":"$request_uri"}';
        }

        # WebSocket for real-time updates
        location /socket.io/ {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific settings
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # File Uploads
        location /api/upload {
            limit_req zone=general burst=5 nodelay;
            client_max_body_size 50M;
            
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Upload specific timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Health Check
        location /health {
            access_log off;
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
        }

        # Metrics Endpoint (protected)
        location /metrics {
            allow 172.20.0.0/16;
            deny all;
            
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
        }
    }

    # Bot Webhook Server
    server {
        listen 443 ssl http2;
        server_name bot-webhook.yourdomain.com;
        
        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/bot-webhook.yourdomain.com.crt;
        ssl_certificate_key /etc/nginx/ssl/bot-webhook.yourdomain.com.key;
        
        # HSTS Header
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

        # Telegram Webhook Endpoints
        location /webhook/ {
            limit_req zone=webhook burst=200 nodelay;
            
            proxy_pass http://bot_webhook_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Webhook specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Disable buffering for webhooks
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # Health Check for Bot Service
        location /health {
            access_log off;
            proxy_pass http://bot_webhook_servers;
            proxy_set_header Host $host;
        }

        # Block all other requests
        location / {
            return 404;
        }
    }

    # Admin Subdomain (if needed)
    server {
        listen 443 ssl http2;
        server_name admin.yourdomain.com;
        
        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/admin.yourdomain.com.crt;
        ssl_certificate_key /etc/nginx/ssl/admin.yourdomain.com.key;
        
        # Additional security for admin
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # IP Whitelist (uncomment and configure as needed)
        # allow 192.168.1.0/24;
        # deny all;
        
        location / {
            auth_basic "Admin Area";
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # Status and monitoring endpoints
    server {
        listen 8080;
        server_name localhost;
        
        # NGINX Status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 172.20.0.0/16;
            allow 127.0.0.1;
            deny all;
        }
        
        # Health check for load balancer
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream block for TCP/UDP load balancing (if needed)
stream {
    # Log format for stream
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';

    # PostgreSQL load balancing (if needed)
    upstream postgres_backend {
        server postgres:5432 max_fails=3 fail_timeout=30s;
        # Add more PostgreSQL replicas here
    }

    server {
        listen 5432;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        error_log /var/log/nginx/postgres.log;
    }
}
