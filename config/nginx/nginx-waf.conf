# Secure Nginx Configuration with WAF capabilities
# This configuration provides maximum security with DDoS protection, bot filtering, and anomaly detection

# Global settings
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker settings
worker_rlimit_nofile 65536;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Security headers
    server_tokens off;
    more_clear_headers Server;
    
    # Logging format
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time $upstream_response_time '
                           '$http_x_forwarded_for $http_cf_connecting_ip '
                           'rt=$request_time uct="$upstream_connect_time" '
                           'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log security_log;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;
    
    # Buffer settings for security
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    client_body_timeout 10;
    client_header_timeout 10;
    keepalive_requests 100;
    reset_timedout_connection on;
    send_timeout 10;
    
    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=admin:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/m;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;
    
    # IP reputation and geo-blocking
    geo $blocked_country {
        default 0;
        # Add blocked countries here
        # CN 1;  # China
        # RU 1;  # Russia
    }
    
    # Bot detection patterns
    map $http_user_agent $blocked_bot {
        default 0;
        ~*bot 1;
        ~*crawler 1;
        ~*spider 1;
        ~*scraper 1;
        ~*scanner 1;
        ~*nikto 1;
        ~*sqlmap 1;
        ~*nessus 1;
        ~*openvas 1;
        ~*w3af 1;
        ~*masscan 1;
        ~*nmap 1;
        ~*zmap 1;
        ~*curl 1;
        ~*wget 1;
        ~*python 1;
        ~*java 1;
        ~*go-http 1;
        ~*headless 1;
        ~*phantom 1;
        ~*selenium 1;
        ~*puppeteer 1;
        ~*chromedriver 1;
        ~*webdriver 1;
        "" 1;  # Empty user agent
    }
    
    # Suspicious request patterns
    map $request_uri $blocked_uri {
        default 0;
        ~*\.\./\.\. 1;  # Path traversal
        ~*union.*select 1;  # SQL injection
        ~*select.*from 1;  # SQL injection
        ~*insert.*into 1;  # SQL injection
        ~*delete.*from 1;  # SQL injection
        ~*<script 1;  # XSS
        ~*javascript: 1;  # XSS
        ~*onload= 1;  # XSS
        ~*onerror= 1;  # XSS
        ~*eval\( 1;  # Code injection
        ~*base64 1;  # Potential payload
        ~*\x00 1;  # Null bytes
        ~*\%00 1;  # Encoded null bytes
    }
    
    # Malicious headers detection
    map $http_host $blocked_host {
        default 0;
        ~*localhost 1;
        ~*127\.0\.0\.1 1;
        ~*192\.168\. 1;
        ~*10\. 1;
        ~*172\.(1[6-9]|2[0-9]|3[0-1])\. 1;
    }
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # HSTS and security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=()" always;
    add_header X-WAF-Status "Protected" always;
    
    # Hide Nginx version and server info
    more_set_headers "Server: BotRT-WAF";
    
    # Default server (catch-all for invalid hosts)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Drop connections to invalid hosts
        return 444;
    }
    
    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name botrt.local *.botrt.local;
        
        # Security checks before redirect
        if ($blocked_bot) {
            return 403 "Bot access denied";
        }
        
        if ($blocked_uri) {
            return 403 "Malicious request detected";
        }
        
        if ($blocked_country) {
            return 403 "Geographic restriction";
        }
        
        return 301 https://$server_name$request_uri;
    }
    
    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name botrt.local;
        
        # SSL certificates
        ssl_certificate /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;
        ssl_trusted_certificate /etc/nginx/certs/ca.crt;
        
        # Security checks
        if ($blocked_bot) {
            access_log /var/log/nginx/blocked.log security_log;
            return 403 "Bot access denied";
        }
        
        if ($blocked_uri) {
            access_log /var/log/nginx/blocked.log security_log;
            return 403 "Malicious request detected";
        }
        
        if ($blocked_country) {
            access_log /var/log/nginx/blocked.log security_log;
            return 403 "Geographic restriction";
        }
        
        if ($blocked_host) {
            access_log /var/log/nginx/blocked.log security_log;
            return 403 "Invalid host header";
        }
        
        # Rate limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;
        limit_conn conn_limit_per_server 100;
        
        # Root and index
        root /var/www/html;
        index index.html;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # API endpoints
        location /api/ {
            # Enhanced rate limiting for API
            limit_req zone=api burst=50 nodelay;
            
            # Additional security headers for API
            add_header X-API-Version "1.0" always;
            
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # Admin interface with strict security
        location /admin/ {
            # Very strict rate limiting for admin
            limit_req zone=admin burst=5 nodelay;
            
            # IP allowlist for admin (customize as needed)
            allow 127.0.0.1;
            allow 192.168.1.0/24;
            allow 10.0.0.0/8;
            deny all;
            
            # Additional security for admin
            add_header X-Admin-Access "Restricted" always;
            
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Enhanced timeouts for admin operations
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }
        
        # Authentication endpoints
        location ~ ^/(auth|login|register)/ {
            # Strict rate limiting for auth
            limit_req zone=login burst=3 nodelay;
            
            # Additional security for auth endpoints
            add_header X-Auth-Protected "true" always;
            
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Auth-specific timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
        }
        
        # File upload endpoints
        location /api/upload/ {
            # Very strict rate limiting for uploads
            limit_req zone=upload burst=1 nodelay;
            
            # File size limit
            client_max_body_size 10M;
            
            # Upload-specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Static files with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Security check for static files
            location ~* \.(php|pl|py|jsp|asp|sh|cgi)$ {
                return 403 "Script execution not allowed";
            }
        }
        
        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~* \.(env|config|ini|log|bak|backup|old|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Default location
        location / {
            try_files $uri $uri/ @backend;
        }
        
        # Fallback to backend
        location @backend {
            proxy_pass http://backend:3000;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Custom error pages
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /403.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Monitoring and metrics server (internal only)
    server {
        listen 8080;
        server_name localhost;
        
        # Only allow internal access
        allow 127.0.0.1;
        allow 172.20.0.0/16;
        deny all;
        
        location /nginx_status {
            stub_status on;
            access_log off;
        }
        
        location /metrics {
            # Prometheus metrics endpoint
            return 200 "# Nginx metrics would be here\n";
            add_header Content-Type text/plain;
        }
    }
}

# Stream block for TCP/UDP proxying if needed
stream {
    # Log format for stream
    log_format stream_log '$remote_addr [$time_local] $protocol $bytes_sent $bytes_received $session_time';
    
    # Rate limiting for stream connections
    limit_conn_zone $binary_remote_addr zone=stream_conn:10m;
    
    # Example: PostgreSQL proxy with security
    upstream postgres_backend {
        server postgres:5432;
    }
    
    server {
        listen 5432;
        proxy_pass postgres_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # Connection limiting
        limit_conn stream_conn 5;
        
        # Access control
        allow 172.20.2.0/24;  # App tier
        deny all;
        
        access_log /var/log/nginx/postgres_stream.log stream_log;
    }
}
