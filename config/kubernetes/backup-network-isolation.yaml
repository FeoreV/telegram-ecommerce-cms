# Network Isolation for Backup Infrastructure
# Implements secure network segmentation for backup services

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-service-network-policy
  namespace: botrt-production
  labels:
    app: botrt
    component: backup-security
    tier: data-protection
spec:
  podSelector:
    matchLabels:
      app: backup-service
  policyTypes:
  - Ingress
  - Egress
  
  # Strict ingress rules
  ingress:
  # Only allow connections from authorized services
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
    - podSelector:
        matchLabels:
          component: disaster-recovery
    - podSelector:
        matchLabels:
          component: backup-scheduler
    ports:
    - protocol: TCP
      port: 8080  # Backup service API
  
  # Allow health checks from monitoring
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    - podSelector:
        matchLabels:
          app: grafana
    ports:
    - protocol: TCP
      port: 9090  # Metrics endpoint
  
  # Minimal egress rules
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Vault access for encryption keys
  - to:
    - podSelector:
        matchLabels:
          app: vault
    ports:
    - protocol: TCP
      port: 8200
  
  # Database access for backup operations
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  
  # Redis access for backup metadata
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # External storage (S3/Cloud) access
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS for cloud storage
  
  # NTP for time synchronization
  - to: []
    ports:
    - protocol: UDP
      port: 123

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-storage-network-policy
  namespace: botrt-backup
  labels:
    app: botrt
    component: backup-storage
    tier: isolated-storage
spec:
  podSelector:
    matchLabels:
      app: backup-storage
  policyTypes:
  - Ingress
  - Egress
  
  # Highly restricted ingress
  ingress:
  # Only backup service can access storage
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
      podSelector:
        matchLabels:
          app: backup-service
    ports:
    - protocol: TCP
      port: 9000  # MinIO/Storage API
  
  # Disaster recovery service access
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
      podSelector:
        matchLabels:
          app: disaster-recovery
    ports:
    - protocol: TCP
      port: 9000
  
  # No egress except DNS and health checks
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
  
  # Health check responses only
  - to:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
      podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: vault-backup-network-policy
  namespace: botrt-production
  labels:
    app: botrt
    component: vault-backup-isolation
spec:
  podSelector:
    matchLabels:
      app: vault
  policyTypes:
  - Ingress
  - Egress
  
  # Enhanced ingress for backup operations
  ingress:
  # Normal application access
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
    ports:
    - protocol: TCP
      port: 8200
  
  # Backup-specific access patterns
  - from:
    - podSelector:
        matchLabels:
          app: backup-service
    - podSelector:
        matchLabels:
          app: disaster-recovery
    ports:
    - protocol: TCP
      port: 8200
  
  egress:
  # Existing egress rules maintained
  - to: []
    ports:
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
# Dedicated backup network namespace
apiVersion: v1
kind: Namespace
metadata:
  name: botrt-backup
  labels:
    name: botrt-backup
    security.level: "maximum"
    backup.isolation: "enabled"
    network.policy: "strict"
  annotations:
    backup.purpose: "Isolated backup storage and operations"
    security.classification: "restricted"
    compliance.requirements: "sox,gdpr,pci-dss"

---
# Backup storage service with network isolation
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-storage
  namespace: botrt-backup
  labels:
    app: backup-storage
    component: isolated-storage
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backup-storage
  template:
    metadata:
      labels:
        app: backup-storage
        component: isolated-storage
      annotations:
        backup.purpose: "Secure backup storage"
        network.isolation: "strict"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: minio
        image: minio/minio:latest
        args:
        - server
        - /data
        - --console-address
        - ":9001"
        ports:
        - containerPort: 9000
          name: api
        - containerPort: 9001
          name: console
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: backup-storage-credentials
              key: username
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backup-storage-credentials
              key: password
        - name: MINIO_SERVER_URL
          value: "https://backup-storage.botrt-backup.svc.cluster.local:9000"
        volumeMounts:
        - name: storage
          mountPath: /data
        - name: certs
          mountPath: /root/.minio/certs
          readOnly: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: 512Mi
            cpu: 200m
          limits:
            memory: 2Gi
            cpu: 1000m
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /minio/health/ready
            port: 9000
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: backup-storage-pvc
      - name: certs
        secret:
          secretName: backup-storage-tls
      nodeSelector:
        backup.node: "true"
        security.level: "high"
      tolerations:
      - key: "backup-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Backup storage service
apiVersion: v1
kind: Service
metadata:
  name: backup-storage
  namespace: botrt-backup
  labels:
    app: backup-storage
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: 9000
    protocol: TCP
    name: api
  - port: 9001
    targetPort: 9001
    protocol: TCP
    name: console
  selector:
    app: backup-storage

---
# Network policy for cross-namespace backup access
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cross-namespace-backup-access
  namespace: botrt-backup
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow backup service from production namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
      podSelector:
        matchLabels:
          app: backup-service
  
  # Allow disaster recovery service
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
      podSelector:
        matchLabels:
          app: disaster-recovery
  
  # Allow monitoring from production
  - from:
    - namespaceSelector:
        matchLabels:
          name: botrt-production
      podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  
  egress:
  # Minimal egress - only DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53

---
# Enhanced firewall rules using Calico GlobalNetworkPolicy
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: backup-infrastructure-firewall
spec:
  order: 100
  selector: app == "backup-service" || app == "backup-storage" || app == "disaster-recovery"
  
  # Deny all by default, explicit allows only
  types:
  - Ingress
  - Egress
  
  ingress:
  # Allow internal backup communication
  - action: Allow
    source:
      selector: app == "backup-service" || app == "disaster-recovery"
    destination:
      ports:
      - 8080
      - 9000
  
  # Allow monitoring
  - action: Allow
    source:
      selector: app == "prometheus"
    destination:
      ports:
      - 9090
  
  # Allow health checks
  - action: Allow
    source:
      selector: app == "kubernetes-health-check"
    destination:
      ports:
      - 8080
      - 9000
  
  # Deny everything else
  - action: Deny
  
  egress:
  # Allow DNS
  - action: Allow
    destination:
      ports:
      - 53
  
  # Allow Vault access for encryption
  - action: Allow
    source:
      selector: app == "backup-service"
    destination:
      selector: app == "vault"
      ports:
      - 8200
  
  # Allow database access for backups
  - action: Allow
    source:
      selector: app == "backup-service"
    destination:
      selector: app == "postgresql" || app == "redis"
      ports:
      - 5432
      - 6379
  
  # Allow HTTPS for external storage
  - action: Allow
    source:
      selector: app == "backup-service"
    destination:
      ports:
      - 443
  
  # Deny everything else
  - action: Deny

---
# Backup traffic monitoring and alerting
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: backup-network-monitoring
  namespace: botrt-backup
  labels:
    app: backup-monitoring
spec:
  selector:
    matchLabels:
      app: backup-storage
  endpoints:
  - port: api
    path: /metrics
    interval: 30s
    tlsConfig:
      insecureSkipVerify: false
      ca:
        secret:
          name: backup-storage-ca
          key: ca.crt
      cert:
        secret:
          name: backup-monitoring-client-cert
          key: tls.crt
      keySecret:
        name: backup-monitoring-client-cert
        key: tls.key

---
# Network security monitoring rules
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: backup-network-security
  namespace: botrt-backup
spec:
  groups:
  - name: backup.network.security
    rules:
    - alert: UnauthorizedBackupAccess
      expr: increase(backup_unauthorized_requests_total[5m]) > 0
      for: 1m
      labels:
        severity: critical
        component: backup-security
      annotations:
        summary: "Unauthorized access attempt to backup infrastructure"
        description: "{{ $value }} unauthorized requests to backup services in last 5 minutes"
    
    - alert: BackupNetworkIsolationBreach
      expr: backup_cross_namespace_denied_connections > 0
      for: 1m
      labels:
        severity: high
        component: network-isolation
      annotations:
        summary: "Network isolation breach detected in backup infrastructure"
        description: "Denied cross-namespace connections detected"
    
    - alert: BackupStorageConnectionSpike
      expr: rate(backup_storage_connections_total[5m]) > 100
      for: 2m
      labels:
        severity: warning
        component: backup-storage
      annotations:
        summary: "Unusual connection volume to backup storage"
        description: "Connection rate to backup storage: {{ $value }} connections/sec"
    
    - alert: BackupEncryptionKeyAccess
      expr: increase(vault_backup_key_access_total[1m]) > 10
      for: 1m
      labels:
        severity: warning
        component: key-access
      annotations:
        summary: "High volume of backup encryption key access"
        description: "{{ $value }} backup encryption key accesses in last minute"

---
# Network segmentation validation job
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-network-validation
  namespace: botrt-backup
spec:
  schedule: "0 */6 * * *"  # Every 6 hours
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: network-validator
            image: alpine:3.18
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting backup network isolation validation..."
              
              # Test isolation - these should fail
              echo "Testing network isolation (expecting failures)..."
              
              # Should NOT be able to reach external services
              if nc -z google.com 443 2>/dev/null; then
                echo "FAIL: External connectivity detected - isolation breach"
                exit 1
              else
                echo "PASS: External connectivity properly blocked"
              fi
              
              # Should NOT be able to reach other namespaces directly
              if nc -z frontend-service.botrt-production.svc.cluster.local 80 2>/dev/null; then
                echo "FAIL: Cross-namespace access detected - isolation breach"
                exit 1
              else
                echo "PASS: Cross-namespace access properly blocked"
              fi
              
              # Should be able to reach backup storage
              if nc -z backup-storage.botrt-backup.svc.cluster.local 9000; then
                echo "PASS: Backup storage accessible"
              else
                echo "FAIL: Backup storage not accessible"
                exit 1
              fi
              
              echo "Backup network isolation validation completed successfully"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
