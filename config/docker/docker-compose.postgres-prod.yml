version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: botrt_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-telegram_ecommerce}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - botrt_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: botrt_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - botrt_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: botrt_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/${POSTGRES_DB:-telegram_ecommerce}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_URL: ${API_URL:-http://localhost:3001}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      ENABLE_ADMINJS: ${ENABLE_ADMINJS:-false}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - botrt_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Telegram Bot Service
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
      target: production
    container_name: botrt_bot
    restart: unless-stopped
    environment:
      NODE_ENV: production
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_URL: http://backend:3001
      REDIS_URL: redis://redis:6379
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL}
      WEBHOOK_PATH: ${WEBHOOK_PATH:-/webhook/telegram}
      WEBHOOK_PORT: ${WEBHOOK_PORT:-8443}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_SECURITY: true
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-30}
    ports:
      - "${BOT_WEBHOOK_PORT:-8443}:8443"
    volumes:
      - ./bot/logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - botrt_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (React App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: botrt_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
    networks:
      - botrt_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5

  # NGINX Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: botrt_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites-available:/etc/nginx/sites-available
      - ./config/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - bot
    networks:
      - botrt_network

  # Log Aggregation - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: botrt_elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx1024m -Xms1024m"
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - botrt_network

  # Log Processing - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: botrt_logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
      - ./backend/logs:/var/log/backend
      - ./bot/logs:/var/log/bot
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - elasticsearch
    networks:
      - botrt_network

  # Log Visualization - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: botrt_kibana
    restart: unless-stopped
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      xpack.security.enabled: false
    depends_on:
      - elasticsearch
    networks:
      - botrt_network

  # Backup Service
  backup:
    image: postgres:16-alpine
    container_name: botrt_backup
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-telegram_ecommerce}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/scripts/backup.sh
    command: sh -c "chmod +x /scripts/backup.sh && crond -f"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - botrt_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  botrt_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
