services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: telegram_ecommerce_db
    environment:
      MYSQL_DATABASE: telegram_ecommerce
      MYSQL_USER: telegram_user
      MYSQL_PASSWORD: telegram_pass
      MYSQL_ROOT_PASSWORD: root_pass
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - telegram_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: telegram_ecommerce_redis
    ports:
      - "6379:6379"
    networks:
      - telegram_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: telegram_ecommerce_backend
    environment:
      - NODE_ENV=development
      - DATABASE_PROVIDER=mysql
      - DATABASE_URL=mysql://telegram_user:telegram_pass@database:3306/telegram_ecommerce
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-change-in-production-at-least-32-chars}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-dev-jwt-refresh-secret-change-in-production-32-chars}
      - ADMIN_DEFAULT_PASSWORD=${ADMIN_DEFAULT_PASSWORD:-ChangeMe123!}
      - ADMIN_COOKIE_SECRET=${ADMIN_COOKIE_SECRET:-dev-admin-cookie-secret-at-least-32-characters-long-for-security}
      - ADMIN_SESSION_SECRET=${ADMIN_SESSION_SECRET:-dev-admin-session-secret-at-least-32-characters-long-for-security}
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY:-dev-master-key-must-be-32-chars-long-for-security-purposes}
      - DATA_ENCRYPTION_KEY=${DATA_ENCRYPTION_KEY:-dev-data-encryption-key-32-chars-long-for-security-purposes}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-dev-token}
      - ENABLE_ADMINJS=true
      - FRONTEND_URL=http://localhost:3000
      - PORT=3001
      - SUPER_ADMIN_TELEGRAM_ID=${SUPER_ADMIN_TELEGRAM_ID:-123456789}
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./backend/logs:/app/logs
    networks:
      - telegram_network
    healthcheck:
      test: ["CMD", "sh", "-c", "wget -qO- http://localhost:3001/health >/dev/null 2>&1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (React App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=http://localhost:3001/api
        - VITE_SOCKET_URL=http://localhost:3001
    container_name: telegram_ecommerce_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - telegram_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram Bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: telegram_ecommerce_bot
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-your-telegram-bot-token-here}
      - API_URL=http://backend:3001
      - REDIS_URL=redis://redis:6379
      - BOT_PORT=3003
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./bot/logs:/app/logs
    networks:
      - telegram_network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  telegram_network:
    driver: bridge
