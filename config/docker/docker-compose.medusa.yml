services:
  # Medusa CMS services temporarily commented out
  # Uncomment when proper Medusa setup is configured
  # medusa-db:
  #   image: postgres:15-alpine
  #   container_name: medusa_db
  #   environment:
  #     POSTGRES_DB: medusa
  #     POSTGRES_USER: medusa
  #     POSTGRES_PASSWORD: medusa_pass
  #   volumes:
  #     - medusa_pg_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - telegram_network

  # medusa:
  #   image: medusajs/medusa:latest
  #   container_name: medusa_server
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgres://medusa:medusa_pass@medusa-db:5432/medusa
  #     - REDIS_URL=redis://redis:6379
  #     - STORE_CORS=http://localhost:3000
  #     - ADMIN_CORS=http://localhost:3000
  #     - JWT_SECRET=${MEDUSA_JWT_SECRET}
  #     - COOKIE_SECRET=${MEDUSA_COOKIE_SECRET}
  #   depends_on:
  #     - medusa-db
  #     - redis
  #   ports:
  #     - "9000:9000"
  #   networks:
  #     - telegram_network
  database:
    image: mysql:8.0
    container_name: telegram_ecommerce_db
    environment:
      MYSQL_DATABASE: telegram_ecommerce
      MYSQL_USER: telegram_user
      MYSQL_PASSWORD: telegram_pass
      MYSQL_ROOT_PASSWORD: root_pass
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      - telegram_network

  redis:
    image: redis:alpine
    container_name: telegram_ecommerce_redis
    ports:
      - "6379:6379"
    networks:
      - telegram_network

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: telegram_ecommerce_backend
    environment:
      - NODE_ENV=development
      - DATABASE_PROVIDER=mysql
      - DATABASE_URL=mysql://telegram_user:telegram_pass@database:3306/telegram_ecommerce
      - REDIS_URL=redis://redis:6379
      - MEDUSA_BASE_URL=http://medusa:9000
      - MEDUSA_WEBHOOK_TOKEN=${MEDUSA_WEBHOOK_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=your-jwt-refresh-secret-key-change-in-production
      - ENABLE_ADMINJS=true
      - FRONTEND_URL=http://localhost:3000
      # Optional: make your Telegram ID OWNER for seeding/dev
      - SUPER_ADMIN_TELEGRAM_ID=${SUPER_ADMIN_TELEGRAM_ID}
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      - database
      - redis
    volumes:
      - ../../uploads:/app/uploads
    networks:
      - telegram_network

  bot:
    build:
      context: ../../bot
      dockerfile: Dockerfile
    container_name: telegram_ecommerce_bot
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_URL=http://backend:3001
      - TELEGRAM_WEBHOOK_URL=${TELEGRAM_WEBHOOK_URL}
      - CMS_BASE_URL=${CMS_BASE_URL}
      # - CMS_BASE_URL=http://medusa:9000  # Commented out until Medusa is properly configured
      - REDIS_URL=redis://redis:6379
      - BOT_PORT=3003
    # No host port needed unless using webhook mode
    depends_on:
      - backend
      - redis
    networks:
      - telegram_network

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=/api
        - VITE_SOCKET_URL=
    container_name: telegram_ecommerce_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - telegram_network

volumes:
  mysql_data:
  # medusa_pg_data:  # Commented out until Medusa is configured

networks:
  telegram_network:
    driver: bridge
