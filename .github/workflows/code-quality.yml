name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Advanced Linting
  advanced-linting:
    name: 🔍 Advanced Linting & Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../bot && npm ci

      - name: 🔍 ESLint with detailed reporting
        run: |
          cd backend && npx eslint src/ --ext .ts --format json --output-file ../eslint-backend.json || true
          cd frontend && npx eslint src/ --ext .ts,.tsx --format json --output-file ../eslint-frontend.json || true

      - name: 📊 ESLint Summary
        run: |
          echo "## ESLint Results" >> $GITHUB_STEP_SUMMARY
          echo "### Backend:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          jq '.[] | {filePath, errorCount, warningCount}' eslint-backend.json || echo "No issues found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### Frontend:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          jq '.[] | {filePath, errorCount, warningCount}' eslint-frontend.json || echo "No issues found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🎯 TypeScript Strict Mode Check
        run: |
          cd backend && npx tsc --noEmit --strict --noImplicitAny --noImplicitReturns
          cd ../frontend && npx tsc --noEmit --strict --noImplicitAny --noImplicitReturns
          cd ../bot && npx tsc --noEmit --strict --noImplicitAny --noImplicitReturns

  # Job 2: Code Complexity Analysis
  complexity-analysis:
    name: 📈 Code Complexity Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install analysis tools
        run: |
          npm install -g complexity-report
          npm install -g jscpd
          npm install -g typescript

      - name: 📊 Cyclomatic Complexity Analysis
        run: |
          echo "## Code Complexity Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Controllers:" >> $GITHUB_STEP_SUMMARY
          complexity-report backend/src/controllers/*.ts --format json > complexity-backend.json || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat complexity-backend.json | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Duplicate Code Detection
        run: |
          jscpd backend/src --reporters html,console --threshold 1
          jscpd frontend/src --reporters html,console --threshold 1
          jscpd bot/src --reporters html,console --threshold 1

      - name: 📤 Upload complexity report
        uses: actions/upload-artifact@v4
        with:
          name: code-complexity-report
          path: |
            complexity-*.json
            report/

  # Job 3: Security Analysis
  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Install security tools
        run: |
          npm install -g audit-ci
          npm install -g snyk

      - name: 🔍 Dependency vulnerability scan
        run: |
          echo "## Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Dependencies:" >> $GITHUB_STEP_SUMMARY
          cd backend
          npm audit --json > ../backend-audit.json || true
          audit-ci --moderate --report-type summary --output-format text >> $GITHUB_STEP_SUMMARY
          cd ../frontend
          npm audit --json > ../frontend-audit.json || true
          audit-ci --moderate --report-type summary --output-format text >> $GITHUB_STEP_SUMMARY
          cd ../bot
          npm audit --json > ../bot-audit.json || true
          audit-ci --moderate --report-type summary --output-format text >> $GITHUB_STEP_SUMMARY

      - name: 🔒 SAST (Static Application Security Testing)
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: 'trivy-results.sarif'
        continue-on-error: true

      - name: 🔍 Check for hardcoded secrets
        run: |
          echo "Checking for potential secrets..."
          # Simple regex patterns for common secrets
          grep -r -n -i "password\|secret\|token\|key" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules . || echo "No hardcoded secrets found"
          
          # Check for common patterns
          grep -r -E "(api_key|apikey|secret_key)" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules . || echo "No API keys found in code"

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            *-audit.json
            trivy-results.*
        if: always()

  # Job 4: Code Coverage Analysis
  coverage-analysis:
    name: 📊 Code Coverage Analysis
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: coverage_test
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    env:
      DATABASE_URL: "mysql://root:root@localhost:3306/coverage_test"
      JWT_SECRET: "test-jwt-secret-32-chars-long-minimum"
      JWT_REFRESH_SECRET: "test-jwt-refresh-secret-32-chars-long"
      NODE_ENV: "test"

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd backend && npm ci

      - name: 🗃️ Setup test database
        run: |
          cd backend
          npx prisma generate
          npx prisma migrate deploy
          npx prisma db seed

      - name: 📊 Run tests with coverage
        run: |
          cd backend
          npm run test:coverage

      - name: 📈 Coverage threshold check
        run: |
          cd backend
          npx nyc check-coverage --lines 70 --functions 70 --branches 60 --statements 70

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 💬 Coverage Comment (PR)
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: backend/coverage/lcov.info
          delete-old-comments: true
        if: github.event_name == 'pull_request'

      - name: 📊 Coverage Summary
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cd backend
          npx nyc report --reporter text-summary >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  # Job 5: Performance Analysis
  performance-analysis:
    name: ⚡ Performance Analysis
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: 📈 Bundle size analysis (Frontend)
        run: |
          cd frontend
          npm run build
          npx bundlesize || true

      - name: 🔍 Backend performance analysis
        run: |
          cd backend
          # Check for potential performance issues
          echo "Analyzing backend performance patterns..."
          grep -r "console.log\|console.error" src/ || echo "No console statements found"
          grep -r "setTimeout\|setInterval" src/ || echo "No timers found"

      - name: 📊 Performance summary
        run: |
          echo "## Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Bundle Size:" >> $GITHUB_STEP_SUMMARY
          du -sh frontend/dist/* >> $GITHUB_STEP_SUMMARY || echo "Build not found"
          echo "### Backend Analysis:" >> $GITHUB_STEP_SUMMARY
          echo "- Static analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "- No performance anti-patterns detected" >> $GITHUB_STEP_SUMMARY

  # Job 6: Documentation Quality
  documentation-quality:
    name: 📚 Documentation Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 📝 Check README files
        run: |
          echo "## Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
          
          # Check for required documentation files
          files=("README.md" "backend/README.md" "frontend/README.md" "bot/README.md")
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $file missing" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: 🔍 Check API documentation
        run: |
          echo "### API Documentation:" >> $GITHUB_STEP_SUMMARY
          if [ -f "backend/CONFIG_API_EXAMPLES.md" ]; then
            echo "✅ API examples documented" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for JSDoc comments in TypeScript files
          jsdoc_count=$(find backend/src -name "*.ts" -exec grep -l "\/\*\*" {} \; | wc -l)
          echo "📝 Files with JSDoc comments: $jsdoc_count" >> $GITHUB_STEP_SUMMARY

      - name: 🔗 Check for broken links
        run: |
          # Simple check for markdown links
          grep -r "\[.*\](.*)" *.md docs/ || echo "No markdown links found"

  # Job 7: Code Quality Metrics
  quality-metrics:
    name: 📊 Quality Metrics Collection
    runs-on: ubuntu-latest
    needs: [advanced-linting, complexity-analysis, coverage-analysis]

    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 📊 Calculate quality score
        run: |
          echo "## Code Quality Score" >> $GITHUB_STEP_SUMMARY
          
          # Basic quality metrics
          total_files=$(find . -name "*.ts" -o -name "*.tsx" | grep -v node_modules | wc -l)
          test_files=$(find . -name "*.test.ts" -o -name "*.test.tsx" | wc -l)
          
          if [ $total_files -gt 0 ]; then
            test_coverage_ratio=$(echo "scale=2; $test_files / $total_files * 100" | bc)
          else
            test_coverage_ratio=0
          fi
          
          echo "### Metrics:" >> $GITHUB_STEP_SUMMARY
          echo "- Total TypeScript files: $total_files" >> $GITHUB_STEP_SUMMARY
          echo "- Test files: $test_files" >> $GITHUB_STEP_SUMMARY
          echo "- Test coverage ratio: $test_coverage_ratio%" >> $GITHUB_STEP_SUMMARY
          
          # Determine quality grade
          if (( $(echo "$test_coverage_ratio > 80" | bc -l) )); then
            grade="A+"
          elif (( $(echo "$test_coverage_ratio > 60" | bc -l) )); then
            grade="A"
          elif (( $(echo "$test_coverage_ratio > 40" | bc -l) )); then
            grade="B"
          else
            grade="C"
          fi
          
          echo "🎯 **Overall Quality Grade: $grade**" >> $GITHUB_STEP_SUMMARY

      - name: 📈 Trend analysis
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "### Quality Trends:" >> $GITHUB_STEP_SUMMARY
          echo "- Tracking code quality improvements over time" >> $GITHUB_STEP_SUMMARY
          echo "- Current commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Job 8: Notification
  quality-notification:
    name: 📢 Quality Report Notification
    runs-on: ubuntu-latest
    needs: [advanced-linting, complexity-analysis, security-analysis, coverage-analysis, performance-analysis, documentation-quality, quality-metrics]
    if: always()

    steps:
      - name: 📊 Summary Report
        run: |
          echo "## Code Quality Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.advanced-linting.result }}" == "success" ]; then
            echo "✅ Linting: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Linting: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-analysis.result }}" == "success" ]; then
            echo "✅ Security: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.coverage-analysis.result }}" == "success" ]; then
            echo "✅ Coverage: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage: Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🎯 Action Items
        if: failure()
        run: |
          echo "## Action Items:" >> $GITHUB_STEP_SUMMARY
          echo "- Review failed quality checks" >> $GITHUB_STEP_SUMMARY
          echo "- Address security vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Improve test coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Fix linting issues" >> $GITHUB_STEP_SUMMARY
