name: Security Testing & Continuous Security Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily security tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of security test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - unit
        - integration
        - penetration
        - full
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - pre-production
        - production

env:
  NODE_VERSION: '18.x'
  SECURITY_SCAN_TIMEOUT: 30m
  MAX_VULNERABILITY_SCORE: 7.0
  FAIL_ON_CRITICAL: true

jobs:
  # Job 1: Security Unit Tests
  security-unit-tests:
    name: Security Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        test-suite:
          - authentication
          - authorization
          - encryption
          - input-validation
          - session-management
          - privilege-escalation
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for security analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm ci
        npm install --save-dev @types/jest supertest
    
    - name: Setup Test Environment
      run: |
        cp .env.test.example .env.test
        echo "SECURITY_TEST_MODE=true" >> .env.test
        echo "JWT_SECRET=test_secret_key_for_security_testing" >> .env.test
        echo "ENCRYPTION_KEY=test_encryption_key_32_chars_long" >> .env.test
    
    - name: Run Security Unit Tests - ${{ matrix.test-suite }}
      run: |
        npm run test:security:unit -- --testNamePattern="${{ matrix.test-suite }}" \
          --coverage \
          --coverageReporters=json,lcov,text \
          --coverageDirectory=coverage/security/${{ matrix.test-suite }} \
          --maxWorkers=2 \
          --detectOpenHandles \
          --forceExit
      env:
        NODE_ENV: test
        CI: true
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-unit-test-results-${{ matrix.test-suite }}
        path: |
          coverage/security/${{ matrix.test-suite }}
          test-results-security-${{ matrix.test-suite }}.xml
        retention-days: 30
    
    - name: Security Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Security Unit Tests - ${{ matrix.test-suite }}
        path: test-results-security-${{ matrix.test-suite }}.xml
        reporter: jest-junit
        fail-on-error: true

  # Job 2: Security Integration Tests  
  security-integration-tests:
    name: Security Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: security-unit-tests
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm ci
        npm install --save-dev newman @newman/reporter-htmlextra
    
    - name: Setup Integration Test Environment
      run: |
        cp .env.integration.example .env.integration
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.integration
        echo "REDIS_URL=redis://localhost:6379" >> .env.integration
        echo "JWT_SECRET=integration_test_jwt_secret_key" >> .env.integration
        echo "SECURITY_INTEGRATION_TEST=true" >> .env.integration
    
    - name: Database Migration & Seeding
      run: |
        npm run db:migrate:test
        npm run db:seed:security-test-data
      env:
        NODE_ENV: integration
    
    - name: Start Application for Integration Testing
      run: |
        npm run build
        npm run start:test &
        npx wait-on http://localhost:3000/health --timeout 60000
      env:
        NODE_ENV: integration
        PORT: 3000
    
    - name: Run Security Integration Tests
      run: |
        npm run test:security:integration \
          --coverage \
          --coverageReporters=json,lcov \
          --coverageDirectory=coverage/security/integration \
          --testTimeout=30000 \
          --maxWorkers=2
      env:
        CI: true
        TEST_BASE_URL: http://localhost:3000
    
    - name: Run API Security Tests with Newman
      run: |
        newman run tests/security/postman/security-test-collection.json \
          --environment tests/security/postman/test-environment.json \
          --reporters cli,htmlextra \
          --reporter-htmlextra-export reports/newman-security-report.html \
          --timeout-request 10000 \
          --delay-request 100 \
          --bail
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'botrt-security-scan'
        path: '.'
        format: 'ALL'
        out: 'dependency-check-report'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}
    
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-integration-test-results
        path: |
          coverage/security/integration
          reports/newman-security-report.html
          dependency-check-report/
        retention-days: 30
    
    - name: Stop Application
      if: always()
      run: |
        pkill -f "node.*start:test" || true

  # Job 3: Container Security Scanning
  container-security-scan:
    name: Container Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Build Docker Images
      run: |
        docker build -f config/docker/security-hardened.dockerfile -t botrt:security-test .
        docker build -f Dockerfile.prod -t botrt:production .
    
    - name: Run Trivy Container Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'botrt:security-test'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
        ignore-unfixed: true
    
    - name: Run Snyk Container Security Scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: botrt:security-test
        args: --severity-threshold=high --file=config/docker/security-hardened.dockerfile
    
    - name: Docker Security Benchmark (CIS)
      run: |
        docker run --rm -it \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/host \
          -e DOCKER_CONTENT_TRUST=1 \
          docker/docker-bench-security:latest
    
    - name: Container Image Signing with Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.0'
    
    - name: Sign Container Images
      run: |
        echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
        cosign sign --key cosign.key botrt:security-test
        cosign sign --key cosign.key botrt:production
        rm cosign.key
      env:
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
    
    - name: Upload Container Scan Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-scan-results
        path: |
          trivy-container-results.sarif
          snyk-container-report.json
        retention-days: 30

  # Job 4: SAST (Static Application Security Testing)
  static-security-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: CodeQL Analysis Setup
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        config-file: ./.github/codeql/codeql-config.yml
        queries: security-extended,security-and-quality
    
    - name: Build Application for SAST
      run: npm run build
    
    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        upload: true
    
    - name: SonarCloud SAST Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=botrt-security
          -Dsonar.organization=security-org
          -Dsonar.sources=backend/src,frontend/src
          -Dsonar.tests=tests
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.security.rating=A
          -Dsonar.reliability.rating=A
          -Dsonar.maintainability.rating=A
    
    - name: ESLint Security Analysis
      run: |
        npx eslint backend/src frontend/src \
          --config .eslintrc.security.js \
          --format json \
          --output-file eslint-security-results.json \
          --ext .js,.ts,.tsx \
          --max-warnings 0
    
    - name: Bandit Security Linter (if Python files exist)
      run: |
        if find . -name "*.py" -type f | grep -q .; then
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true
        fi
    
    - name: Semgrep Security Analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          auto
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/typescript
          p/nodejs
        generateSarif: "1"
        publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
        publishDeployment: production
    
    - name: Upload SAST Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sast-security-results
        path: |
          eslint-security-results.json
          bandit-results.json
          semgrep.sarif
        retention-days: 30

  # Job 5: Secrets Scanning
  secrets-scanning:
    name: Secrets & Credentials Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for comprehensive secrets scan
    
    - name: TruffleHog Secrets Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified --json --no-update
    
    - name: GitLeaks Secrets Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Yelp detect-secrets Scan
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline
    
    - name: Custom Secrets Pattern Check
      run: |
        # Check for common secret patterns
        echo "Scanning for potential secrets..."
        
        # API Keys
        grep -r "api_key.*=" . --include="*.js" --include="*.ts" --include="*.json" || true
        grep -r "apikey.*=" . --include="*.js" --include="*.ts" --include="*.json" || true
        
        # Database URLs
        grep -r "DATABASE_URL.*=" . --include="*.env*" || true
        grep -r "mongodb://.*:" . --include="*.js" --include="*.ts" || true
        
        # JWT Secrets
        grep -r "JWT_SECRET.*=" . --include="*.env*" || true
        
        # Private Keys
        find . -name "*.pem" -o -name "*.key" -o -name "*.p12" | head -10
        
        # Fail if any potential secrets found in non-test files
        if grep -r "sk_live_" . --include="*.js" --include="*.ts" --exclude-dir=tests; then
          echo "Live Stripe keys found - failing build"
          exit 1
        fi

  # Job 6: Dynamic Security Testing (DAST)
  dynamic-security-testing:
    name: Dynamic Application Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [security-unit-tests, security-integration-tests]
    if: github.event.inputs.test_type == 'penetration' || github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: dast_test_password
          POSTGRES_USER: dast_test_user
          POSTGRES_DB: dast_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Setup DAST Environment
      run: |
        cp .env.dast.example .env.dast
        echo "DATABASE_URL=postgresql://dast_test_user:dast_test_password@localhost:5432/dast_test_db" >> .env.dast
        echo "REDIS_URL=redis://localhost:6379" >> .env.dast
        echo "SECURITY_TESTING_MODE=true" >> .env.dast
        echo "RATE_LIMIT_DISABLED=true" >> .env.dast
    
    - name: Build and Start Application
      run: |
        npm run build
        npm run start:dast &
        npx wait-on http://localhost:3000/health --timeout 120000
      env:
        NODE_ENV: dast
        PORT: 3000
    
    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -d -T 15 -m 5'
        allow_issue_writing: false
        fail_action: false
    
    - name: OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.10.0
      if: github.event.inputs.test_type == 'full' || github.event_name == 'schedule'
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -d -T 30 -m 10'
        allow_issue_writing: false
        fail_action: false
    
    - name: Custom Penetration Testing Framework
      run: |
        npm run test:security:penetration -- \
          --target=http://localhost:3000 \
          --config=tests/security/pentest-config.json \
          --output=reports/pentest-results.json \
          --format=json \
          --include-poc \
          --max-duration=20
      env:
        PENTEST_MODE: true
        PENTEST_TARGET: http://localhost:3000
    
    - name: Nuclei Vulnerability Scanner
      run: |
        # Install nuclei
        curl -L https://github.com/projectdiscovery/nuclei/releases/latest/download/nuclei_2.9.4_linux_amd64.zip -o nuclei.zip
        unzip nuclei.zip
        chmod +x nuclei
        
        # Update templates
        ./nuclei -update-templates
        
        # Run nuclei scan
        ./nuclei -u http://localhost:3000 \
          -t /root/nuclei-templates/ \
          -json -o nuclei-results.json \
          -timeout 10 \
          -retries 2 \
          -rps 10
    
    - name: SQLMap Automated SQL Injection Testing
      run: |
        # Install sqlmap
        apt-get update && apt-get install -y sqlmap
        
        # Test key endpoints for SQL injection
        sqlmap -u "http://localhost:3000/api/products/search?q=test" \
          --batch --level=3 --risk=2 \
          --timeout=30 --retries=2 \
          --output-dir=sqlmap-results/ \
          --format=JSON || true
        
        sqlmap -u "http://localhost:3000/api/users" \
          --batch --level=2 --risk=1 \
          --timeout=20 \
          --output-dir=sqlmap-results/ \
          --format=JSON || true
    
    - name: Security Headers Analysis
      run: |
        curl -I http://localhost:3000 > security-headers.txt
        
        # Check for required security headers
        if ! grep -q "Strict-Transport-Security" security-headers.txt; then
          echo "Missing HSTS header" >> security-issues.txt
        fi
        
        if ! grep -q "X-Frame-Options" security-headers.txt; then
          echo "Missing X-Frame-Options header" >> security-issues.txt
        fi
        
        if ! grep -q "Content-Security-Policy" security-headers.txt; then
          echo "Missing CSP header" >> security-issues.txt
        fi
    
    - name: SSL/TLS Security Testing
      run: |
        # Test SSL configuration (if HTTPS enabled)
        if curl -k https://localhost:3443/health 2>/dev/null; then
          # Install testssl.sh
          git clone https://github.com/drwetter/testssl.sh.git
          cd testssl.sh
          
          # Run SSL tests
          ./testssl.sh --json localhost:3443 > ../ssl-test-results.json || true
        fi
    
    - name: API Security Testing
      run: |
        # Test API endpoints for common vulnerabilities
        npm run test:security:api -- \
          --baseUrl=http://localhost:3000 \
          --output=reports/api-security-results.json \
          --include-auth-tests \
          --include-injection-tests \
          --include-business-logic-tests
    
    - name: Upload DAST Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dast-security-results
        path: |
          reports/zap_*
          reports/pentest-results.json
          reports/api-security-results.json
          nuclei-results.json
          sqlmap-results/
          security-headers.txt
          security-issues.txt
          ssl-test-results.json
        retention-days: 30
    
    - name: Stop Application
      if: always()
      run: |
        pkill -f "node.*start:dast" || true

  # Job 7: Security Compliance & Reporting
  security-compliance-report:
    name: Security Compliance & Reporting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [
      security-unit-tests,
      security-integration-tests, 
      container-security-scan,
      static-security-analysis,
      secrets-scanning,
      dynamic-security-testing
    ]
    if: always()
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download All Security Test Results
      uses: actions/download-artifact@v4
      with:
        path: security-results/
    
    - name: Install Report Generation Tools
      run: |
        npm install -g markdown-pdf html-pdf
        pip install jinja2 pyyaml
    
    - name: Generate Consolidated Security Report
      run: |
        python3 scripts/generate-security-report.py \
          --input-dir=security-results/ \
          --output-dir=reports/ \
          --format=html,json,pdf \
          --include-executive-summary \
          --include-remediation-plan \
          --compliance-frameworks=OWASP,NIST,SOC2
    
    - name: Security Score Calculation
      run: |
        python3 scripts/calculate-security-score.py \
          --results-dir=security-results/ \
          --output=reports/security-score.json \
          --fail-threshold=7.0
    
    - name: OWASP Top 10 Compliance Check
      run: |
        python3 scripts/owasp-top10-compliance.py \
          --results=security-results/ \
          --output=reports/owasp-compliance.json
    
    - name: Security Metrics Dashboard Update
      run: |
        curl -X POST "${{ secrets.SECURITY_METRICS_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.SECURITY_METRICS_TOKEN }}" \
          -d @reports/security-score.json
    
    - name: Upload Consolidated Security Report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-security-report
        path: |
          reports/security-report.html
          reports/security-report.pdf
          reports/security-score.json
          reports/owasp-compliance.json
        retention-days: 90
    
    - name: Comment Security Report on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const securityScore = JSON.parse(fs.readFileSync('reports/security-score.json', 'utf8'));
          
          const comment = `## 🔒 Security Test Results
          
          **Overall Security Score: ${securityScore.overall_score}/10**
          
          ### Summary
          - **Critical Vulnerabilities:** ${securityScore.critical_count}
          - **High Vulnerabilities:** ${securityScore.high_count} 
          - **Medium Vulnerabilities:** ${securityScore.medium_count}
          - **Low Vulnerabilities:** ${securityScore.low_count}
          
          ### Test Coverage
          - **Unit Tests:** ${securityScore.unit_test_coverage}%
          - **Integration Tests:** ${securityScore.integration_test_coverage}%
          - **SAST Coverage:** ${securityScore.sast_coverage}%
          - **DAST Coverage:** ${securityScore.dast_coverage}%
          
          ### Compliance Status
          - **OWASP Top 10:** ${securityScore.owasp_compliance ? '✅' : '❌'}
          - **Security Headers:** ${securityScore.security_headers_score}/10
          - **Secrets Scanning:** ${securityScore.secrets_clean ? '✅' : '❌'}
          
          [View Full Security Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail Build on Critical Security Issues
      if: env.FAIL_ON_CRITICAL == 'true'
      run: |
        SECURITY_SCORE=$(cat reports/security-score.json | jq -r '.overall_score')
        CRITICAL_COUNT=$(cat reports/security-score.json | jq -r '.critical_count')
        
        if (( $(echo "$SECURITY_SCORE < ${{ env.MAX_VULNERABILITY_SCORE }}" | bc -l) )); then
          echo "Security score $SECURITY_SCORE is below threshold ${{ env.MAX_VULNERABILITY_SCORE }}"
          exit 1
        fi
        
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "Found $CRITICAL_COUNT critical vulnerabilities"
          exit 1
        fi
        
        echo "Security checks passed: Score=$SECURITY_SCORE, Critical=$CRITICAL_COUNT"

  # Job 8: Security Notification & Alerting
  security-notifications:
    name: Security Notifications & Alerting
    runs-on: ubuntu-latest
    needs: security-compliance-report
    if: always() && (failure() || needs.security-compliance-report.result == 'failure')
    
    steps:
    - name: Download Security Report
      uses: actions/download-artifact@v4
      with:
        name: consolidated-security-report
        path: reports/
    
    - name: Send Security Alert to Slack
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          🚨 **SECURITY ALERT** 🚨
          
          Critical security issues detected in repository: ${{ github.repository }}
          
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          **Workflow:** ${{ github.workflow }}
          
          Please review the security report immediately:
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        webhook_url: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
    
    - name: Send Email Notification to Security Team
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "🚨 SECURITY ALERT - Critical Issues Detected"
        to: ${{ secrets.SECURITY_TEAM_EMAIL }}
        from: "GitHub Security <security@company.com>"
        html_body: |
          <h2>🚨 Security Alert - Critical Issues Detected</h2>
          
          <p><strong>Repository:</strong> ${{ github.repository }}</p>
          <p><strong>Commit:</strong> ${{ github.sha }}</p>
          <p><strong>Branch:</strong> ${{ github.ref }}</p>
          <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
          
          <p>Critical security vulnerabilities have been detected during automated security testing.</p>
          
          <p><strong>Immediate Action Required:</strong></p>
          <ul>
            <li>Review the security report</li>
            <li>Assess the impact of identified vulnerabilities</li>
            <li>Implement necessary security fixes</li>
            <li>Re-run security tests after fixes</li>
          </ul>
          
          <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Security Report</a></p>
        attachments: reports/security-report.pdf
    
    - name: Create Security Issue
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const securityScore = JSON.parse(fs.readFileSync('reports/security-score.json', 'utf8'));
          
          const issueBody = `## 🚨 Critical Security Vulnerabilities Detected
          
          **Automated security testing has identified critical security issues that require immediate attention.**
          
          ### Summary
          - **Overall Security Score:** ${securityScore.overall_score}/10
          - **Critical Vulnerabilities:** ${securityScore.critical_count}
          - **High Vulnerabilities:** ${securityScore.high_count}
          
          ### Affected Areas
          ${securityScore.affected_areas ? securityScore.affected_areas.map(area => `- ${area}`).join('\n') : 'See security report for details'}
          
          ### Required Actions
          1. **IMMEDIATE:** Review all critical vulnerabilities
          2. **HIGH PRIORITY:** Implement security fixes
          3. **VERIFICATION:** Re-run security tests after fixes
          4. **DOCUMENTATION:** Update security documentation
          
          ### Resources
          - [Security Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security Guidelines](./docs/security/README.md)
          - [Incident Response Playbook](./docs/security/incident-response.md)
          
          **This issue will be automatically closed when security score improves above threshold.**
          
          /cc @security-team`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Critical Security Vulnerabilities Detected',
            body: issueBody,
            labels: ['security', 'critical', 'automated'],
            assignees: process.env.SECURITY_TEAM_ASSIGNEES ? process.env.SECURITY_TEAM_ASSIGNEES.split(',') : []
          });
        env:
          SECURITY_TEAM_ASSIGNEES: ${{ secrets.SECURITY_TEAM_ASSIGNEES }}
