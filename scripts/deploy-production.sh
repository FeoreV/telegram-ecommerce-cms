#!/bin/bash

# =============================================================================
# Production Deployment Script for Telegram E-commerce Platform
# =============================================================================

# SECURITY FIX: Enhanced error handling (CWE-754)
# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Trap errors and cleanup
trap 'error_handler $? $LINENO' ERR
trap cleanup EXIT

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
BACKUP_DIR="./backups"
COMPOSE_FILE="config/docker/docker-compose.postgres-prod.yml"
ENV_FILE=".env.production"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Functions
print_header() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}========================================${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Error handler function
error_handler() {
    local exit_code=$1
    local line_number=$2
    print_error "Error occurred in script at line $line_number with exit code $exit_code"
    cleanup
}

# Cleanup function
cleanup() {
    # Add cleanup logic here if needed
    # For example: remove temporary files, restore backups on failure, etc.
    :
}

# Check prerequisites
check_prerequisites() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"

    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    print_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    # Check if Docker Compose is installed
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    print_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    # Check if .env.production exists
    if [ ! -f "$ENV_FILE" ]; then
        print_error "–§–∞–π–ª $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        print_info "–°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ —à–∞–±–ª–æ–Ω–∞: cp env.production.example .env.production"
        exit 1
    fi
    print_success "–§–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω"

    # Check if compose file exists
    if [ ! -f "$COMPOSE_FILE" ]; then
        print_error "Docker Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $COMPOSE_FILE"
        exit 1
    fi
    print_success "Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞"
}

# Create backup
create_backup() {
    print_header "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"

    mkdir -p "$BACKUP_DIR"

    # Check if database container exists and is running
    if docker-compose -f "$COMPOSE_FILE" ps | grep -q "postgres.*Up"; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

        # Load environment variables
        export $(cat $ENV_FILE | grep -v '^#' | xargs)

        docker-compose -f "$COMPOSE_FILE" exec -T postgres pg_dump \
            -U "${POSTGRES_USER:-postgres}" \
            -d "${POSTGRES_DB:-telegram_ecommerce}" \
            > "$BACKUP_DIR/db_backup_$TIMESTAMP.sql"

        # Compress backup
        gzip "$BACKUP_DIR/db_backup_$TIMESTAMP.sql"

        print_success "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: db_backup_$TIMESTAMP.sql.gz"
    else
        print_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞, –±—ç–∫–∞–ø –Ω–µ —Å–æ–∑–¥–∞–Ω"
    fi
}

# Build images
build_images() {
    print_header "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"

    export $(cat $ENV_FILE | grep -v '^#' | xargs)

    print_info "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose -f "$COMPOSE_FILE" build --no-cache

    print_success "–û–±—Ä–∞–∑—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã"
}

# Run database migrations
run_migrations() {
    print_header "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

    export $(cat $ENV_FILE | grep -v '^#' | xargs)

    print_info "–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π..."
    docker-compose -f "$COMPOSE_FILE" run --rm backend npx prisma migrate deploy

    print_success "–ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# Start services
start_services() {
    print_header "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"

    export $(cat $ENV_FILE | grep -v '^#' | xargs)

    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f "$COMPOSE_FILE" down

    print_info "–ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose -f "$COMPOSE_FILE" up -d

    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# Health checks
run_health_checks() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"

    export $(cat $ENV_FILE | grep -v '^#' | xargs)

    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)..."
    sleep 30

    # Check PostgreSQL
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
    if docker-compose -f "$COMPOSE_FILE" exec -T postgres pg_isready -U "${POSTGRES_USER:-postgres}" > /dev/null 2>&1; then
        print_success "PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "PostgreSQL –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi

    # Check Redis
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
    if docker-compose -f "$COMPOSE_FILE" exec -T redis redis-cli ping > /dev/null 2>&1; then
        print_success "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi

    # Check Backend
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Backend..."
    if docker-compose -f "$COMPOSE_FILE" exec -T backend curl -f http://82.147.84.78:3001/health > /dev/null 2>&1; then
        print_success "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_warning "Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)"
    fi

    # Show service status
    print_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f "$COMPOSE_FILE" ps
}

# Cleanup old images
cleanup() {
    print_header "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ–±—Ä–∞–∑–æ–≤"

    print_info "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    docker image prune -f

    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# Show deployment summary
show_summary() {
    print_header "–°–≤–æ–¥–∫–∞ –¥–µ–ø–ª–æ—è"

    export $(cat $ENV_FILE | grep -v '^#' | xargs)

    echo ""
    print_info "–°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
    echo "  üåê Frontend: http://82.147.84.78:${FRONTEND_PORT:-3000}"
    echo "  üîß Backend API: http://82.147.84.78:${BACKEND_PORT:-3001}"
    echo "  ü§ñ Bot Webhook: Port ${BOT_WEBHOOK_PORT:-8443}"
    echo "  üìä Grafana: http://82.147.84.78:${GRAFANA_PORT:-3030}"
    echo "  üìà Prometheus: http://82.147.84.78:${PROMETHEUS_PORT:-9090}"
    echo "  üîç Kibana: http://82.147.84.78:${KIBANA_PORT:-5601}"
    echo ""
    print_info "–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:    docker-compose -f $COMPOSE_FILE logs -f"
    echo "  –õ–æ–≥–∏ backend:          docker-compose -f $COMPOSE_FILE logs -f backend"
    echo "  –õ–æ–≥–∏ bot:              docker-compose -f $COMPOSE_FILE logs -f bot"
    echo "  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:       docker-compose -f $COMPOSE_FILE ps"
    echo "  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ:        docker-compose -f $COMPOSE_FILE down"
    echo ""
}

# Main deployment flow
main() {
    print_header "üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –≤ production"

    # Parse arguments
    SKIP_BACKUP=false
    SKIP_BUILD=false

    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-backup)
                SKIP_BACKUP=true
                shift
                ;;
            --skip-build)
                SKIP_BUILD=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo ""
                echo "–û–ø—Ü–∏–∏:"
                echo "  --skip-backup    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
                echo "  --skip-build     –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–æ–≤"
                echo "  --help           –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                exit 0
                ;;
            *)
                print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done

    # Confirmation
    echo ""
    print_warning "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–¥–µ–ø–ª–æ–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ PRODUCTION!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " -r
    echo
    if [[ ! $REPLY =~ ^[Yy]es$ ]]; then
        print_info "–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω"
        exit 0
    fi

    # Run deployment steps
    check_prerequisites

    if [ "$SKIP_BACKUP" = false ]; then
        create_backup
    else
        print_warning "–ë—ç–∫–∞–ø –ø—Ä–æ–ø—É—â–µ–Ω (--skip-backup)"
    fi

    if [ "$SKIP_BUILD" = false ]; then
        build_images
    else
        print_warning "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (--skip-build)"
    fi

    run_migrations
    start_services
    run_health_checks
    cleanup
    show_summary

    print_header "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# Run main function
main "$@"

