#!/bin/bash
# Security Configuration Checker
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º

set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
echo "=========================================="
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ERRORS=0
WARNINGS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫
error() {
    echo -e "${RED}‚ùå –û–®–ò–ë–ö–ê:${NC} $1"
    ERRORS=$((ERRORS + 1))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:${NC} $1"
    WARNINGS=$((WARNINGS + 1))
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT Secrets"
echo "------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT_SECRET
if [ -z "$JWT_SECRET" ]; then
    error "JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
elif [ ${#JWT_SECRET} -lt 32 ]; then
    error "JWT_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#JWT_SECRET} —Å–∏–º–≤–æ–ª–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 32)"
else
    success "JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${#JWT_SECRET} —Å–∏–º–≤–æ–ª–æ–≤)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT_REFRESH_SECRET
if [ -z "$JWT_REFRESH_SECRET" ]; then
    error "JWT_REFRESH_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
elif [ ${#JWT_REFRESH_SECRET} -lt 32 ]; then
    error "JWT_REFRESH_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#JWT_REFRESH_SECRET} —Å–∏–º–≤–æ–ª–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 32)"
else
    success "JWT_REFRESH_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${#JWT_REFRESH_SECRET} —Å–∏–º–≤–æ–ª–æ–≤)"
fi

echo ""
echo "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Database Configuration"
echo "-----------------------------------"

if [ -z "$DATABASE_URL" ]; then
    error "DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–∞—Ä–æ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è default
    if [[ "$DATABASE_URL" == *"password=postgres"* ]] || [[ "$DATABASE_URL" == *"password=password"* ]]; then
        warning "DATABASE_URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å (postgres/password)"
    else
        success "DATABASE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
fi

echo ""
echo "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis Configuration"
echo "--------------------------------"

if [ -z "$REDIS_URL" ]; then
    warning "REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è 82.147.84.78:6379)"
else
    success "REDIS_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if [ -n "$REDIS_PASSWORD" ]; then
    if [ ${#REDIS_PASSWORD} -lt 16 ]; then
        warning "REDIS_PASSWORD —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#REDIS_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 16)"
    else
        success "REDIS_PASSWORD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${#REDIS_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤)"
    fi
fi

echo ""
echo "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ CA Password (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TLS)"
echo "------------------------------------------------"

if [ -n "$CA_PASSWORD" ]; then
    if [ ${#CA_PASSWORD} -lt 16 ]; then
        error "CA_PASSWORD —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#CA_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 16)"
    else
        success "CA_PASSWORD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${#CA_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤)"
    fi
fi

echo ""
echo "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Vault Configuration"
echo "--------------------------------"

if [ -n "$ENVIRONMENT" ]; then
    success "ENVIRONMENT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $ENVIRONMENT"

    if [ "$ENVIRONMENT" = "production" ]; then
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        VAULT_SHARES=${VAULT_KEY_SHARES:-1}
        VAULT_THRESHOLD=${VAULT_KEY_THRESHOLD:-1}

        if [ "$VAULT_SHARES" -lt 3 ]; then
            warning "VAULT_KEY_SHARES=$VAULT_SHARES (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)"
        else
            success "VAULT_KEY_SHARES=$VAULT_SHARES"
        fi

        if [ "$VAULT_THRESHOLD" -lt 3 ]; then
            warning "VAULT_KEY_THRESHOLD=$VAULT_THRESHOLD (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)"
        else
            success "VAULT_KEY_THRESHOLD=$VAULT_THRESHOLD"
        fi

        if [ "$VAULT_SHARES" -eq 1 ] && [ "$ALLOW_SINGLE_KEY_PROD" != "true" ]; then
            error "Single-key Vault –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ production"
        fi
    fi
else
    warning "ENVIRONMENT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è development)"
fi

echo ""
echo "6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Session Security"
echo "-----------------------------"

if [ -z "$SESSION_SECRET" ]; then
    warning "SESSION_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
elif [ ${#SESSION_SECRET} -lt 32 ]; then
    warning "SESSION_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#SESSION_SECRET} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 32)"
else
    success "SESSION_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${#SESSION_SECRET} —Å–∏–º–≤–æ–ª–æ–≤)"
fi

echo ""
echo "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF Protection"
echo "---------------------------"

if [ -z "$CSRF_SECRET" ]; then
    warning "CSRF_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
elif [ ${#CSRF_SECRET} -lt 32 ]; then
    warning "CSRF_SECRET —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (${#CSRF_SECRET} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 32)"
else
    success "CSRF_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (${#CSRF_SECRET} —Å–∏–º–≤–æ–ª–æ–≤)"
fi

echo ""
echo "8. –ü—Ä–æ–≤–µ—Ä–∫–∞ Node Environment"
echo "-----------------------------"

NODE_ENV_VALUE=${NODE_ENV:-development}
success "NODE_ENV —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $NODE_ENV_VALUE"

if [ "$NODE_ENV_VALUE" = "production" ] && [ "$ENVIRONMENT" != "production" ]; then
    warning "NODE_ENV=production –Ω–æ ENVIRONMENT!==production (–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ)"
fi

echo ""
echo "9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
echo "--------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ -f ".env" ]; then
    success ".env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    PERMS=$(stat -c '%a' .env 2>/dev/null || stat -f '%A' .env 2>/dev/null)
    if [ "$PERMS" != "600" ] && [ "$PERMS" != "0600" ]; then
        warning ".env —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞ ($PERMS), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 600"
        echo "   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: chmod 600 .env"
    else
        success ".env —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ ($PERMS)"
    fi
else
    warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
if [ -f ".gitignore" ]; then
    if grep -q "^\.env$" .gitignore; then
        success ".env –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore"
    else
        error ".env –ù–ï –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore (—Ä–∏—Å–∫ —É—Ç–µ—á–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤!)"
    fi
fi

echo ""
echo "10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
echo "-------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
if [ -d "backend" ]; then
    echo "Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
    cd backend
    if command -v npm &> /dev/null; then
        BACKEND_VULNS=$(npm audit --json 2>/dev/null | grep -o '"total":[0-9]*' | head -1 | grep -o '[0-9]*' || echo "0")
        if [ "$BACKEND_VULNS" -eq 0 ]; then
            success "–ù–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
        else
            warning "–ù–∞–π–¥–µ–Ω–æ $BACKEND_VULNS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm audit)"
        fi
    fi
    cd ..
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ bot
if [ -d "bot" ]; then
    echo "Bot –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
    cd bot
    if command -v npm &> /dev/null; then
        BOT_VULNS=$(npm audit --json 2>/dev/null | grep -o '"total":[0-9]*' | head -1 | grep -o '[0-9]*' || echo "0")
        if [ "$BOT_VULNS" -eq 0 ]; then
            success "–ù–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
        else
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
            BOT_CRITICAL=$(npm audit --json 2>/dev/null | grep -o '"critical":[0-9]*' | head -1 | grep -o '[0-9]*' || echo "0")
            if [ "$BOT_CRITICAL" -gt 0 ]; then
                error "–ù–∞–π–¥–µ–Ω–æ $BOT_CRITICAL –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–∑–∞–ø—É—Å—Ç–∏—Ç–µ: npm audit fix)"
            else
                warning "–ù–∞–π–¥–µ–Ω–æ $BOT_VULNS –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
            fi
        fi
    fi
    cd ..
fi

echo ""
echo "=========================================="
echo "–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò"
echo "=========================================="

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: $ERRORS${NC}"
    echo "   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º!"
    exit 1
elif [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $WARNINGS${NC}"
    echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω."
    exit 0
else
    echo -e "${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo "   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
    exit 0
fi

