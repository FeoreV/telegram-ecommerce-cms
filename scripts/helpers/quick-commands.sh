#!/bin/bash

# =============================================================================
# Quick Commands Helper Script
# Telegram E-commerce CMS Platform
# =============================================================================

COMPOSE_FILE="config/docker/docker-compose.postgres-prod.yml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

show_help() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}Telegram E-commerce - Quick Commands${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞>"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "  status          - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  start           - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  stop            - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  restart         - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  restart <srv>   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å"
    echo ""
    echo "–õ–æ–≥–∏:"
    echo "  logs            - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  logs <service>  - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"
    echo "  errors          - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"
    echo ""
    echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:"
    echo "  db-connect      - –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"
    echo "  db-backup       - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  db-restore      - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
    echo "  db-migrate      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
    echo ""
    echo "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "  stats           - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  health          - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  disk            - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"
    echo ""
    echo "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:"
    echo "  cleanup         - –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
    echo "  update          - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  rebuild         - –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –æ–±—Ä–∞–∑—ã"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 logs backend"
    echo "  $0 restart bot"
    echo "  $0 db-backup"
    echo ""
}

case "$1" in
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    status)
        echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
        docker-compose -f $COMPOSE_FILE ps
        ;;

    start)
        echo -e "${GREEN}‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
        docker-compose -f $COMPOSE_FILE up -d
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
        ;;

    stop)
        echo -e "${YELLOW}‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
        docker-compose -f $COMPOSE_FILE down
        echo -e "${YELLOW}‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
        ;;

    restart)
        if [ -z "$2" ]; then
            echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
            docker-compose -f $COMPOSE_FILE restart
        else
            echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: $2${NC}"
            docker-compose -f $COMPOSE_FILE restart $2
        fi
        echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
        ;;

    # –õ–æ–≥–∏
    logs)
        if [ -z "$2" ]; then
            echo -e "${BLUE}üìù –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:${NC}"
            docker-compose -f $COMPOSE_FILE logs -f --tail=100
        else
            echo -e "${BLUE}üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞: $2${NC}"
            docker-compose -f $COMPOSE_FILE logs -f --tail=100 $2
        fi
        ;;

    errors)
        echo -e "${RED}‚ùå –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö:${NC}"
        docker-compose -f $COMPOSE_FILE logs | grep -i "error\|exception\|fail"
        ;;

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    db-connect)
        echo -e "${BLUE}üóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...${NC}"
        docker-compose -f $COMPOSE_FILE exec postgres psql -U postgres -d telegram_ecommerce
        ;;

    db-backup)
        echo -e "${BLUE}üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
        mkdir -p backups
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        docker-compose -f $COMPOSE_FILE exec -T postgres pg_dump -U postgres telegram_ecommerce | \
            gzip > backups/backup_${TIMESTAMP}.sql.gz
        echo -e "${GREEN}‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: backups/backup_${TIMESTAMP}.sql.gz${NC}"
        ;;

    db-restore)
        echo -e "${YELLOW}‚ö†Ô∏è  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö${NC}"
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
        ls -lh backups/*.sql.gz
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: " backup_file

        if [ -f "backups/$backup_file" ]; then
            echo -e "${BLUE}üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: $backup_file${NC}"
            gunzip < "backups/$backup_file" | \
                docker-compose -f $COMPOSE_FILE exec -T postgres psql -U postgres -d telegram_ecommerce
            echo -e "${GREEN}‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ${NC}"
        else
            echo -e "${RED}‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        fi
        ;;

    db-migrate)
        echo -e "${BLUE}üóÑÔ∏è  –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...${NC}"
        docker-compose -f $COMPOSE_FILE exec backend npx prisma migrate deploy
        echo -e "${GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã${NC}"
        ;;

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    stats)
        echo -e "${BLUE}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
        docker stats --no-stream
        ;;

    health)
        echo -e "${BLUE}üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints:${NC}"
        echo ""

        echo -n "Backend API: "
        if curl -sf http://82.147.84.78:3001/health > /dev/null; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi

        echo -n "Frontend: "
        if curl -sf http://82.147.84.78:3000 > /dev/null; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi

        echo -n "PostgreSQL: "
        if docker-compose -f $COMPOSE_FILE exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi

        echo -n "Redis: "
        if docker-compose -f $COMPOSE_FILE exec -T redis redis-cli ping > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ OK${NC}"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
        fi
        ;;

    disk)
        echo -e "${BLUE}üíø –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞:${NC}"
        echo ""
        echo "–°–∏—Å—Ç–µ–º–∞:"
        df -h /
        echo ""
        echo "Docker:"
        docker system df
        ;;

    # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    cleanup)
        echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...${NC}"
        docker system prune -f
        echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
        ;;

    update)
        echo -e "${BLUE}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
        git pull origin main
        ./scripts/deploy-production.sh
        ;;

    rebuild)
        echo -e "${BLUE}üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤...${NC}"
        docker-compose -f $COMPOSE_FILE build --no-cache
        docker-compose -f $COMPOSE_FILE up -d
        echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
        ;;

    # Help
    help|--help|-h|"")
        show_help
        ;;

    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac

