version: '3.8'

# =============================================================================
# Production Docker Compose Configuration
# Telegram E-commerce CMS Platform
# =============================================================================
# Usage: docker-compose -f docker-compose.production.yml up -d
# Environment: .env.production

services:
  # =============================================================================
  # PostgreSQL Database - Primary data store
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: telegram_ecommerce_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-telegram_ecommerce}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-telegram_ecommerce}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # =============================================================================
  # Redis - Cache & Session Store
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: telegram_ecommerce_redis_prod
    restart: always
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # Backend API Service
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      target: production
      args:
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
    image: ${DOCKER_REGISTRY:-}telegram-ecommerce-backend:${VERSION:-latest}
    container_name: telegram_ecommerce_backend_prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      
      # Database
      DATABASE_PROVIDER: postgresql
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-telegram_ecommerce}
      DATABASE_MAX_CONNECTIONS: ${DATABASE_MAX_CONNECTIONS:-100}
      DATABASE_TIMEOUT: ${DATABASE_TIMEOUT:-5000}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379
      REDIS_TTL: ${REDIS_TTL:-3600}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN:-15m}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN:-7d}
      SESSION_SECRET: ${SESSION_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
      
      # Encryption
      SECURITY_LOGS_KEY_ID: ${SECURITY_LOGS_KEY_ID}
      SBOM_SIGNING_KEY_ID: ${SBOM_SIGNING_KEY_ID}
      COMMUNICATION_KEY_ID: ${COMMUNICATION_KEY_ID}
      WEBSOCKET_KEY_ID: ${WEBSOCKET_KEY_ID}
      BACKUP_KEY_ID: ${BACKUP_KEY_ID}
      STORAGE_KEY_ID: ${STORAGE_KEY_ID}
      LOG_KEY_ID: ${LOG_KEY_ID}
      
      # Application
      API_URL: ${API_URL:-https://yourdomain.com/api}
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL:-https://yourdomain.com}
      
      # Features
      ENABLE_ADMINJS: ${ENABLE_ADMINJS:-false}
      ENABLE_WEBHOOK_MODE: ${ENABLE_WEBHOOK_MODE:-true}
      ENABLE_RATE_LIMITING: ${ENABLE_RATE_LIMITING:-true}
      ENABLE_AUDIT_LOGGING: ${ENABLE_AUDIT_LOGGING:-true}
      ENABLE_SECURITY: ${ENABLE_SECURITY:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_JSON_LOGS: ${ENABLE_JSON_LOGS:-true}
      LOG_REQUESTS: ${LOG_REQUESTS:-true}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN}
      CORS_CREDENTIALS: ${CORS_CREDENTIALS:-true}
      
      # Rate Limiting
      API_RATE_LIMIT_WINDOW_MS: ${API_RATE_LIMIT_WINDOW_MS:-900000}
      API_RATE_LIMIT_MAX: ${API_RATE_LIMIT_MAX:-100}
      
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # =============================================================================
  # Telegram Bot Service
  # =============================================================================
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    image: ${DOCKER_REGISTRY:-}telegram-ecommerce-bot:${VERSION:-latest}
    container_name: telegram_ecommerce_bot_prod
    restart: always
    environment:
      NODE_ENV: production
      
      # Bot Configuration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_URL: http://backend:3001
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379
      
      # Webhook
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL}
      WEBHOOK_PATH: ${WEBHOOK_PATH:-/webhook/telegram}
      WEBHOOK_PORT: ${WEBHOOK_PORT:-8443}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      
      # Security
      ENABLE_SECURITY: true
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-30}
      SPAM_MAX_MESSAGES_PER_MINUTE: ${SPAM_MAX_MESSAGES_PER_MINUTE:-10}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    ports:
      - "${BOT_WEBHOOK_PORT:-8443}:8443"
    volumes:
      - ./bot/logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8443/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # Frontend Service (React/Vite)
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${API_URL:-https://yourdomain.com/api}
        VITE_SOCKET_URL: ${API_URL:-https://yourdomain.com}
        NODE_ENV: production
    image: ${DOCKER_REGISTRY:-}telegram-ecommerce-frontend:${VERSION:-latest}
    container_name: telegram_ecommerce_frontend_prod
    restart: always
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - frontend_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # =============================================================================
  # NGINX Reverse Proxy
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: telegram_ecommerce_nginx_prod
    restart: always
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
      - bot
    networks:
      - frontend_network
      - backend_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # =============================================================================
  # Monitoring: Prometheus
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram_ecommerce_prometheus_prod
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Monitoring: Grafana
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: telegram_ecommerce_grafana_prod
    restart: always
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3030}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "${GRAFANA_PORT:-3030}:3000"
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

# =============================================================================
# Networks
# =============================================================================
networks:
  backend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  frontend_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/24

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local

