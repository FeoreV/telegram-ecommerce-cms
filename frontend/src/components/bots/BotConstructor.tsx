import {
    Add as AddIcon,
    SmartToy as BotIcon,
    ChatBubble as ChatIcon,
    Check as CheckIcon,
    Delete as DeleteIcon,
    Palette as DesignIcon,
    Edit as EditIcon,
    Image as ImageIcon,
    Notifications as NotificationIcon,
    Payment as PaymentIcon,
    Preview as PreviewIcon,
    Settings as SettingsIcon,
    Store as StoreIcon
} from '@mui/icons-material';
import {
    Alert,
    Avatar,
    Box,
    Button,
    Card,
    CardContent,
    Chip,
    CircularProgress,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    Divider,
    FormControl,
    FormControlLabel,
    Grid,
    IconButton,
    InputLabel,
    LinearProgress,
    List,
    ListItem,
    ListItemIcon,
    ListItemSecondaryAction,
    ListItemText,
    MenuItem,
    Paper,
    Select,
    Switch,
    Tab,
    Tabs,
    TextField,
    Tooltip,
    Typography
} from '@mui/material';
import { useTheme } from '@mui/material/styles';
import React, { useEffect, useState } from 'react';
import { apiClient } from '../../services/apiClient';
import StoreDialog from '../stores/StoreDialog';
import BotTemplates from './BotTemplates';

interface BotTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  settings: BotSettings;
  preview: {
    welcomeMessage: string;
    catalogStyle: string;
    theme: string;
    autoResponses: number;
    notifications: number;
  };
  icon: string;
  color: string;
  features: string[];
}

export interface BotSettings {
  // Basic settings
  welcomeMessage: string;
  language: string;
  currency: string;
  timezone: string;

  // Start customization
  startCustomization?: {
    emoji?: string;
    greeting?: string;
    welcomeText?: string;
    showStats?: boolean;
    showDescription?: boolean;
    additionalText?: string;
    headerImage?: string;
    catalogButton?: { text: string; emoji?: string };
    profileButton?: { text: string; emoji?: string };
    helpButton?: { text: string; emoji?: string };
    extraButtons?: Array<{ text: string; url?: string; callback_data?: string }>;
  };

  // Appearance
  theme: 'light' | 'dark' | 'custom';
  primaryColor: string;
  accentColor: string;
  botAvatar?: string;
  storelogo?: string;

  // Catalog settings
  catalogStyle: 'grid' | 'list' | 'carousel';
  showPrices: boolean;
  showStock: boolean;
  enableSearch: boolean;
  categoriesPerPage: number;
  productsPerPage: number;

  // Auto-responses
  autoResponses: {
    enabled: boolean;
    workingHours?: {
      start: string;
      end: string;
      timezone: string;
    };
    responses: AutoResponse[];
  };

  // Notifications
  notifications: {
    newOrder: boolean;
    lowStock: boolean;
    paymentConfirmation: boolean;
    orderStatusUpdate: boolean;
    customNotifications: CustomNotification[];
  };

  // Payment
  paymentMethods: string[];
  paymentInstructions: string;
  paymentRequisites?: {
    card?: string;
    bank?: string;
    receiver?: string;
    comment?: string;
  };

  // Advanced
  enableAnalytics: boolean;
  enableReferralSystem: boolean;
  enableReviews: boolean;
  customCommands: CustomCommand[];
}
interface AutoResponse {
  id: string;
  trigger: string;
  response: string;
  enabled: boolean;
}

interface CustomNotification {
  id: string;
  event: string;
  message: string;
  enabled: boolean;
}

interface CustomCommand {
  id: string;
  command: string;
  response: string;
  description: string;
  enabled: boolean;
}

interface BotConstructorProps {
  open: boolean;
  onClose: () => void;
  stores: Array<{ id: string; name: string; hasBot: boolean }>;
  onBotCreated: () => void;
  editBot?: {
    storeId: string;
    settings: BotSettings;
  } | null;
}

const BOT_TEMPLATES: BotTemplate[] = [
  {
    id: 'ecommerce_basic',
    name: '–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω',
    description: '–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º',
    category: 'E-commerce',
    icon: 'üõçÔ∏è',
    color: '#2196F3',
    features: [
      '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
      '–ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
      '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã',
      '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    ],
    preview: {
      welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è',
      catalogStyle: '–°–µ—Ç–æ—á–Ω—ã–π –≤–∏–¥',
      theme: '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
      autoResponses: 3,
      notifications: 2
    },
    settings: {
      welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üõçÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.',
      language: 'ru',
      currency: 'USD',
      timezone: 'UTC',
      theme: 'light',
      primaryColor: '#1976d2',
      accentColor: '#ff4081',
      catalogStyle: 'grid',
      showPrices: true,
      showStock: true,
      enableSearch: true,
      categoriesPerPage: 6,
      productsPerPage: 8,
      autoResponses: {
        enabled: true,
        responses: [
          { id: '1', trigger: '–ø–æ–º–æ—â—å', response: '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É.', enabled: true },
          { id: '2', trigger: '–∫–æ–Ω—Ç–∞–∫—Ç—ã', response: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.', enabled: true }
        ]
      },
      notifications: {
        newOrder: true,
        lowStock: true,
        paymentConfirmation: true,
        orderStatusUpdate: true,
        customNotifications: []
      },
      paymentMethods: ['manual_verification'],
      paymentInstructions: '–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.',
      paymentRequisites: {
        card: '',
        bank: '',
        receiver: '',
        comment: ''
      },
      enableAnalytics: true,
      enableReferralSystem: false,
      enableReviews: true,
      customCommands: []
    }
  },
  {
    id: 'restaurant',
    name: '–†–µ—Å—Ç–æ—Ä–∞–Ω/–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã',
    description: '–ë–æ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å –º–µ–Ω—é, –∑–∞–∫–∞–∑–∞–º–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π',
    category: 'Food & Beverage',
    icon: 'üçï',
    color: '#FF5722',
    features: [
      '–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
      '–î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã',
      '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–æ–≤',
      '–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤',
      '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã'
    ],
    preview: {
      welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω! üçΩÔ∏è',
      catalogStyle: '–°–ø–∏—Å–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
      theme: '–¢–µ–ø–ª–∞—è —Ç–µ–º–∞',
      autoResponses: 5,
      notifications: 4
    },
    settings: {
      welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üçï\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–µ –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑.',
      language: 'ru',
      currency: 'USD',
      timezone: 'UTC',
      theme: 'light',
      primaryColor: '#ff5722',
      accentColor: '#4caf50',
      catalogStyle: 'list',
      showPrices: true,
      showStock: false,
      enableSearch: true,
      categoriesPerPage: 4,
      productsPerPage: 6,
      autoResponses: {
        enabled: true,
        workingHours: { start: '09:00', end: '23:00', timezone: 'UTC' },
        responses: [
          { id: '1', trigger: '–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã', response: '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 9:00 –¥–æ 23:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.', enabled: true },
          { id: '2', trigger: '–¥–æ—Å—Ç–∞–≤–∫–∞', response: '–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏.', enabled: true }
        ]
      },
      notifications: {
        newOrder: true,
        lowStock: false,
        paymentConfirmation: true,
        orderStatusUpdate: true,
        customNotifications: [
          { id: '1', event: 'order_ready', message: '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! üçï', enabled: true }
        ]
      },
      paymentMethods: ['cash', 'card', 'manual_verification'],
      paymentInstructions: '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º.',
      enableAnalytics: true,
      enableReferralSystem: true,
      enableReviews: true,
      customCommands: [
        { id: '1', command: '/menu', response: '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é', enabled: true }
      ]
    }
  },
  {
    id: 'digital_products',
    name: '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã',
    description: '–ü—Ä–æ–¥–∞–∂–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫—É—Ä—Å–æ–≤, –ø–æ–¥–ø–∏—Å–æ–∫',
    category: 'Digital',
    icon: 'üíª',
    color: '#9C27B0',
    features: [
      '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã',
      '–ö—É—Ä—Å—ã –∏ –æ–±—É—á–µ–Ω–∏–µ',
      '–ü–æ–¥–ø–∏—Å–∫–∏',
      '–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
      '–õ–∏—Ü–µ–Ω–∑–∏–∏'
    ],
    preview: {
      welcomeMessage: '–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ üíª',
      catalogStyle: '–ö–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º',
      theme: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω–∞—è —Ç–µ–º–∞',
      autoResponses: 4,
      notifications: 3
    },
    settings: {
      welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üíª\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–æ–¥—É–∫—Ç.',
      language: 'ru',
      currency: 'USD',
      timezone: 'UTC',
      theme: 'dark',
      primaryColor: '#673ab7',
      accentColor: '#00bcd4',
      catalogStyle: 'carousel',
      showPrices: true,
      showStock: false,
      enableSearch: true,
      categoriesPerPage: 8,
      productsPerPage: 4,
      autoResponses: {
        enabled: true,
        responses: [
          { id: '1', trigger: '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', response: '–ù–∞—à–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º 24/7.', enabled: true },
          { id: '2', trigger: '–≥–∞—Ä–∞–Ω—Ç–∏—è', response: '–ù–∞ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.', enabled: true }
        ]
      },
      notifications: {
        newOrder: true,
        lowStock: false,
        paymentConfirmation: true,
        orderStatusUpdate: true,
        customNotifications: []
      },
      paymentMethods: ['crypto', 'card', 'paypal'],
      paymentInstructions: '–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.',
      enableAnalytics: true,
      enableReferralSystem: true,
      enableReviews: true,
      customCommands: []
    }
  }
];

const STEPS = [
  { id: 'basic', label: '–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', icon: <SettingsIcon /> },
  { id: 'template', label: '–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞', icon: <BotIcon /> },
  { id: 'customization', label: '–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è', icon: <DesignIcon /> },
  { id: 'responses', label: '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ FAQ', icon: <ChatIcon /> },
  { id: 'payment', label: '–û–ø–ª–∞—Ç–∞', icon: <PaymentIcon /> },
  { id: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: <NotificationIcon /> },
  { id: 'preview', label: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä', icon: <PreviewIcon /> }
];

const BotConstructor: React.FC<BotConstructorProps> = ({
  open,
  onClose,
  stores,
  onBotCreated,
  editBot
}) => {
  const theme = useTheme();
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedStore, setSelectedStore] = useState('');
  const [botToken, setBotToken] = useState('');
  const [botUsername, setBotUsername] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState<string>('');
  const [settings, setSettings] = useState<BotSettings>(BOT_TEMPLATES[0].settings);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [showStoreDialog, setShowStoreDialog] = useState(false);
  const [extraButton, setExtraButton] = useState({ text: '', url: '', callback_data: '' });

  // States for FAQ/Auto-responses management
  const [newFaq, setNewFaq] = useState({ trigger: '', response: '' });
  const [editingFaq, setEditingFaq] = useState<string | null>(null);
  const [editingData, setEditingData] = useState({ trigger: '', response: '' });

  // Validation functions
  const isValidBotToken = (token: string): boolean => {
    const tokenPattern = /^\d+:[A-Za-z0-9_-]+$/;
    return tokenPattern.test(token.trim());
  };

  const isValidBotUsername = (username: string): boolean => {
    const usernamePattern = /^[a-zA-Z][a-zA-Z0-9_]*bot$/i;
    return !username || usernamePattern.test(username.trim());
  };

  // Available stores without bots (or the current store being edited)
  const availableStores = editBot
    ? stores.filter(store => store.id === editBot.storeId || !store.hasBot)
    : stores.filter(store => !store.hasBot);

  useEffect(() => {
    if (editBot) {
      // Load existing bot settings for editing with defaults for undefined values
      setSelectedStore(editBot.storeId);
      setSettings({
        ...editBot.settings,
        // Ensure all boolean fields have default values
        startCustomization: {
          showStats: editBot.settings.startCustomization?.showStats ?? true,
          showDescription: editBot.settings.startCustomization?.showDescription ?? true,
          ...editBot.settings.startCustomization
        },
        showPrices: editBot.settings.showPrices ?? true,
        showStock: editBot.settings.showStock ?? true,
        enableSearch: editBot.settings.enableSearch ?? true,
        autoResponses: {
          enabled: editBot.settings.autoResponses?.enabled ?? true,
          workingHours: editBot.settings.autoResponses?.workingHours,
          responses: editBot.settings.autoResponses?.responses ?? []
        },
        notifications: {
          newOrder: editBot.settings.notifications?.newOrder ?? true,
          lowStock: editBot.settings.notifications?.lowStock ?? false,
          paymentConfirmation: editBot.settings.notifications?.paymentConfirmation ?? true,
          orderStatusUpdate: editBot.settings.notifications?.orderStatusUpdate ?? true,
          customNotifications: editBot.settings.notifications?.customNotifications ?? []
        },
        enableAnalytics: editBot.settings.enableAnalytics ?? true,
        enableReferralSystem: editBot.settings.enableReferralSystem ?? false,
        enableReviews: editBot.settings.enableReviews ?? true
      });
      // Skip basic and template steps when editing
      setCurrentStep(2); // Start at customization step
    } else {
      // Reset to first step when creating new bot
      setCurrentStep(0);
    }
  }, [editBot]);

  useEffect(() => {
    if (selectedTemplate) {
      const template = BOT_TEMPLATES.find(t => t.id === selectedTemplate);
      if (template) {
        setSettings({ ...template.settings });
      }
    }
  }, [selectedTemplate]);

  const handleNext = () => {
    if (validateCurrentStep()) {
      setCurrentStep(prev => Math.min(prev + 1, STEPS.length - 1));
    }
  };

  const handleBack = () => {
    // When editing, don't go back before step 2 (customization)
    const minStep = editBot ? 2 : 0;
    setCurrentStep(prev => Math.max(prev - 1, minStep));
  };

  const validateCurrentStep = (): boolean => {
    const errors: Record<string, string> = {};

    switch (STEPS[currentStep].id) {
      case 'basic':
        if (!selectedStore) errors.store = '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω';
        // Skip token validation when editing
        if (!editBot) {
          if (!botToken) errors.token = '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞';
          else if (!isValidBotToken(botToken)) errors.token = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞';
          if (botUsername && !isValidBotUsername(botUsername)) errors.username = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username';
        }
        break;
      case 'template':
        if (!selectedTemplate && !editBot) errors.template = '–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω';
        break;
      case 'customization':
        if (!settings.welcomeMessage.trim()) errors.welcomeMessage = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
        break;
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleSettingsChange = <K extends keyof BotSettings>(
    key: K,
    value: BotSettings[K]
  ) => {
    setSettings(prev => ({ ...prev, [key]: value }));
  };

  const handleCreateBot = async () => {
    if (!validateCurrentStep()) return;

    setLoading(true);
    setError('');

    try {
      const botData = {
        storeId: selectedStore,
        botToken,
        botUsername: botUsername || undefined,
        settings
      };

      if (editBot) {
        await apiClient.put(`/bots/${selectedStore}/settings`, { settings });
      } else {
        await apiClient.post('/bots', botData);
      }

      onBotCreated();
      onClose();
    } catch (error: unknown) {
      const errorMessage = (error as { response?: { data?: { message?: string } } })?.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const renderBasicStep = () => (
    <Box>
      <Typography variant="h6" gutterBottom>
        ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <FormControl fullWidth error={!!validationErrors.store}>
            <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω</InputLabel>
            <Select
              value={selectedStore}
              onChange={(e) => setSelectedStore(e.target.value)}
              label="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω"
              disabled={!!editBot}
            >
              {availableStores.map(store => (
                <MenuItem key={store.id} value={store.id}>
                  {store.name}
                </MenuItem>
              ))}
            </Select>
            {validationErrors.store && (
              <Typography variant="caption" color="error">
                {validationErrors.store}
              </Typography>
            )}
            {availableStores.length === 0 && !editBot && (
              <Alert severity="warning" sx={{ mt: 1 }}
                action={
                  <Button
                    color="inherit"
                    size="small"
                    startIcon={<StoreIcon />}
                    onClick={() => setShowStoreDialog(true)}
                  >
                    –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
                  </Button>
                }
              >
                –£ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ —É–∂–µ –µ—Å—Ç—å –±–æ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞.
              </Alert>
            )}
          </FormControl>
        </Grid>

        {!editBot && (
          <>
            <Grid item xs={12}>
              <Alert severity="info" sx={{ mb: 2 }}>
                <Typography variant="body2">
                  <strong>üìñ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –≤ @BotFather:</strong>
                  <br />1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram
                  <br />2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot
                  <br />3. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ username –±–æ—Ç–∞
                  <br />4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
                </Typography>
              </Alert>
            </Grid>

            <Grid item xs={12}>
              <TextField
                label="–¢–æ–∫–µ–Ω –±–æ—Ç–∞"
                value={botToken}
                onChange={(e) => setBotToken(e.target.value)}
                fullWidth
                required
                error={!!validationErrors.token}
                helperText={validationErrors.token || "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∏—Ç–µ —É @BotFather"}
                placeholder="1234567890:ABCdefGhIJklmNOpqRStuvwXYz"
                InputProps={{
                  style: { fontFamily: 'monospace', fontSize: '0.9rem' }
                }}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                label="Username –±–æ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                value={botUsername}
                onChange={(e) => setBotUsername(e.target.value)}
                fullWidth
                error={!!validationErrors.username}
                helperText={validationErrors.username || "–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"}
                placeholder="my_shop_bot"
              />
            </Grid>
          </>
        )}
      </Grid>
    </Box>
  );

  const renderTemplateStep = () => {
    const handleTemplateSelect = (template: BotTemplate) => {
      setSelectedTemplate(template.id);
      setSettings({ ...template.settings });
    };

    return (
      <Box>
        <BotTemplates
          onSelectTemplate={handleTemplateSelect}
          onClose={() => {}}
        />

        {validationErrors.template && (
          <Alert severity="error" sx={{ mt: 2 }}>
            {validationErrors.template}
          </Alert>
        )}
      </Box>
    );
  };

  const renderCustomizationStep = () => {
    const customization = settings.startCustomization || {};

    const handleCustomizationChange = (field: string, value: unknown) => {
      setSettings(prev => ({
        ...prev,
        startCustomization: {
          ...customization,
          [field]: value
        }
      }));
    };

    const handleButtonChange = (buttonType: string, field: string, value: string) => {
      const button = customization[buttonType as keyof typeof customization] || {};
      handleCustomizationChange(buttonType, {
        ...(typeof button === 'object' ? button : {}),
        [field]: value
      });
    };

    const addExtraButton = () => {
      if (!extraButton.text || (!extraButton.url && !extraButton.callback_data)) return;

      const currentButtons = customization.extraButtons || [];
      handleCustomizationChange('extraButtons', [
        ...currentButtons,
        { ...extraButton }
      ]);
      setExtraButton({ text: '', url: '', callback_data: '' });
    };

    const removeExtraButton = (index: number) => {
      const currentButtons = customization.extraButtons || [];
      handleCustomizationChange('extraButtons', currentButtons.filter((_, i) => i !== index));
    };

    return (
      <Box>
        <Typography variant="h6" gutterBottom>
          üé® –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞
        </Typography>
        <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —è–∑—ã–∫, –≤–∞–ª—é—Ç—É –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        </Typography>

        <Tabs value={0} sx={{ mb: 3, borderBottom: 1, borderColor: 'divider' }}>
          <Tab label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è" />
        </Tabs>

        <Grid container spacing={3}>
          {/* –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è */}
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }}>
              <Chip label="üåç –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è" />
            </Divider>
          </Grid>

          <Grid item xs={12} md={4}>
            <FormControl fullWidth>
              <InputLabel>–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</InputLabel>
              <Select
                value={settings.language}
                onChange={(e) => handleSettingsChange('language', e.target.value)}
                label="–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
              >
                <MenuItem value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</MenuItem>
                <MenuItem value="en">üá¨üáß English</MenuItem>
                <MenuItem value="uk">üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</MenuItem>
                <MenuItem value="es">üá™üá∏ Espa√±ol</MenuItem>
                <MenuItem value="de">üá©üá™ Deutsch</MenuItem>
                <MenuItem value="fr">üá´üá∑ Fran√ßais</MenuItem>
                <MenuItem value="it">üáÆüáπ Italiano</MenuItem>
                <MenuItem value="pt">üáµüáπ Portugu√™s</MenuItem>
                <MenuItem value="tr">üáπüá∑ T√ºrk√ße</MenuItem>
                <MenuItem value="ar">üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©</MenuItem>
                <MenuItem value="zh">üá®üá≥ ‰∏≠Êñá</MenuItem>
                <MenuItem value="ja">üáØüáµ Êó•Êú¨Ë™û</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={4}>
            <FormControl fullWidth>
              <InputLabel>–í–∞–ª—é—Ç–∞</InputLabel>
              <Select
                value={settings.currency}
                onChange={(e) => handleSettingsChange('currency', e.target.value)}
                label="–í–∞–ª—é—Ç–∞"
              >
                <MenuItem value="USD">$ USD - –î–æ–ª–ª–∞—Ä –°–®–ê</MenuItem>
                <MenuItem value="EUR">‚Ç¨ EUR - –ï–≤—Ä–æ</MenuItem>
                <MenuItem value="RUB">‚ÇΩ RUB - –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å</MenuItem>
                <MenuItem value="UAH">‚Ç¥ UAH - –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞</MenuItem>
                <MenuItem value="KZT">‚Ç∏ KZT - –ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ</MenuItem>
                <MenuItem value="GBP">¬£ GBP - –§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤</MenuItem>
                <MenuItem value="TRY">‚Ç∫ TRY - –¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞</MenuItem>
                <MenuItem value="BRL">R$ BRL - –ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} md={4}>
            <FormControl fullWidth>
              <InputLabel>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</InputLabel>
              <Select
                value={settings.timezone}
                onChange={(e) => handleSettingsChange('timezone', e.target.value)}
                label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
              >
                <MenuItem value="UTC">UTC (GMT+0)</MenuItem>
                <MenuItem value="Europe/Moscow">–ú–æ—Å–∫–≤–∞ (GMT+3)</MenuItem>
                <MenuItem value="Europe/Kiev">–ö–∏–µ–≤ (GMT+2)</MenuItem>
                <MenuItem value="Asia/Almaty">–ê–ª–º–∞—Ç—ã (GMT+6)</MenuItem>
                <MenuItem value="Europe/Istanbul">–°—Ç–∞–º–±—É–ª (GMT+3)</MenuItem>
                <MenuItem value="America/New_York">–ù—å—é-–ô–æ—Ä–∫ (GMT-5)</MenuItem>
                <MenuItem value="America/Los_Angeles">–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (GMT-8)</MenuItem>
                <MenuItem value="Asia/Dubai">–î—É–±–∞–π (GMT+4)</MenuItem>
                <MenuItem value="Asia/Tokyo">–¢–æ–∫–∏–æ (GMT+9)</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          {/* –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }}>
              <Chip label="üí¨ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" />
            </Divider>
          </Grid>

          <Grid item xs={12}>
            <TextField
              label="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
              value={settings.welcomeMessage}
              onChange={(e) => handleSettingsChange('welcomeMessage', e.target.value)}
              fullWidth
              multiline
              rows={4}
              required
              error={!!validationErrors.welcomeMessage}
              helperText={validationErrors.welcomeMessage || "–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"}
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              label="–≠–º–æ–¥–∂–∏ –±–æ—Ç–∞"
              value={customization.emoji || 'üõçÔ∏è'}
              onChange={(e) => handleCustomizationChange('emoji', e.target.value)}
              fullWidth
              placeholder="üõçÔ∏è"
              helperText="–ì–ª–∞–≤–Ω—ã–π —Å–∏–º–≤–æ–ª –±–æ—Ç–∞"
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <TextField
              label="URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è —à–∞–ø–∫–∏"
              value={customization.headerImage || ''}
              onChange={(e) => handleCustomizationChange('headerImage', e.target.value)}
              fullWidth
              placeholder="https://example.com/header.jpg"
              helperText="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              InputProps={{
                startAdornment: <ImageIcon sx={{ mr: 1, color: 'action.active' }} />
              }}
            />
          </Grid>

          <Grid item xs={12}>
            <TextField
              label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∞–∫—Ü–∏–∏, –∞–Ω–æ–Ω—Å—ã)"
              value={customization.additionalText || ''}
              onChange={(e) => handleCustomizationChange('additionalText', e.target.value)}
              fullWidth
              multiline
              rows={2}
              placeholder="üî• –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è: —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã!"
              helperText="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö"
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={customization.showStats ?? true}
                  onChange={(e) => handleCustomizationChange('showStats', e.target.checked)}
                />
              }
              label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞"
            />
          </Grid>

          <Grid item xs={12} md={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={customization.showDescription ?? true}
                  onChange={(e) => handleCustomizationChange('showDescription', e.target.checked)}
                />
              }
              label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"
            />
          </Grid>

          {/* –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é */}
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }}>
              <Chip label="üîò –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é" />
            </Divider>
          </Grid>

          <Grid item xs={12} md={4}>
            <TextField
              label="–ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"
              value={customization.catalogButton?.text || 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'}
              onChange={(e) => handleButtonChange('catalogButton', 'text', e.target.value)}
              fullWidth
              helperText="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"
            />
          </Grid>

          <Grid item xs={12} md={4}>
            <TextField
              label="–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è"
              value={customization.profileButton?.text || 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'}
              onChange={(e) => handleButtonChange('profileButton', 'text', e.target.value)}
              fullWidth
              helperText="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            />
          </Grid>

          <Grid item xs={12} md={4}>
            <TextField
              label="–ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏"
              value={customization.helpButton?.text || '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'}
              onChange={(e) => handleButtonChange('helpButton', 'text', e.target.value)}
              fullWidth
              helperText="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
            />
          </Grid>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */}
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }}>
              <Chip label="‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏" />
            </Divider>
          </Grid>

          {customization.extraButtons && customization.extraButtons.length > 0 && (
            <Grid item xs={12}>
              <List>
                {customization.extraButtons.map((btn, index) => (
                  <ListItem key={`extra-button-${index}-${btn.text}`} sx={{ bgcolor: 'action.hover', mb: 1, borderRadius: 1 }}>
                    <ListItemIcon>
                      <AddIcon />
                    </ListItemIcon>
                    <ListItemText
                      primary={btn.text}
                      secondary={btn.url || btn.callback_data}
                    />
                    <ListItemSecondaryAction>
                      <IconButton edge="end" onClick={() => removeExtraButton(index)} color="error">
                        <DeleteIcon />
                      </IconButton>
                    </ListItemSecondaryAction>
                  </ListItem>
                ))}
              </List>
            </Grid>
          )}

          <Grid item xs={12} md={5}>
            <TextField
              label="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"
              value={extraButton.text}
              onChange={(e) => setExtraButton({ ...extraButton, text: e.target.value })}
              fullWidth
              placeholder="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª"
            />
          </Grid>

          <Grid item xs={12} md={5}>
            <TextField
              label="URL (–¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫)"
              value={extraButton.url}
              onChange={(e) => setExtraButton({ ...extraButton, url: e.target.value, callback_data: '' })}
              fullWidth
              placeholder="https://t.me/your_channel"
            />
          </Grid>

          <Grid item xs={12} md={2}>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={addExtraButton}
              disabled={!extraButton.text || (!extraButton.url && !extraButton.callback_data)}
              fullWidth
              sx={{ height: '56px' }}
            >
              –î–æ–±–∞–≤–∏—Ç—å
            </Button>
          </Grid>

          {/* –ü—Ä–µ–≤—å—é */}
          <Grid item xs={12}>
            <Divider sx={{ my: 2 }}>
              <Chip label="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞" icon={<PreviewIcon />} />
            </Divider>
          </Grid>

          <Grid item xs={12}>
            <Paper sx={{
              p: 3,
              bgcolor: theme.palette.mode === 'dark' ? '#1e1e1e' : 'background.default',
              border: '1px solid',
              borderColor: 'divider',
              color: theme.palette.mode === 'dark' ? '#fff' : 'text.primary'
            }}>
              <Typography variant="body2" component="div" sx={{ whiteSpace: 'pre-wrap' }}>
                {customization.emoji || 'üõçÔ∏è'} <strong>{settings.welcomeMessage || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'}</strong>
                {'\n\n'}
                {(customization.showDescription ?? true) && 'üìù –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π\n\n'}
                {customization.additionalText && `${customization.additionalText}\n\n`}
                {(customization.showStats ?? true) && 'üìä –û –º–∞–≥–∞–∑–∏–Ω–µ:\n‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏: 120\n‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 450\n‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: 4.8/5\n\n'}
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                {'\n\n'}
                <Box component="div" sx={{ mt: 2 }}>
                  <Chip
                    label={customization.catalogButton?.text || 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'}
                    sx={{ m: 0.5, bgcolor: 'primary.main', color: 'white' }}
                  />
                  <Chip
                    label={customization.profileButton?.text || 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'}
                    sx={{ m: 0.5, bgcolor: 'primary.main', color: 'white' }}
                  />
                  <Chip
                    label={customization.helpButton?.text || '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'}
                    sx={{ m: 0.5, bgcolor: 'primary.main', color: 'white' }}
                  />
                  {customization.extraButtons?.map((btn, i) => (
                    <Chip
                      key={`extra-btn-${i}`}
                      label={btn.text}
                      sx={{ m: 0.5, bgcolor: 'secondary.main', color: 'white' }}
                    />
                  ))}
                </Box>
              </Typography>
            </Paper>
          </Grid>

          <Grid item xs={12}>
            <Alert severity="info">
              <Typography variant="body2">
                <strong>üí° –°–æ–≤–µ—Ç:</strong> –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É –±—Ä–µ–Ω–¥—É.
                –î–æ–±–∞–≤—å—Ç–µ —è–∑—ã–∫–∏ –∏ –≤–∞–ª—é—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ä—ã–Ω–∫–µ.
              </Typography>
            </Alert>
          </Grid>
        </Grid>

        {validationErrors.customization && (
          <Alert severity="error" sx={{ mt: 2 }}>
            {validationErrors.customization}
          </Alert>
        )}
      </Box>
    );
  };


  const renderResponsesStep = () => {
    const addFaq = () => {
      if (!newFaq.trigger.trim() || !newFaq.response.trim()) return;

      const newResponse: AutoResponse = {
        id: Date.now().toString(),
        trigger: newFaq.trigger.trim(),
        response: newFaq.response.trim(),
        enabled: true
      };

      handleSettingsChange('autoResponses', {
        ...settings.autoResponses,
        responses: [...settings.autoResponses.responses, newResponse]
      });

      setNewFaq({ trigger: '', response: '' });
    };

    const deleteFaq = (id: string) => {
      handleSettingsChange('autoResponses', {
        ...settings.autoResponses,
        responses: settings.autoResponses.responses.filter(r => r.id !== id)
      });
    };

    const startEdit = (response: AutoResponse) => {
      setEditingFaq(response.id);
      setEditingData({ trigger: response.trigger, response: response.response });
    };

    const saveEdit = (id: string) => {
      const updatedResponses = settings.autoResponses.responses.map(r =>
        r.id === id ? { ...r, trigger: editingData.trigger, response: editingData.response } : r
      );
      handleSettingsChange('autoResponses', {
        ...settings.autoResponses,
        responses: updatedResponses
      });
      setEditingFaq(null);
    };

    const toggleFaq = (id: string, enabled: boolean) => {
      const updatedResponses = settings.autoResponses.responses.map(r =>
        r.id === id ? { ...r, enabled } : r
      );
      handleSettingsChange('autoResponses', {
        ...settings.autoResponses,
        responses: updatedResponses
      });
    };

    return (
      <Box>
        <Typography variant="h6" gutterBottom>
          üí¨ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ FAQ
        </Typography>
        <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        </Typography>

        <FormControlLabel
          control={
            <Switch
              checked={settings.autoResponses.enabled}
              onChange={(e) => handleSettingsChange('autoResponses', {
                ...settings.autoResponses,
                enabled: e.target.checked
              })}
            />
          }
          label="–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ FAQ"
          sx={{ mb: 3 }}
        />

        {settings.autoResponses.enabled && (
          <Grid container spacing={3}>
            {/* –†–∞–±–æ—á–∏–µ —á–∞—Å—ã */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }}>
                <Chip label="‚è∞ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" />
              </Divider>
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                label="–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"
                type="time"
                value={settings.autoResponses.workingHours?.start || '09:00'}
                onChange={(e) => handleSettingsChange('autoResponses', {
                  ...settings.autoResponses,
                  workingHours: {
                    ...settings.autoResponses.workingHours,
                    start: e.target.value,
                    end: settings.autoResponses.workingHours?.end || '18:00',
                    timezone: settings.autoResponses.workingHours?.timezone || 'UTC'
                  }
                })}
                fullWidth
                InputLabelProps={{ shrink: true }}
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                label="–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"
                type="time"
                value={settings.autoResponses.workingHours?.end || '18:00'}
                onChange={(e) => handleSettingsChange('autoResponses', {
                  ...settings.autoResponses,
                  workingHours: {
                    ...settings.autoResponses.workingHours,
                    start: settings.autoResponses.workingHours?.start || '09:00',
                    end: e.target.value,
                    timezone: settings.autoResponses.workingHours?.timezone || 'UTC'
                  }
                })}
                fullWidth
                InputLabelProps={{ shrink: true }}
              />
            </Grid>

            <Grid item xs={12} md={4}>
              <FormControl fullWidth>
                <InputLabel>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</InputLabel>
                <Select
                  value={settings.autoResponses.workingHours?.timezone || 'UTC'}
                  onChange={(e) => handleSettingsChange('autoResponses', {
                    ...settings.autoResponses,
                    workingHours: {
                      ...settings.autoResponses.workingHours,
                      start: settings.autoResponses.workingHours?.start || '09:00',
                      end: settings.autoResponses.workingHours?.end || '18:00',
                      timezone: e.target.value
                    }
                  })}
                  label="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
                >
                  <MenuItem value="UTC">UTC</MenuItem>
                  <MenuItem value="Europe/Moscow">–ú–æ—Å–∫–≤–∞</MenuItem>
                  <MenuItem value="Europe/Kiev">–ö–∏–µ–≤</MenuItem>
                  <MenuItem value="Asia/Almaty">–ê–ª–º–∞—Ç—ã</MenuItem>
                  <MenuItem value="Europe/Istanbul">–°—Ç–∞–º–±—É–ª</MenuItem>
                  <MenuItem value="America/New_York">–ù—å—é-–ô–æ—Ä–∫</MenuItem>
                  <MenuItem value="America/Los_Angeles">–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å</MenuItem>
                  <MenuItem value="Asia/Dubai">–î—É–±–∞–π</MenuItem>
                  <MenuItem value="Asia/Tokyo">–¢–æ–∫–∏–æ</MenuItem>
                </Select>
              </FormControl>
            </Grid>

            {/* FAQ —Å–ø–∏—Å–æ–∫ */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }}>
                <Chip label="‚ùì –°–ø–∏—Å–æ–∫ FAQ" />
              </Divider>
            </Grid>

            {settings.autoResponses.responses.length > 0 ? (
              <Grid item xs={12}>
                <List>
                  {settings.autoResponses.responses.map((response) => (
                    <ListItem
                      key={response.id}
                      sx={{
                        bgcolor: response.enabled ? 'action.hover' : 'action.disabledBackground',
                        mb: 1,
                        borderRadius: 1,
                        border: '1px solid',
                        borderColor: 'divider'
                      }}
                    >
                      {editingFaq === response.id ? (
                        <Box sx={{ width: '100%' }}>
                          <Grid container spacing={2}>
                            <Grid item xs={12} md={4}>
                              <TextField
                                label="–¢—Ä–∏–≥–≥–µ—Ä (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)"
                                value={editingData.trigger}
                                onChange={(e) => setEditingData({ ...editingData, trigger: e.target.value })}
                                fullWidth
                                size="small"
                              />
                            </Grid>
                            <Grid item xs={12} md={8}>
                              <TextField
                                label="–û—Ç–≤–µ—Ç"
                                value={editingData.response}
                                onChange={(e) => setEditingData({ ...editingData, response: e.target.value })}
                                fullWidth
                                size="small"
                                multiline
                                rows={2}
                              />
                            </Grid>
                            <Grid item xs={12}>
                              <Box display="flex" gap={1}>
                                <Button
                                  key="save"
                                  variant="contained"
                                  size="small"
                                  startIcon={<CheckIcon />}
                                  onClick={() => saveEdit(response.id)}
                                >
                                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                </Button>
                                <Button
                                  key="cancel"
                                  variant="outlined"
                                  size="small"
                                  onClick={() => setEditingFaq(null)}
                                >
                                  –û—Ç–º–µ–Ω–∞
                                </Button>
                              </Box>
                            </Grid>
                          </Grid>
                        </Box>
                      ) : (
                        <>
                          <ListItemIcon>
                            <ChatIcon color={response.enabled ? 'primary' : 'disabled'} />
                          </ListItemIcon>
                          <ListItemText
                            primary={
                              <Box display="flex" alignItems="center" gap={1}>
                                <Chip key="trigger" label={response.trigger} size="small" color="primary" variant="outlined" />
                                {!response.enabled && <Chip key="disabled" label="–í—ã–∫–ª—é—á–µ–Ω–æ" size="small" color="default" />}
                              </Box>
                            }
                            secondary={response.response}
                          />
                          <ListItemSecondaryAction>
                            <Box display="flex" gap={1}>
                              <Tooltip key="toggle" title={response.enabled ? "–û—Ç–∫–ª—é—á–∏—Ç—å" : "–í–∫–ª—é—á–∏—Ç—å"}>
                                <Switch
                                  checked={response.enabled}
                                  onChange={(e) => toggleFaq(response.id, e.target.checked)}
                                  size="small"
                                />
                              </Tooltip>
                              <Tooltip key="edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                <IconButton
                                  edge="end"
                                  onClick={() => startEdit(response)}
                                  size="small"
                                >
                                  <EditIcon />
                                </IconButton>
                              </Tooltip>
                              <Tooltip key="delete" title="–£–¥–∞–ª–∏—Ç—å">
                                <IconButton
                                  edge="end"
                                  onClick={() => deleteFaq(response.id)}
                                  color="error"
                                  size="small"
                                >
                                  <DeleteIcon />
                                </IconButton>
                              </Tooltip>
                            </Box>
                          </ListItemSecondaryAction>
                        </>
                      )}
                    </ListItem>
                  ))}
                </List>
              </Grid>
            ) : (
              <Grid item xs={12}>
                <Alert severity="info">
                  <Typography variant="body2">
                    –ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ FAQ. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –Ω–∏–∂–µ.
                  </Typography>
                </Alert>
              </Grid>
            )}

            {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ FAQ */}
            <Grid item xs={12}>
              <Divider sx={{ my: 2 }}>
                <Chip label="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π FAQ" />
              </Divider>
            </Grid>

            <Grid item xs={12} md={4}>
              <TextField
                label="–¢—Ä–∏–≥–≥–µ—Ä (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)"
                value={newFaq.trigger}
                onChange={(e) => setNewFaq({ ...newFaq, trigger: e.target.value })}
                fullWidth
                placeholder="–ø–æ–º–æ—â—å, –¥–æ—Å—Ç–∞–≤–∫–∞, –æ–ø–ª–∞—Ç–∞..."
                helperText="–°–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞, –∫–æ—Ç–æ—Ä—É—é –∏—â–µ—Ç –±–æ—Ç"
              />
            </Grid>

            <Grid item xs={12} md={6}>
              <TextField
                label="–û—Ç–≤–µ—Ç –±–æ—Ç–∞"
                value={newFaq.response}
                onChange={(e) => setNewFaq({ ...newFaq, response: e.target.value })}
                fullWidth
                multiline
                rows={3}
                placeholder="–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                helperText="–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞"
              />
            </Grid>

            <Grid item xs={12} md={2}>
              <Button
                variant="contained"
                startIcon={<AddIcon />}
                onClick={addFaq}
                disabled={!newFaq.trigger.trim() || !newFaq.response.trim()}
                fullWidth
                sx={{ height: '56px' }}
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </Button>
            </Grid>

            <Grid item xs={12}>
              <Alert severity="info">
                <Typography variant="body2">
                  <strong>üí° –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã:</strong>
                  <br />‚Ä¢ –ë–æ—Ç –∏—â–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                  <br />‚Ä¢ –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                  <br />‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ FAQ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                  <br />‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ FAQ –Ω–µ –±—É–¥—É—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
                  <br />‚Ä¢ –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                </Typography>
              </Alert>
            </Grid>
          </Grid>
        )}
      </Box>
    );
  };

  const renderPaymentStep = () => (
    <Box>
      <Typography variant="h6" gutterBottom>
        üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã
      </Typography>
      <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –∏ P2P —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
      </Typography>

      <Grid container spacing={3}>
        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ */}
        <Grid item xs={12}>
          <Divider sx={{ my: 2 }}>
            <Chip label="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ" />
          </Divider>
        </Grid>

        <Grid item xs={12}>
          <TextField
            label="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤"
            value={settings.paymentInstructions}
            onChange={(e) => handleSettingsChange('paymentInstructions', e.target.value)}
            fullWidth
            multiline
            rows={4}
            placeholder="–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞..."
            helperText="–≠—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–≤–∏–¥—è—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"
          />
        </Grid>

        {/* P2P –†–µ–∫–≤–∏–∑–∏—Ç—ã */}
        <Grid item xs={12}>
          <Divider sx={{ my: 2 }}>
            <Chip label="üí∞ P2P –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã" />
          </Divider>
        </Grid>

        <Grid item xs={12}>
          <Alert severity="warning" sx={{ mb: 2 }}>
            <Typography variant="body2">
              <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong> –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–æ–≤.
              –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.
            </Typography>
          </Alert>
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
            placeholder="1234 5678 9012 3456"
            value={settings.paymentRequisites?.card || ''}
            onChange={(e) => handleSettingsChange('paymentRequisites', {
              ...settings.paymentRequisites,
              card: e.target.value
            })}
            helperText="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="–ë–∞–Ω–∫"
            placeholder="–°–±–µ—Ä–±–∞–Ω–∫, –í–¢–ë, –¢–∏–Ω—å–∫–æ—Ñ—Ñ..."
            value={settings.paymentRequisites?.bank || ''}
            onChange={(e) => handleSettingsChange('paymentRequisites', {
              ...settings.paymentRequisites,
              bank: e.target.value
            })}
            helperText="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞-—ç–º–∏—Ç–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã"
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
            placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            value={settings.paymentRequisites?.receiver || ''}
            onChange={(e) => handleSettingsChange('paymentRequisites', {
              ...settings.paymentRequisites,
              receiver: e.target.value
            })}
            helperText="–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞—Ä—Ç—ã"
          />
        </Grid>

        <Grid item xs={12} md={6}>
          <TextField
            fullWidth
            label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É"
            placeholder="–ó–∞–∫–∞–∑ ‚Ññ..."
            value={settings.paymentRequisites?.comment || ''}
            onChange={(e) => handleSettingsChange('paymentRequisites', {
              ...settings.paymentRequisites,
              comment: e.target.value
            })}
            helperText="–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          />
        </Grid>

        {/* –ü—Ä–µ–≤—å—é —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ */}
        <Grid item xs={12}>
          <Divider sx={{ my: 2 }}>
            <Chip label="üëÄ –ö–∞–∫ —ç—Ç–æ —É–≤–∏–¥—è—Ç –∫–ª–∏–µ–Ω—Ç—ã" icon={<PreviewIcon />} />
          </Divider>
        </Grid>

        <Grid item xs={12}>
          <Paper sx={{ p: 3, bgcolor: 'background.default', border: '1px solid', borderColor: 'divider' }}>
            <Typography variant="subtitle1" gutterBottom fontWeight="bold">
              üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:
            </Typography>
            <Typography variant="body2" component="div" sx={{ mt: 2, fontFamily: 'monospace' }}>
              {settings.paymentRequisites?.card ? (
                <>
                  <strong>–ö–∞—Ä—Ç–∞:</strong> {settings.paymentRequisites.card}<br />
                  {settings.paymentRequisites.bank && (
                    <><strong>–ë–∞–Ω–∫:</strong> {settings.paymentRequisites.bank}<br /></>
                  )}
                  {settings.paymentRequisites.receiver && (
                    <><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> {settings.paymentRequisites.receiver}<br /></>
                  )}
                  {settings.paymentRequisites.comment && (
                    <><strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {settings.paymentRequisites.comment}<br /></>
                  )}
                  <Box sx={{ mt: 2, p: 2, bgcolor: 'action.hover', borderRadius: 1 }}>
                    <Typography variant="body2">
                      {settings.paymentInstructions || '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –Ω–µ –∑–∞–¥–∞–Ω—ã'}
                    </Typography>
                  </Box>
                </>
              ) : (
                <Alert severity="info">
                  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã—à–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                </Alert>
              )}
            </Typography>
          </Paper>
        </Grid>

        <Grid item xs={12}>
          <Alert severity="info">
            <Typography variant="body2">
              <strong>üí° –°–æ–≤–µ—Ç:</strong> –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö,
              –Ω–∞–ø—Ä–∏–º–µ—Ä: –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –∏ —Ç.–¥.
            </Typography>
          </Alert>
        </Grid>
      </Grid>
    </Box>
  );

  const renderNotificationsStep = () => (
    <Box>
      <Typography variant="h6" gutterBottom>
        üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      </Typography>
      <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
        –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –±–æ—Ç–µ
      </Typography>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Divider sx={{ my: 2 }}>
            <Chip label="‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" />
          </Divider>
        </Grid>

        <Grid item xs={12} md={6}>
          <FormControlLabel
            control={
              <Switch
                checked={settings.notifications.newOrder}
                onChange={(e) => handleSettingsChange('notifications', {
                  ...settings.notifications,
                  newOrder: e.target.checked
                })}
              />
            }
            label="üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"
          />
          <Typography variant="caption" color="textSecondary" display="block" sx={{ ml: 4 }}>
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
          </Typography>
        </Grid>

        <Grid item xs={12} md={6}>
          <FormControlLabel
            control={
              <Switch
                checked={settings.notifications.paymentConfirmation}
                onChange={(e) => handleSettingsChange('notifications', {
                  ...settings.notifications,
                  paymentConfirmation: e.target.checked
                })}
              />
            }
            label="üí∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"
          />
          <Typography variant="caption" color="textSecondary" display="block" sx={{ ml: 4 }}>
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
          </Typography>
        </Grid>

        <Grid item xs={12} md={6}>
          <FormControlLabel
            control={
              <Switch
                checked={settings.notifications.orderStatusUpdate}
                onChange={(e) => handleSettingsChange('notifications', {
                  ...settings.notifications,
                  orderStatusUpdate: e.target.checked
                })}
              />
            }
            label="üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"
          />
          <Typography variant="caption" color="textSecondary" display="block" sx={{ ml: 4 }}>
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
          </Typography>
        </Grid>

        <Grid item xs={12} md={6}>
          <FormControlLabel
            control={
              <Switch
                checked={settings.notifications.lowStock}
                onChange={(e) => handleSettingsChange('notifications', {
                  ...settings.notifications,
                  lowStock: e.target.checked
                })}
              />
            }
            label="‚ö†Ô∏è –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"
          />
          <Typography variant="caption" color="textSecondary" display="block" sx={{ ml: 4 }}>
            –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞
          </Typography>
        </Grid>

        <Grid item xs={12}>
          <Alert severity="info">
            <Typography variant="body2">
              <strong>üí° –°–æ–≤–µ—Ç:</strong> –í–∫–ª—é—á–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
              —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ª–∏—à–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
            </Typography>
          </Alert>
        </Grid>
      </Grid>
    </Box>
  );

  const renderPreviewStep = () => {
    const customization = settings.startCustomization || {};

    return (
      <Box>
        <Typography variant="h6" gutterBottom>
          üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–æ—Ç–∞
        </Typography>
        <Typography variant="body2" color="textSecondary" sx={{ mb: 3 }}>
          –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ –≤–∞—à –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        </Typography>

        <Grid container spacing={3}>
          {/* –°–∏–º—É–ª—è—Ü–∏—è Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
          <Grid item xs={12} lg={6}>
            <Paper
              elevation={3}
              sx={{
                p: 0,
                maxWidth: 450,
                mx: 'auto',
                bgcolor: theme.palette.mode === 'dark' ? '#1e1e1e' : '#fff',
                borderRadius: 3,
                overflow: 'hidden'
              }}
            >
              {/* –•–µ–¥–µ—Ä –±–æ—Ç–∞ */}
              <Box
                sx={{
                  p: 2,
                  bgcolor: 'primary.main',
                  color: 'white',
                  display: 'flex',
                  alignItems: 'center',
                  gap: 2
                }}
              >
                <Avatar sx={{ bgcolor: 'white', color: 'primary.main' }}>
                  {customization.emoji || 'ü§ñ'}
                </Avatar>
                <Box>
                  <Typography variant="h6">
                    {botUsername || '–í–∞—à –±–æ—Ç'}
                  </Typography>
                  <Typography variant="caption">
                    –æ–Ω–ª–∞–π–Ω ‚Ä¢ –±–æ—Ç
                  </Typography>
                </Box>
              </Box>

              {/* –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ */}
              <Box sx={{ p: 3, bgcolor: theme.palette.mode === 'dark' ? '#2a2a2a' : 'grey.50' }}>
                {customization.headerImage && (
                  <Box
                    component="img"
                    src={customization.headerImage}
                    sx={{
                      width: '100%',
                      borderRadius: 2,
                      mb: 2,
                      maxHeight: 200,
                      objectFit: 'cover'
                    }}
                    alt="Header"
                    onError={(e: React.SyntheticEvent<HTMLImageElement, Event>) => { (e.target as HTMLImageElement).style.display = 'none'; }}
                  />
                )}

                <Paper sx={{
                  p: 2,
                  bgcolor: theme.palette.mode === 'dark' ? '#363636' : 'white',
                  borderRadius: 2,
                  color: theme.palette.mode === 'dark' ? '#fff' : 'text.primary'
                }}>
                  <Typography variant="body2" component="div" sx={{ whiteSpace: 'pre-wrap' }}>
                    {customization.emoji || 'üõçÔ∏è'} <strong>{settings.welcomeMessage || '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'}</strong>
                    {'\n\n'}
                    {(customization.showDescription ?? true) && 'üìù –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω —Å –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π\n\n'}
                    {customization.additionalText && `${customization.additionalText}\n\n`}
                    {(customization.showStats ?? true) && 'üìä –û –º–∞–≥–∞–∑–∏–Ω–µ:\n‚Ä¢ üõçÔ∏è –¢–æ–≤–∞—Ä–æ–≤: 120\n‚Ä¢ ‚úÖ –ó–∞–∫–∞–∑–æ–≤: 450\n‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: 4.8/5\n\n'}
                    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                    {'\n\n'}
                    <Box component="div" sx={{ mt: 2 }}>
                      <Chip
                        label={customization.catalogButton?.text || 'üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤'}
                        sx={{ m: 0.5, bgcolor: 'primary.main', color: 'white' }}
                      />
                      <Chip
                        label={customization.profileButton?.text || 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'}
                        sx={{ m: 0.5, bgcolor: 'primary.main', color: 'white' }}
                      />
                      <Chip
                        label={customization.helpButton?.text || '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'}
                        sx={{ m: 0.5, bgcolor: 'primary.main', color: 'white' }}
                      />
                      {customization.extraButtons?.map((btn, i) => (
                        <Chip
                          key={`extra-btn-${i}`}
                          label={btn.text}
                          sx={{ m: 0.5, bgcolor: 'secondary.main', color: 'white' }}
                        />
                      ))}
                    </Box>
                  </Typography>
                </Paper>
              </Box>
            </Paper>
          </Grid>

          {/* –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
          <Grid item xs={12} lg={6}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  üìã –°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                </Typography>

                <List>
                  <ListItem key="summary-basic">
                    <ListItemIcon><SettingsIcon color="primary" /></ListItemIcon>
                    <ListItemText
                      primary="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                      secondary={`–Ø–∑—ã–∫: ${settings.language.toUpperCase()} ‚Ä¢ –í–∞–ª—é—Ç–∞: ${settings.currency}`}
                    />
                  </ListItem>

                  <ListItem key="summary-design">
                    <ListItemIcon><DesignIcon color="primary" /></ListItemIcon>
                    <ListItemText
                      primary="–í–Ω–µ—à–Ω–∏–π –≤–∏–¥"
                      secondary="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"
                    />
                  </ListItem>

                  <ListItem key="summary-autoresponses">
                    <ListItemIcon><ChatIcon color="primary" /></ListItemIcon>
                    <ListItemText
                      primary="–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã"
                      secondary={settings.autoResponses.enabled
                        ? `–í–∫–ª—é—á–µ–Ω–æ ‚Ä¢ ${settings.autoResponses.responses.length} –æ—Ç–≤–µ—Ç–æ–≤`
                        : '–í—ã–∫–ª—é—á–µ–Ω–æ'
                      }
                    />
                  </ListItem>

                  <ListItem key="summary-notifications">
                    <ListItemIcon><NotificationIcon color="primary" /></ListItemIcon>
                    <ListItemText
                      primary="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                      secondary={`${[
                        settings.notifications.newOrder && '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
                        settings.notifications.paymentConfirmation && '–û–ø–ª–∞—Ç–∞',
                        settings.notifications.orderStatusUpdate && '–°—Ç–∞—Ç—É—Å—ã',
                        settings.notifications.lowStock && '–û—Å—Ç–∞—Ç–∫–∏'
                      ].filter(Boolean).join(', ') || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}`}
                    />
                  </ListItem>

                  <ListItem key="summary-payment">
                    <ListItemIcon><PaymentIcon color="primary" /></ListItemIcon>
                    <ListItemText
                      primary="–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã"
                      secondary={settings.paymentRequisites?.card
                        ? `–ö–∞—Ä—Ç–∞: ${settings.paymentRequisites.card.slice(0, 4)}...${settings.paymentRequisites.card.slice(-4)}`
                        : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                      }
                    />
                  </ListItem>
                </List>

                <Divider sx={{ my: 2 }} />

                <Alert severity="success">
                  <Typography variant="body2">
                    <strong>‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é!</strong>
                    <br />–í–∞—à –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ &quot;–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞&quot; –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
                  </Typography>
                </Alert>

                <Alert severity="info" sx={{ mt: 2 }}>
                  <Typography variant="body2">
                    <strong>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong>
                    <br />‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                    <br />‚Ä¢ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞
                    <br />‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
                  </Typography>
                </Alert>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>
    );
  };

  const renderStepContent = () => {
    switch (STEPS[currentStep].id) {
      case 'basic': return renderBasicStep();
      case 'template': return renderTemplateStep();
      case 'customization': return renderCustomizationStep();
      case 'responses': return renderResponsesStep();
      case 'payment': return renderPaymentStep();
      case 'notifications': return renderNotificationsStep();
      case 'preview': return renderPreviewStep();
      default: return null;
    }
  };

  const isLastStep = currentStep === STEPS.length - 1;
  const isFirstStep = currentStep === 0;

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="lg"
      fullWidth
      PaperProps={{ sx: { minHeight: '80vh' } }}
    >
      <DialogTitle>
        <Box display="flex" alignItems="center" gap={2}>
          <BotIcon />
          {editBot ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞' : '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Telegram –±–æ—Ç–∞'}
        </Box>
      </DialogTitle>

      <DialogContent>
        {error && (
          <Alert severity="error" onClose={() => setError('')} sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <Box display="flex" gap={3}>
          {/* Progress Steps */}
          <Box width={280} flexShrink={0}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –®–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è
                </Typography>

                <List dense>
                  {STEPS.map((step, index) => (
                    <ListItem
                      key={step.id}
                      button
                      selected={currentStep === index}
                      onClick={() => index <= currentStep && setCurrentStep(index)}
                      disabled={index > currentStep}
                    >
                      <ListItemIcon>
                        {step.icon}
                      </ListItemIcon>
                      <ListItemText
                        primary={step.label}
                        primaryTypographyProps={{
                          color: currentStep === index ? 'primary' : 'text.primary',
                          fontWeight: currentStep === index ? 600 : 400
                        }}
                      />
                      {index < currentStep && (
                        <ListItemSecondaryAction>
                          <CheckIcon color="success" />
                        </ListItemSecondaryAction>
                      )}
                    </ListItem>
                  ))}
                </List>

                <LinearProgress
                  variant="determinate"
                  value={(currentStep + 1) / STEPS.length * 100}
                  sx={{ mt: 2 }}
                />
              </CardContent>
            </Card>
          </Box>

          {/* Step Content */}
          <Box flex={1}>
            <Card sx={{ minHeight: 500 }}>
              <CardContent sx={{ p: 4 }}>
                {renderStepContent()}
              </CardContent>
            </Card>
          </Box>
        </Box>
      </DialogContent>

      <DialogActions sx={{ p: 3, gap: 1 }}>
        <Button onClick={onClose} disabled={loading}>
          –û—Ç–º–µ–Ω–∞
        </Button>

        {!isFirstStep && (
          <Button onClick={handleBack} disabled={loading}>
            –ù–∞–∑–∞–¥
          </Button>
        )}

        {!isLastStep ? (
          <Button
            variant="contained"
            onClick={handleNext}
            disabled={loading}
          >
            –î–∞–ª–µ–µ
          </Button>
        ) : (
          <Button
            variant="contained"
            onClick={handleCreateBot}
            disabled={loading || Object.keys(validationErrors).length > 0}
            startIcon={loading ? <CircularProgress size={16} /> : null}
          >
            {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : editBot ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞'}
          </Button>
        )}
      </DialogActions>

      <StoreDialog
        open={showStoreDialog}
        onClose={() => setShowStoreDialog(false)}
        onSuccess={() => {
          setShowStoreDialog(false);
          onBotCreated(); // Reload stores
        }}
      />
    </Dialog>
  );
};

export default BotConstructor;
