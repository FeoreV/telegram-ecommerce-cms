import {
    CheckCircle as ActiveIcon,
    Add as AddIcon,
    SmartToy as BotIcon,
    Build as ConstructorIcon,
    Delete as DeleteIcon,
    Error as ErrorIcon,
    Cancel as InactiveIcon,
    RestartAlt as RestartIcon,
    Settings as SettingsIcon,
    Timeline as StatsIcon,
    Store as StoreIcon,
} from '@mui/icons-material';
import {
    Alert,
    Box,
    Button,
    Card,
    CardContent,
    CircularProgress,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    Fab,
    Grid,
    IconButton,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    TextField,
    Tooltip,
    Typography
} from '@mui/material';
import React, { useEffect, useState } from 'react';
import { useSocket } from '../../contexts/SocketContext';
import { apiClient } from '../../services/apiClient';
import { Store } from '../../types';
import StoreDialog from '../stores/StoreDialog';
import BotConstructor, { BotSettings } from './BotConstructor';

interface Bot {
  storeId: string;
  storeName: string;
  storeSlug: string;
  botUsername?: string;
  botStatus: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';
  botCreatedAt?: string;
  botLastActive?: string;
  botSettings?: BotSettings;
  hasToken: boolean;
  isActive: boolean;
  messageCount: number;
  lastActivity?: string;
  orderCount: number;
  productCount: number;
}

interface BotStats {
  totalBots: number;
  activeBots: number;
  inactiveBots: number;
  suspendedBots: number;
  totalMessages: number;
}

interface CreateBotDialogProps {
  open: boolean;
  onClose: () => void;
  stores: Array<{ id: string; name: string; hasBot: boolean }>;
  onBotCreated: () => void;
}

const CreateBotDialog: React.FC<CreateBotDialogProps> = ({
  open,
  onClose,
  stores,
  onBotCreated
}) => {
  const [storeId, setStoreId] = useState('');
  const [botToken, setBotToken] = useState('');
  const [botUsername, setBotUsername] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showStoreDialog, setShowStoreDialog] = useState(false);

  // Validation functions
  const isValidBotToken = (token: string): boolean => {
    const tokenPattern = /^\d+:[A-Za-z0-9_-]+$/;
    return tokenPattern.test(token.trim());
  };

  const isValidBotUsername = (username: string): boolean => {
    const usernamePattern = /^[a-zA-Z][a-zA-Z0-9_]*bot$/i;
    return usernamePattern.test(username.trim());
  };

  const handleSubmit = async () => {
    if (!storeId || !botToken) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      return;
    }

    // Validate bot token
    if (!isValidBotToken(botToken)) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: —Ü–∏—Ñ—Ä—ã:–±—É–∫–≤—ã_—Å–∏–º–≤–æ–ª—ã');
      return;
    }

    // Validate bot username if provided
    if (botUsername && !isValidBotUsername(botUsername)) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–º—è –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot"');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await apiClient.post('/bots', {
        storeId,
        botToken,
        botUsername: botUsername || undefined,
      });

      if (response.data.success) {
        onBotCreated();
        onClose();
        setStoreId('');
        setBotToken('');
        setBotUsername('');
      }
    } catch (error: unknown) {
      const errorMessage = (error as { response?: { data?: { message?: string } } })?.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const availableStores = stores.filter(store => !store.hasBot);

  return (
    <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box display="flex" alignItems="center" gap={1}>
          <BotIcon />
          –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        </Box>
      </DialogTitle>
      <DialogContent>
        <Box mt={2} display="flex" flexDirection="column" gap={3}>
          {error && (
            <Alert severity="error" onClose={() => setError('')}>
              {error}
            </Alert>
          )}

          <Alert severity="info" sx={{ mb: 2 }}>
            <Typography variant="body2">
              <strong>üìñ –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:</strong>
              <br />
              <br />
              <strong>1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram</strong>
              <br />
              ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ @BotFather –≤ Telegram
              <br />
              ‚Ä¢ –≠—Ç–æ—Ç –±–æ—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –±–æ—Ç–∞–º–∏ –≤ Telegram
              <br />
              <br />
              <strong>2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞</strong>
              <br />
              ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/newbot</code>
              <br />
              ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: &quot;–ú–æ–π –ú–∞–≥–∞–∑–∏–Ω&quot;)
              <br />
              ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: &quot;MyStoreBot&quot;)
              <br />
              ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
              <br />
              ‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ (privacy mode) –¥–ª—è –±–æ—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/setprivacy</code>
              <br />
              ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
              <br />
              ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ &quot;Disable&quot;
              <br />
              <br />
              <strong>3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω</strong>
              <br />
              ‚Ä¢ @BotFather –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
              <br />
              ‚Ä¢ –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫: <code>1234567890:ABCdefGhIJKLmnopQRstUVwxyz</code>
              <br />
              ‚Ä¢ ‚ö†Ô∏è –ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω!
              <br />
              <br />
              <strong>4. –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ –Ω–∏–∂–µ</strong>
              <br />
              ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ç–æ–∫–µ–Ω —Ü–µ–ª–∏–∫–æ–º
              <br />
              ‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ &quot;–¢–æ–∫–µ–Ω –±–æ—Ç–∞&quot;
              <br />
              ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ &quot;–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞&quot;
            </Typography>
          </Alert>

          <Alert severity="success" sx={{ mb: 2 }}>
            <Typography variant="body2">
              <strong>‚úÖ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:</strong>
              <br />
              ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É –º–∞–≥–∞–∑–∏–Ω—É
              <br />
              ‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã
              <br />
              ‚Ä¢ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
              <br />
              ‚Ä¢ –ú–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            </Typography>
          </Alert>

          <TextField
            select
            label="–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω"
            value={storeId}
            onChange={(e) => setStoreId(e.target.value)}
            SelectProps={{ native: true }}
            fullWidth
            required
          >
            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω --</option>
            {availableStores.map((store) => (
              <option key={store.id} value={store.id}>
                {store.name}
              </option>
            ))}
          </TextField>

          {availableStores.length === 0 && (
            <Alert severity="warning"
              action={
                <Button
                  color="inherit"
                  size="small"
                  startIcon={<StoreIcon />}
                  onClick={() => setShowStoreDialog(true)}
                >
                  –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
                </Button>
              }
            >
              –£ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ —É–∂–µ –µ—Å—Ç—å –±–æ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞.
            </Alert>
          )}

          <TextField
            label="–¢–æ–∫–µ–Ω –±–æ—Ç–∞"
            value={botToken}
            onChange={(e) => setBotToken(e.target.value)}
            placeholder="1234567890:ABCdefGhIJklmNOpqRStuvwXYz"
            fullWidth
            required
            multiline
            rows={2}
            helperText={
              <Box>
                <Typography variant="caption">
                  –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–∏—Ç–µ —É @BotFather –≤ Telegram
                  <br />
                  <strong>–§–æ—Ä–º–∞—Ç:</strong> —Ü–∏—Ñ—Ä—ã:–±—É–∫–≤—ã_—Å–∏–º–≤–æ–ª—ã
                  <br />
                  <strong>–ü—Ä–∏–º–µ—Ä:</strong> 1234567890:ABCdefGhIJklmNOpqRStuvwXYz
                </Typography>
              </Box>
            }
            error={botToken.length > 0 && !isValidBotToken(botToken)}
            InputProps={{
              style: { fontFamily: 'monospace', fontSize: '0.9rem' }
            }}
          />

          <TextField
            label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            value={botUsername}
            onChange={(e) => setBotUsername(e.target.value)}
            placeholder="my_shop_bot"
            fullWidth
            helperText={
              <Box>
                <Typography variant="caption">
                  –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                  <br />
                  <strong>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ &quot;bot&quot;
                  <br />
                  <strong>–ü—Ä–∏–º–µ—Ä:</strong> my_shop_bot, store_bot
                </Typography>
              </Box>
            }
            error={botUsername.length > 0 && !isValidBotUsername(botUsername)}
          />
        </Box>
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose} disabled={loading}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          onClick={handleSubmit}
          variant="contained"
          disabled={
            loading ||
            !storeId ||
            !botToken ||
            !isValidBotToken(botToken) ||
            (botUsername && !isValidBotUsername(botUsername))
          }
        >
          {loading ? <CircularProgress size={20} /> : '–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞'}
        </Button>
      </DialogActions>

      <StoreDialog
        open={showStoreDialog}
        onClose={() => setShowStoreDialog(false)}
        onSuccess={() => {
          setShowStoreDialog(false);
          onBotCreated(); // Reload stores
        }}
      />
    </Dialog>
  );
};

const BotManagement: React.FC = () => {
  const [bots, setBots] = useState<Bot[]>([]);
  const [stats, setStats] = useState<BotStats | null>(null);
  const [stores, setStores] = useState<Array<{ id: string; name: string; hasBot: boolean }>>([]);
  const [loading, setLoading] = useState(true);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [constructorOpen, setConstructorOpen] = useState(false);
  const [editBot, setEditBot] = useState<{ storeId: string; settings: BotSettings } | null>(null);
  const { socket } = useSocket();

  const loadBots = async () => {
    try {
      setLoading(true);
      const [botsResponse, storesResponse] = await Promise.all([
        apiClient.get('/bots'),
        apiClient.get('/stores')
      ]);

      if (botsResponse.data.success) {
        setBots(botsResponse.data.bots || []);
        setStats(botsResponse.data.stats || null);
      }

      if (storesResponse.data.items) {
        const storeList = storesResponse.data.items.map((store: Store) => ({
          id: store.id,
          name: store.name,
          hasBot: botsResponse.data.bots?.some((bot: Bot) => bot.storeId === store.id && bot.hasToken) || false
        }));
        setStores(storeList);
      }
    } catch (error: unknown) {
      console.error('Error loading bots:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRemoveBot = async (storeId: string, storeName: string) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "${storeName}"?`)) {
      return;
    }

    try {
      const response = await apiClient.delete(`/bots/${storeId}`);
      if (response.data.success) {
        alert(response.data.message || '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        await loadBots();
      }
    } catch (error: unknown) {
      const errorMessage = (error as any).response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞';
      alert(`–û—à–∏–±–∫–∞: ${errorMessage}`);
      console.error('Error removing bot:', error);
    }
  };

  const handleRestartBot = async (storeId: string, storeName: string) => {
    if (!window.confirm(`–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "${storeName}"?`)) {
      return;
    }

    try {
      const response = await apiClient.post(`/bots/${storeId}/restart`);
      if (response.data.success) {
        await loadBots();
      }
    } catch (error: unknown) {
      console.error('Error restarting bot:', error);
    }
  };

  const handleEditBot = async (storeId: string) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
      const response = await apiClient.get(`/bots/${storeId}/settings`);
      if (response.data.success) {
        setEditBot({
          storeId: storeId,
          settings: response.data.settings
        });
        setConstructorOpen(true);
      }
    } catch (error: unknown) {
      console.error('Error loading bot settings:', error);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      setEditBot({
        storeId: storeId,
        settings: {
          welcomeMessage: 'Welcome!',
          language: 'ru',
          currency: 'USD',
          timezone: 'Europe/Moscow',
          theme: 'light' as const,
          primaryColor: '#1976d2',
          accentColor: '#dc004e',
          catalogStyle: 'grid' as const,
          showPrices: true,
          showStock: true,
          enableSearch: true,
          categoriesPerPage: 10,
          productsPerPage: 10,
          autoResponses: { enabled: false, responses: [] },
          notifications: {
            newOrder: true,
            lowStock: true,
            paymentConfirmation: true,
            orderStatusUpdate: true,
            customNotifications: []
          },
          paymentMethods: [],
          paymentInstructions: '',
          enableAnalytics: false,
          enableReferralSystem: false,
          enableReviews: false,
          customCommands: []
        }
      });
      setConstructorOpen(true);
    }
  };

  const getStatusIcon = (status: string, isActive: boolean) => {
    if (!isActive && status !== 'INACTIVE') return <ErrorIcon color="error" />;

    switch (status) {
      case 'ACTIVE':
        return isActive ? <ActiveIcon color="success" /> : <InactiveIcon color="warning" />;
      case 'INACTIVE':
        return <InactiveIcon color="disabled" />;
      case 'SUSPENDED':
        return <ErrorIcon color="error" />;
      default:
        return <InactiveIcon color="disabled" />;
    }
  };

  const getStatusText = (status: string, isActive: boolean) => {
    if (!isActive && status !== 'INACTIVE') return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';

    switch (status) {
      case 'ACTIVE':
        return isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      case 'INACTIVE':
        return '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
      case 'SUSPENDED':
        return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const formatLastActivity = (lastActivity?: string) => {
    if (!lastActivity) return '–ù–∏–∫–æ–≥–¥–∞';
    const date = new Date(lastActivity);
    return date.toLocaleString('ru-RU');
  };

  useEffect(() => {
    loadBots();
  }, []);

  // Listen for bot-related socket events
  useEffect(() => {
    if (socket) {
      const handleBotNotification = (data: { type: string }) => {
        if (data.type?.includes('BOT_')) {
          loadBots(); // Refresh bots when bot-related events occur
        }
      };

      socket.on('notification', handleBotNotification);

      return () => {
        socket.off('notification', handleBotNotification);
      };
    }
  }, [socket, loadBots]);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height={400}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box p={3}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" component="h1">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏
        </Typography>
        <Box display="flex" gap={2}>
          <Button
            variant="outlined"
            startIcon={<AddIcon />}
            onClick={() => setCreateDialogOpen(true)}
          >
            –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
          </Button>
          <Button
            variant="contained"
            startIcon={<ConstructorIcon />}
            onClick={() => setConstructorOpen(true)}
          >
            –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–∞
          </Button>
        </Box>
      </Box>

      {stats && (
        <Grid container spacing={3} mb={3}>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Typography color="textSecondary" gutterBottom>
                    –í—Å–µ–≥–æ –±–æ—Ç–æ–≤
                  </Typography>
                  <BotIcon color="primary" />
                </Box>
                <Typography variant="h4">
                  {stats.totalBots}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Typography color="textSecondary" gutterBottom>
                    –ê–∫—Ç–∏–≤–Ω—ã—Ö
                  </Typography>
                  <ActiveIcon color="success" />
                </Box>
                <Typography variant="h4" color="success.main">
                  {stats.activeBots}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Typography color="textSecondary" gutterBottom>
                    –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                  </Typography>
                  <InactiveIcon color="warning" />
                </Box>
                <Typography variant="h4" color="warning.main">
                  {stats.inactiveBots}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={6} md={3}>
            <Card>
              <CardContent>
                <Box display="flex" alignItems="center" justifyContent="space-between">
                  <Typography color="textSecondary" gutterBottom>
                    –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                  </Typography>
                  <StatsIcon color="info" />
                </Box>
                <Typography variant="h4" color="info.main">
                  {stats.totalMessages.toLocaleString()}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
          </Typography>

          {bots.length === 0 ? (
            <Box textAlign="center" py={4}>
              <BotIcon sx={{ fontSize: 64, color: 'grey.400', mb: 2 }} />
              <Typography variant="h6" color="textSecondary" gutterBottom>
                –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤
              </Typography>
              <Typography variant="body2" color="textSecondary" mb={3}>
                –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
              </Typography>
              <Box display="flex" gap={2} justifyContent="center">
                <Button
                  variant="outlined"
                  startIcon={<AddIcon />}
                  onClick={() => setCreateDialogOpen(true)}
                  disabled={stores.length === 0}
                >
                  –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                </Button>
                <Button
                  variant="contained"
                  startIcon={<ConstructorIcon />}
                  onClick={() => setConstructorOpen(true)}
                  disabled={stores.length === 0}
                >
                  –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–∞
                </Button>
              </Box>
            </Box>
          ) : (
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>–ú–∞–≥–∞–∑–∏–Ω</TableCell>
                    <TableCell>–ë–æ—Ç</TableCell>
                    <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                    <TableCell>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</TableCell>
                    <TableCell>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</TableCell>
                    <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {bots.map((bot) => (
                    <TableRow key={bot.storeId}>
                      <TableCell>
                        <Box display="flex" alignItems="center" gap={1}>
                          <StoreIcon color="primary" />
                          <Box>
                            <Typography variant="body2" fontWeight="bold">
                              {bot.storeName}
                            </Typography>
                            <Typography variant="caption" color="textSecondary">
                              /{bot.storeSlug}
                            </Typography>
                          </Box>
                        </Box>
                      </TableCell>
                      <TableCell>
                        {bot.botUsername ? (
                          <Box display="flex" alignItems="center" gap={1}>
                            <BotIcon />
                            <Typography>@{bot.botUsername}</Typography>
                          </Box>
                        ) : (
                          <Typography color="textSecondary">
                            –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                          </Typography>
                        )}
                      </TableCell>
                      <TableCell>
                        <Box display="flex" alignItems="center" gap={1}>
                          {getStatusIcon(bot.botStatus, bot.isActive)}
                          <Typography>
                            {getStatusText(bot.botStatus, bot.isActive)}
                          </Typography>
                        </Box>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          {formatLastActivity(bot.lastActivity)}
                        </Typography>
                        <Typography variant="caption" color="textSecondary">
                          {bot.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Typography variant="body2">
                          üì¶ {bot.productCount} —Ç–æ–≤–∞—Ä–æ–≤
                        </Typography>
                        <Typography variant="body2">
                          üõí {bot.orderCount} –∑–∞–∫–∞–∑–æ–≤
                        </Typography>
                      </TableCell>
                      <TableCell>
                        <Box display="flex" gap={1}>
                          {bot.hasToken && (
                            <Tooltip title="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞">
                              <IconButton
                                size="small"
                                onClick={() => handleRestartBot(bot.storeId, bot.storeName)}
                                disabled={!bot.isActive}
                              >
                                <RestartIcon />
                              </IconButton>
                            </Tooltip>
                          )}
                          <Tooltip title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞">
                            <IconButton
                              size="small"
                              onClick={() => handleEditBot(bot.storeId)}
                            >
                              <SettingsIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞">
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => handleRemoveBot(bot.storeId, bot.storeName)}
                            >
                              <DeleteIcon />
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </CardContent>
      </Card>

      <CreateBotDialog
        open={createDialogOpen}
        onClose={() => setCreateDialogOpen(false)}
        stores={stores}
        onBotCreated={loadBots}
      />

      <BotConstructor
        open={constructorOpen}
        onClose={() => {
          setConstructorOpen(false);
          setEditBot(null);
        }}
        stores={stores}
        onBotCreated={loadBots}
        editBot={editBot}
      />

      {/* Floating Action Button for quick access */}
      <Fab
        color="primary"
        sx={{
          position: 'fixed',
          bottom: 24,
          right: 24,
          zIndex: 1000,
        }}
        onClick={() => setConstructorOpen(true)}
      >
        <ConstructorIcon />
      </Fab>
    </Box>
  );
};

export default BotManagement;
