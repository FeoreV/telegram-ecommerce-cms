import React from 'react'
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  Chip,
} from '@mui/material'
import {
  Error as ErrorIcon,
  Refresh,
  Home,
  Warning,
  Wifi,
  CloudOff,
} from '@mui/icons-material'
import { ErrorFallbackProps } from './ErrorBoundary'

interface CustomErrorFallbackProps extends ErrorFallbackProps {
  type?: 'network' | 'permission' | 'notfound' | 'server' | 'generic'
  title?: string
  message?: string
  actions?: Array<{
    label: string
    icon?: React.ReactNode
    onClick: () => void
    variant?: 'contained' | 'outlined' | 'text'
  }>
}

const ErrorFallback: React.FC<CustomErrorFallbackProps> = ({
  error,
  resetError,
  errorId,
  type = 'generic',
  title,
  message,
  actions,
}) => {
  const getErrorConfig = () => {
    switch (type) {
      case 'network':
        return {
          icon: <Wifi sx={{ fontSize: 64, color: 'warning.main' }} />,
          title: title || '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é',
          message: message || '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
          severity: 'warning' as const,
        }
      case 'permission':
        return {
          icon: <Warning sx={{ fontSize: 64, color: 'error.main' }} />,
          title: title || '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
          message: message || '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.',
          severity: 'error' as const,
        }
      case 'notfound':
        return {
          icon: <Typography sx={{ fontSize: 64 }}>üîç</Typography>,
          title: title || '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
          message: message || '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞.',
          severity: 'info' as const,
        }
      case 'server':
        return {
          icon: <CloudOff sx={{ fontSize: 64, color: 'error.main' }} />,
          title: title || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
          message: message || '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.',
          severity: 'error' as const,
        }
      default:
        return {
          icon: <ErrorIcon sx={{ fontSize: 64, color: 'error.main' }} />,
          title: title || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
          message: message || '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.',
          severity: 'error' as const,
        }
    }
  }

  const config = getErrorConfig()

  const defaultActions = [
    {
      label: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞',
      icon: <Refresh />,
      onClick: resetError,
      variant: 'contained' as const,
    },
    {
      label: '–ù–∞ –≥–ª–∞–≤–Ω—É—é',
      icon: <Home />,
      onClick: () => { window.location.href = '/' },
      variant: 'outlined' as const,
    },
  ]

  const finalActions = actions || defaultActions

  return (
    <Box
      sx={{
        p: 4,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: 400,
      }}
    >
      <Card sx={{ maxWidth: 500, width: '100%', textAlign: 'center' }}>
        <CardContent>
          <Box sx={{ mb: 2 }}>
            {config.icon}
          </Box>
          
          <Typography variant="h5" gutterBottom>
            {config.title}
          </Typography>
          
          <Typography variant="body1" color="text.secondary" paragraph>
            {config.message}
          </Typography>

          {error && (
            <Alert severity={config.severity} sx={{ mb: 3, textAlign: 'left' }}>
              <Typography variant="body2">
                <strong>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</strong> {error.message}
              </Typography>
              <Box sx={{ mt: 1 }}>
                <Chip 
                  label={`ID: ${errorId}`} 
                  size="small" 
                  variant="outlined" 
                />
              </Box>
            </Alert>
          )}

          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', flexWrap: 'wrap' }}>
            {finalActions.map((action, index) => (
              <Button
                key={index}
                variant={action.variant || 'contained'}
                startIcon={action.icon}
                onClick={action.onClick}
              >
                {action.label}
              </Button>
            ))}
          </Box>
        </CardContent>
      </Card>
    </Box>
  )
}

export default ErrorFallback
