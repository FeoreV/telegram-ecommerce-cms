import React, { useState } from 'react'
import {
  Box,
  Typography,
  Grid,
  Button,
  TextField,
  Card,
  CardContent,
  Chip,
  Avatar,
  Switch,
  Slider,
  Tabs,
  Tab,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Alert,
  LinearProgress,
  CircularProgress,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  IconButton,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from '@mui/material'
import {
  Favorite,
  Star,
  Settings,
  Home,
  Person,
  Email,
  Phone,
  Add,
  Edit,
  Delete,
  Visibility,
} from '@mui/icons-material'
import PageHeader from '../components/ui/PageHeader'
import SectionCard from '../components/ui/SectionCard'
import StatCard from '../components/ui/StatCard'
import StatusChip from '../components/ui/StatusChip'
import EmptyState from '../components/ui/EmptyState'
import LoadingSkeleton from '../components/ui/LoadingSkeleton'
import AnimatedButton from '../components/ui/AnimatedButton'
import AccessibleButton from '../components/ui/AccessibleButton'
import FadeInView from '../components/ui/FadeInView'
import LoadingOverlay from '../components/ui/LoadingOverlay'
import { useThemeMode } from '../contexts/ThemeModeContext'
import { colorTokens } from '../theme/tokens'

const StyleGuidePage: React.FC = () => {
  const { mode } = useThemeMode()
  const [activeTab, setActiveTab] = useState(0)
  const [loading, setLoading] = useState(false)
  const [overlayOpen, setOverlayOpen] = useState(false)
  const colors = colorTokens[mode]

  const toggleLoading = () => {
    setLoading(!loading)
    setTimeout(() => setLoading(false), 3000)
  }

  const sections = [
    { label: '–¶–≤–µ—Ç–∞', value: 0 },
    { label: '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞', value: 1 },
    { label: '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã', value: 2 },
    { label: '–§–æ—Ä–º—ã', value: 3 },
    { label: '–ê–Ω–∏–º–∞—Ü–∏–∏', value: 4 },
    { label: '–ú–∞–∫–µ—Ç—ã', value: 5 },
  ]

  const renderColors = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <Typography variant="h6" gutterBottom>–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞</Typography>
      </Grid>
      {Object.entries(colors).map(([name, color]) => (
        <Grid item xs={6} sm={4} md={3} key={name}>
          <Card>
            <Box
              sx={{
                height: 80,
                backgroundColor: color,
                borderRadius: '12px 12px 0 0',
              }}
            />
            <CardContent sx={{ pt: 2 }}>
              <Typography variant="body2" fontWeight={600}>
                {name}
              </Typography>
              <Typography variant="caption" color="text.secondary">
                {color}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      ))}
    </Grid>
  )

  const renderTypography = () => (
    <Box>
      <Typography variant="h1" gutterBottom>H1 –ó–∞–≥–æ–ª–æ–≤–æ–∫</Typography>
      <Typography variant="h2" gutterBottom>H2 –ó–∞–≥–æ–ª–æ–≤–æ–∫</Typography>
      <Typography variant="h3" gutterBottom>H3 –ó–∞–≥–æ–ª–æ–≤–æ–∫</Typography>
      <Typography variant="h4" gutterBottom>H4 –ó–∞–≥–æ–ª–æ–≤–æ–∫</Typography>
      <Typography variant="h5" gutterBottom>H5 –ó–∞–≥–æ–ª–æ–≤–æ–∫</Typography>
      <Typography variant="h6" gutterBottom>H6 –ó–∞–≥–æ–ª–æ–≤–æ–∫</Typography>
      <Typography variant="body1" gutterBottom>
        Body 1: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      </Typography>
      <Typography variant="body2" gutterBottom>
        Body 2: –í—Ç–æ—Ä–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
      </Typography>
      <Typography variant="caption" display="block" gutterBottom>
        Caption: –ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ—Ç–æ–∫ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      </Typography>
      <Typography variant="overline" display="block">
        OVERLINE: –¢–ï–ö–°–¢ –í –í–ï–†–•–ù–ï–ú –†–ï–ì–ò–°–¢–†–ï
      </Typography>
    </Box>
  )

  const renderComponents = () => (
    <Grid container spacing={4}>
      <Grid item xs={12} md={6}>
        <SectionCard title="–ö–Ω–æ–ø–∫–∏">
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Button variant="contained">Contained</Button>
              <Button variant="outlined">Outlined</Button>
              <Button variant="text">Text</Button>
            </Box>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <AnimatedButton variant="contained" loading={loading} onClick={toggleLoading}>
                –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
              </AnimatedButton>
              <AccessibleButton 
                variant="outlined" 
                tooltip="–î–æ—Å—Ç—É–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞"
                keyboardShortcut="Ctrl+A"
                ariaLabel="–î–æ—Å—Ç—É–ø–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏"
              >
                –î–æ—Å—Ç—É–ø–Ω–∞—è
              </AccessibleButton>
            </Box>
          </Box>
        </SectionCard>
      </Grid>

      <Grid item xs={12} md={6}>
        <SectionCard title="–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏">
          <Grid container spacing={2}>
            <Grid item xs={6}>
              <StatCard
                title="–ó–∞–∫–∞–∑—ã"
                value="1,234"
                icon={<Star />}
                color="primary"
                trend={{ value: 12.5, isPositive: true }}
              />
            </Grid>
            <Grid item xs={6}>
              <StatCard
                title="–í—ã—Ä—É—á–∫–∞"
                value="‚ÇΩ85,450"
                icon={<Favorite />}
                color="success"
                trend={{ value: -2.3, isPositive: false }}
              />
            </Grid>
          </Grid>
        </SectionCard>
      </Grid>

      <Grid item xs={12} md={6}>
        <SectionCard title="–°—Ç–∞—Ç—É—Å—ã –∏ —á–∏–ø—ã">
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <StatusChip label="–£—Å–ø–µ—Ö" variant="success" />
              <StatusChip label="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" variant="warning" />
              <StatusChip label="–û—à–∏–±–∫–∞" variant="error" />
              <StatusChip label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" variant="info" />
              <StatusChip label="–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π" variant="neutral" />
            </Box>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Chip label="–ê–∫—Ç–∏–≤–µ–Ω" color="success" variant="filled" />
              <Chip label="–ù–µ–∞–∫—Ç–∏–≤–µ–Ω" color="default" variant="outlined" />
              <Chip label="–£–¥–∞–ª–∏—Ç—å" color="error" onDelete={() => {}} />
            </Box>
          </Box>
        </SectionCard>
      </Grid>

      <Grid item xs={12} md={6}>
        <SectionCard title="–ü—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è">
          <EmptyState
            title="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            description="–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º"
            actionLabel="–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
            onAction={() => alert('–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!')}
            icon="üìã"
          />
        </SectionCard>
      </Grid>

      <Grid item xs={12}>
        <SectionCard title="–°–∫–µ–ª–µ—Ç–æ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏">
          <Tabs value={0} sx={{ mb: 2 }}>
            <Tab label="–ö–∞—Ä—Ç–æ—á–∫–∏" />
            <Tab label="–¢–∞–±–ª–∏—Ü–∞" />
            <Tab label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" />
          </Tabs>
          <LoadingSkeleton variant="card" count={3} />
        </SectionCard>
      </Grid>
    </Grid>
  )

  const renderForms = () => (
    <Grid container spacing={3}>
      <Grid item xs={12} md={6}>
        <SectionCard title="–ü–æ–ª—è –≤–≤–æ–¥–∞">
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <TextField label="–û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç" />
            <TextField label="–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" required error helperText="–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è" />
            <TextField label="–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ –ø–æ–ª–µ" disabled value="–û—Ç–∫–ª—é—á–µ–Ω–æ" />
            <TextField label="–ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ" multiline rows={3} />
          </Box>
        </SectionCard>
      </Grid>

      <Grid item xs={12} md={6}>
        <SectionCard title="–°–µ–ª–µ–∫—Ç—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏">
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <FormControl>
              <InputLabel>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é</InputLabel>
              <Select label="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é" value="">
                <MenuItem value="1">–û–ø—Ü–∏—è 1</MenuItem>
                <MenuItem value="2">–û–ø—Ü–∏—è 2</MenuItem>
                <MenuItem value="3">–û–ø—Ü–∏—è 3</MenuItem>
              </Select>
            </FormControl>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Typography>–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å</Typography>
              <Switch defaultChecked />
            </Box>
            <Box>
              <Typography gutterBottom>–°–ª–∞–π–¥–µ—Ä</Typography>
              <Slider defaultValue={30} />
            </Box>
          </Box>
        </SectionCard>
      </Grid>
    </Grid>
  )

  const renderAnimations = () => (
    <Grid container spacing={3}>
      <Grid item xs={12} md={6}>
        <SectionCard title="–ê–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è">
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            <FadeInView direction="up" delay={0}>
              <Alert severity="info">–ê–Ω–∏–º–∞—Ü–∏—è —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö</Alert>
            </FadeInView>
            <FadeInView direction="left" delay={200}>
              <Alert severity="success">–ê–Ω–∏–º–∞—Ü–∏—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ</Alert>
            </FadeInView>
            <FadeInView direction="fade" delay={400}>
              <Alert severity="warning">–ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ</Alert>
            </FadeInView>
          </Box>
        </SectionCard>
      </Grid>

      <Grid item xs={12} md={6}>
        <SectionCard title="–ó–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏">
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, alignItems: 'center' }}>
            <CircularProgress />
            <LinearProgress sx={{ width: '100%' }} />
            <Button onClick={() => setOverlayOpen(true)}>
              –ü–æ–∫–∞–∑–∞—Ç—å overlay
            </Button>
          </Box>
        </SectionCard>
      </Grid>
    </Grid>
  )

  const renderLayouts = () => (
    <Grid container spacing={3}>
      <Grid item xs={12}>
        <SectionCard title="–ü—Ä–∏–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã">
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>–ù–∞–∑–≤–∞–Ω–∏–µ</TableCell>
                  <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                  <TableCell>–î–∞—Ç–∞</TableCell>
                  <TableCell align="right">–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {[1, 2, 3].map((row) => (
                  <TableRow key={row}>
                    <TableCell>–≠–ª–µ–º–µ–Ω—Ç {row}</TableCell>
                    <TableCell>
                      <StatusChip 
                        label={row % 2 === 0 ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"} 
                        variant={row % 2 === 0 ? "success" : "neutral"} 
                      />
                    </TableCell>
                    <TableCell>2024-01-0{row}</TableCell>
                    <TableCell align="right">
                      <IconButton size="small"><Visibility /></IconButton>
                      <IconButton size="small"><Edit /></IconButton>
                      <IconButton size="small"><Delete /></IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </SectionCard>
      </Grid>
    </Grid>
  )

  const tabContent = [
    renderColors(),
    renderTypography(),
    renderComponents(),
    renderForms(),
    renderAnimations(),
    renderLayouts(),
  ]

  return (
    <Box>
      <PageHeader
        title="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å—Ç–∏–ª—é"
        subtitle="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
      />

      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={activeTab}
          onChange={(_, newValue) => setActiveTab(newValue)}
          variant="scrollable"
          scrollButtons="auto"
        >
          {sections.map((section) => (
            <Tab key={section.value} label={section.label} />
          ))}
        </Tabs>
      </Paper>

      <Box sx={{ mb: 3 }}>
        {tabContent[activeTab]}
      </Box>

      <LoadingOverlay
        open={overlayOpen}
        message="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"
        variant="dots"
      />

      <Box sx={{ mt: 4, textAlign: 'center' }}>
        <Button variant="outlined" onClick={() => setOverlayOpen(false)}>
          –ó–∞–∫—Ä—ã—Ç—å overlay
        </Button>
      </Box>
    </Box>
  )
}

export default StyleGuidePage
