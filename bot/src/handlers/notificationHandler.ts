import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../utils/logger';
import { sanitizeForLog } from '../utils/sanitizer';

export interface CustomerNotificationData {
  telegramId: string;
  type: 'payment_confirmed' | 'order_rejected' | 'order_shipped' | 'order_delivered' | 'order_cancelled';
  orderData: {
    orderNumber: string;
    orderId: string;
    storeName: string;
    totalAmount: number;
    currency: string;
  };
  additionalData?: {
    reason?: string;
    trackingNumber?: string;
    carrier?: string;
  };
}

export class NotificationHandler {
  constructor(private bot: TelegramBot) {}

  async sendCustomerNotification(notification: CustomerNotificationData): Promise<void> {
    try {
      const message = this.formatNotificationMessage(notification);
      const keyboard = this.getNotificationKeyboard(notification);

      await this.bot.sendMessage(notification.telegramId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });

      logger.info(`Customer notification sent: ${notification.type} to ${notification.telegramId} for order ${notification.orderData.orderNumber}`);
    } catch (error) {
      logger.error('Failed to send customer notification:', error);
      throw error;
    }
  }

  private formatNotificationMessage(notification: CustomerNotificationData): string {
    const { orderData, additionalData } = notification;
    const orderNumber = orderData.orderNumber;

    switch (notification.type) {
      case 'payment_confirmed':
        return `‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n` +
               `üßæ –ó–∞–∫–∞–∑: ${orderNumber}\n` +
               `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${orderData.storeName}\n` +
               `üí≥ –°—É–º–º–∞: ${orderData.totalAmount} ${orderData.currency}\n\n` +
               `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n` +
               `üì¶ –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏.`;

      case 'order_rejected':
        return `‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n` +
               `üßæ –ó–∞–∫–∞–∑: ${orderNumber}\n` +
               `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${orderData.storeName}\n` +
               `üí∞ –°—É–º–º–∞: ${orderData.totalAmount} ${orderData.currency}\n\n` +
               `${additionalData?.reason ? `üìù –ü—Ä–∏—á–∏–Ω–∞: ${additionalData.reason}\n\n` : ''}` +
               `üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∞–≥–∞–∑–∏–Ω–∞.`;

      case 'order_shipped':
        return `üì¶ *–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n` +
               `üßæ –ó–∞–∫–∞–∑: ${orderNumber}\n` +
               `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${orderData.storeName}\n\n` +
               `üöö –í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏!\n` +
               `${additionalData?.trackingNumber ? `üìã –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: \`${additionalData.trackingNumber}\`\n` : ''}` +
               `${additionalData?.carrier ? `üöõ –°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: ${additionalData.carrier}\n` : ''}` +
               `\nüì± –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –Ω–∞—à –±–æ—Ç.`;

      case 'order_delivered':
        return `‚úÖ *–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!*\n\n` +
               `üßæ –ó–∞–∫–∞–∑: ${orderNumber}\n` +
               `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${orderData.storeName}\n\n` +
               `üéâ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n` +
               `‚≠ê –ú—ã –±—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –æ—Ç–∑—ã–≤ –æ –ø–æ–∫—É–ø–∫–µ.\n\n` +
               `üí´ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!`;

      case 'order_cancelled':
        return `üö´ *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω*\n\n` +
               `üßæ –ó–∞–∫–∞–∑: ${orderNumber}\n` +
               `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${orderData.storeName}\n\n` +
               `${additionalData?.reason ? `üìù –ü—Ä–∏—á–∏–Ω–∞: ${additionalData.reason}\n\n` : ''}` +
               `üí∞ –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.\n` +
               `üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`;

      default:
        return `üì¨ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n` +
               `üßæ –ó–∞–∫–∞–∑: ${orderNumber}\n` +
               `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${orderData.storeName}\n\n` +
               `‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è.`;
    }
  }

  private getNotificationKeyboard(notification: CustomerNotificationData) {
    const keyboard = {
      inline_keyboard: [] as any[]
    };

    // Always show order details button
    keyboard.inline_keyboard.push([
      { text: 'üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞', callback_data: `order_view_${notification.orderData.orderId}` }
    ]);

    // Type-specific buttons
    switch (notification.type) {
      case 'payment_confirmed':
      case 'order_shipped':
      case 'order_delivered':
        keyboard.inline_keyboard.push([
          { text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' },
          { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' }
        ]);
        break;

      case 'order_rejected':
      case 'order_cancelled':
        keyboard.inline_keyboard.push([
          { text: 'üîÑ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data: 'store_list' },
          { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' }
        ]);
        break;
    }

    return keyboard;
  }

  // Send notification with retry logic
  async sendCustomerNotificationWithRetry(
    notification: CustomerNotificationData,
    maxRetries: number = 3
  ): Promise<boolean> {
    let attempts = 0;

    while (attempts < maxRetries) {
      try {
        await this.sendCustomerNotification(notification);
        return true;
      } catch (error) {
        attempts++;
        logger.warn(`Notification attempt ${attempts} failed for customer ${sanitizeForLog(notification.telegramId)}:`, error);

        if (attempts >= maxRetries) {
          logger.error(`Failed to send notification after ${maxRetries} attempts to customer ${sanitizeForLog(notification.telegramId)}`);
          return false;
        }

        // Wait before retry (exponential backoff)
        const delay = Math.min(1000 * Math.pow(2, attempts - 1), 10000);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    return false;
  }

  // Send bulk notifications (for admin announcements)
  async sendBulkNotification(
    telegramIds: string[],
    message: string,
    keyboard?: any
  ): Promise<{ success: number; failed: number }> {
    let success = 0;
    let failed = 0;

    for (const telegramId of telegramIds) {
      try {
        await this.bot.sendMessage(telegramId, message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
        });
        success++;

        // Small delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (error) {
        logger.error(`Failed to send bulk notification to ${sanitizeForLog(telegramId)}:`, error);
        failed++;
      }
    }

    logger.info(`Bulk notification results: ${success} sent, ${failed} failed`);
    return { success, failed };
  }
}
