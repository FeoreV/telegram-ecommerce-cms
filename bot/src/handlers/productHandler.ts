import TelegramBot from 'node-telegram-bot-api';
import { apiService } from '../services/apiService';
import { cmsService } from '../services/cmsService';
import { qrPaymentService } from '../services/qrPaymentService';
import { OrderSummary, StoreSummary } from '../types/apiResponses';
import { ttlCache } from '../utils/cache';
import { logger } from '../utils/logger';
import { userSessions } from '../utils/sessionManager';

export async function handleProducts(
  bot: TelegramBot,
  msg: TelegramBot.Message,
  callbackQuery?: TelegramBot.CallbackQuery
) {
  const chatId = msg.chat.id;
  // Use callbackQuery.from.id if available (button press), otherwise msg.from.id (command)
  const userId = (callbackQuery?.from?.id || msg.from?.id)?.toString();

  if (!userId || !callbackQuery?.data) return;

  const session = userSessions.getSession(userId);

  try {
    if (callbackQuery.data.startsWith('product_view_')) {
      const productId = callbackQuery.data.replace('product_view_', '');
      await showProduct(bot, chatId, session, productId);
    } else if (callbackQuery.data.startsWith('product_variants_detail_')) {
      const productId = callbackQuery.data.replace('product_variants_detail_', '');
      await showVariantDetails(bot, chatId, session, productId);
    } else if (callbackQuery.data.startsWith('cms_product_view_')) {
      const cmsProductId = callbackQuery.data.replace('cms_product_view_', '');
      await showCMSProduct(bot, chatId, session, cmsProductId);
    } else if (callbackQuery.data.startsWith('product_variant_')) {
      await handleVariantSelection(bot, chatId, session, callbackQuery.data);
    } else if (
      callbackQuery.data.startsWith('buy_simple_') ||
      callbackQuery.data.startsWith('buy_variant_')
    ) {
      await handleQuantitySelection(bot, chatId, session, callbackQuery.data);
    } else if (callbackQuery.data.startsWith('buy_confirm_')) {
      await handleBuyConfirmation(bot, chatId, session, callbackQuery.data);
    }
    // CMS Purchase Handlers
    else if (
      callbackQuery.data.startsWith('cms_buy_simple_') ||
      callbackQuery.data.startsWith('cms_buy_variant_') ||
      callbackQuery.data.startsWith('cms_buy_custom_')
    ) {
      await handleCMSPurchase(bot, chatId, session, callbackQuery.data);
    } else if (callbackQuery.data.startsWith('cms_buy_confirm_')) {
      await handleCMSPurchaseConfirmation(bot, chatId, session, callbackQuery.data);
    } else if (callbackQuery.data.startsWith('cms_notify_stock_')) {
      await handleCMSStockNotification(bot, chatId, session, callbackQuery.data);
    } else if (callbackQuery.data.startsWith('generate_qr_')) {
      await handleQRGeneration(bot, chatId, session, callbackQuery.data);
    }
  } catch (error) {
    logger.error('Product handler error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–≤–∞—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function showProduct(bot: TelegramBot, chatId: number, session: any, productId: string) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä...');

  try {
    if (!session.token) {
      await bot.editMessageText(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }

    const productResponse = await apiService.getProduct(productId, session.token);
    const product = productResponse.product;

    // Format price with better visual appeal
    const priceEmoji = product.price > 1000 ? 'üíé' : 'üí∞';
    const stockStatus = product.stock > 10 ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' :
                       product.stock > 0 ? `‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${product.stock} —à—Ç.` : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';

    let text = `üõçÔ∏è *${product.name}*\n`;
    text += `üè™ ${product.store.name}\n\n`;

    if (product.description) {
      // Limit description length for better readability
      const shortDesc = product.description.length > 200
        ? product.description.substring(0, 200) + '...'
        : product.description;
      text += `üìù ${shortDesc}\n\n`;
    }

    text += `${priceEmoji} *${product.price} ${product.store.currency}*\n`;
    text += `üì¶ ${stockStatus}\n`;

    if (product.sku) {
      text += `üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª: \`${product.sku}\`\n`;
    }

    // Handle variants and purchasing
    const keyboard = { inline_keyboard: [] as any[] };

    if (product.variants && product.variants.length > 0) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
      const variantGroups: { [key: string]: any[] } = {};
      product.variants.forEach((variant: any) => {
        const groupName = variant.name || '–î—Ä—É–≥–æ–µ';
        if (!variantGroups[groupName]) {
          variantGroups[groupName] = [];
        }
        variantGroups[groupName].push(variant);
      });

      text += '\n*üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n';
      
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      const getVariantEmoji = (groupName: string): string => {
        const name = groupName.toLowerCase();
        if (name.includes('—Ü–≤–µ—Ç') || name.includes('color')) return 'üé®';
        if (name.includes('—Ä–∞–∑–º–µ—Ä') || name.includes('size')) return 'üìè';
        if (name.includes('–≤–µ—Å') || name.includes('weight')) return '‚öñÔ∏è';
        if (name.includes('–æ–±—ä–µ–º') || name.includes('volume')) return 'üì¶';
        if (name.includes('–≤–∫—É—Å') || name.includes('taste') || name.includes('flavor')) return 'üç¨';
        if (name.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || name.includes('material')) return 'üßµ';
        return 'üîπ';
      };
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
      Object.entries(variantGroups).forEach(([groupName, variants]: [string, any[]]) => {
        const emoji = getVariantEmoji(groupName);
        text += `\n${emoji} *${groupName}*\n`;
        
        variants.forEach((variant: any) => {
          const variantPrice = variant.price || product.price;
          const variantStock = variant.stock ?? product.stock;
          const stockIcon = variantStock > 10 ? '‚úÖ' : variantStock > 0 ? '‚ö†Ô∏è' : '‚ùå';
          
          text += `  ${stockIcon} ${variant.value}`;
          if (variant.price && variant.price !== product.price) {
            text += ` - *${variantPrice} ${product.store.currency}*`;
          }
          text += ` (${variantStock} —à—Ç.)\n`;
        });
      });

      text += '\nüí° *–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:*\n';

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
      Object.entries(variantGroups).forEach(([groupName, variants]: [string, any[]]) => {
        const emoji = getVariantEmoji(groupName);
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2-3 –≤ —Å—Ç—Ä–æ–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π
        const maxButtonsPerRow = variants.some((v: any) => v.value.length > 10) ? 2 : 3;
        
        for (let i = 0; i < variants.length; i += maxButtonsPerRow) {
          const row: any[] = [];
          for (let j = i; j < Math.min(i + maxButtonsPerRow, variants.length); j++) {
            const variant = variants[j];
            const variantStock = variant.stock ?? product.stock;
            const variantPrice = variant.price || product.price;
            
            if (variantStock > 0) {
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –Ω–∞ –∫–Ω–æ–ø–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π
              let buttonText = `${emoji} ${variant.value}`;
              if (variant.price && variant.price !== product.price) {
                buttonText += ` (${variantPrice} ${product.store.currency})`;
              }
              
              row.push({
                text: buttonText,
                callback_data: `product_variant_${productId}_${variant.id}`
              });
            }
          }
          if (row.length > 0) {
            keyboard.inline_keyboard.push(row);
          }
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      keyboard.inline_keyboard.push([
        {
          text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö',
          callback_data: `product_variants_detail_${productId}`
        }
      ]);
    } else {
      // Simple product: direct purchase
      if (product.stock > 0) {
        text += '\n*üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:*\n';

        // Show quantity options with prices
        const maxQty = Math.min(10, product.stock);
        
        // –ü–µ—Ä–≤—ã–π —Ä—è–¥: 1-5
        if (maxQty >= 1) {
          const row1 = [] as any[];
          for (let i = 1; i <= Math.min(5, maxQty); i++) {
            const totalPrice = (product.price * i).toFixed(2);
            row1.push({
              text: `${i} —à—Ç. (${totalPrice} ${product.store.currency})`,
              callback_data: `buy_simple_${productId}_${i}`
            });
          }
          keyboard.inline_keyboard.push(row1);
        }

        // –í—Ç–æ—Ä–æ–π —Ä—è–¥: 6-10
        if (maxQty > 5) {
          const row2 = [] as any[];
          for (let i = 6; i <= Math.min(10, maxQty); i++) {
            const totalPrice = (product.price * i).toFixed(2);
            row2.push({
              text: `${i} —à—Ç. (${totalPrice} ${product.store.currency})`,
              callback_data: `buy_simple_${productId}_${i}`
            });
          }
          keyboard.inline_keyboard.push(row2);
        }

        // Add custom quantity option if stock > 10
        if (product.stock > 10) {
          keyboard.inline_keyboard.push([
            {
              text: 'üìù –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
              callback_data: `buy_custom_${productId}`
            }
          ]);
        }
      } else {
        text += '\n‚ùå *–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è*\n';
        keyboard.inline_keyboard.push([
          {
            text: 'üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏',
            callback_data: `notify_stock_${productId}`
          }
        ]);
      }
    }

    // Navigation buttons with better UX
    keyboard.inline_keyboard.push([
      {
        text: 'üîô –ö —Ç–æ–≤–∞—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–∞',
        callback_data: `store_products_${product.store?.id || ''}`
      },
      {
        text: 'üè™ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã',
        callback_data: 'store_list'
      }
    ]);

    // Send product images if available
    if (product.images && product.images.length > 0) {
      try {
        await bot.sendPhoto(chatId, product.images[0], {
          caption: text,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });

        // Delete loading message
        await bot.deleteMessage(chatId, loadingMsg.message_id);

        } catch {
          // Fallback to text message if photo fails
        await bot.editMessageText(text, {
          chat_id: chatId,
          message_id: loadingMsg.message_id,
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
      }
    } else {
      await bot.editMessageText(text, {
        chat_id: chatId,
        message_id: loadingMsg.message_id,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }

  } catch (error) {
    await bot.editMessageText(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.',
      { chat_id: chatId, message_id: loadingMsg.message_id }
    );
    throw error;
  }
}

async function showVariantDetails(
  bot: TelegramBot,
  chatId: number,
  session: any,
  productId: string
) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');

  try {
    if (!session.token) {
      await bot.editMessageText(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }

    const productResponse = await apiService.getProduct(productId, session.token);
    const product = productResponse.product;

    if (!product.variants || product.variants.length === 0) {
      await bot.editMessageText(
        '–£ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    const variantGroups: { [key: string]: any[] } = {};
    product.variants.forEach((variant: any) => {
      const groupName = variant.name || '–î—Ä—É–≥–æ–µ';
      if (!variantGroups[groupName]) {
        variantGroups[groupName] = [];
      }
      variantGroups[groupName].push(variant);
    });

    let text = `üìã *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö*\n\n`;
    text += `üõçÔ∏è –¢–æ–≤–∞—Ä: *${product.name}*\n`;
    text += `üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: ${product.price} ${product.store.currency}\n\n`;

    Object.entries(variantGroups).forEach(([groupName, variants]: [string, any[]]) => {
      text += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      text += `üìå *${groupName}* (${variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)\n\n`;

      variants.forEach((variant: any, index: number) => {
        const variantPrice = variant.price || product.price;
        const variantStock = variant.stock ?? product.stock;
        const priceDiff = variant.price ? (variant.price - product.price) : 0;
        const stockStatus = variantStock > 10 ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' :
                          variantStock > 0 ? `‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${variantStock}` :
                          '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';

        text += `${index + 1}. *${variant.value}*\n`;
        text += `   üíµ –¶–µ–Ω–∞: ${variantPrice} ${product.store.currency}`;
        if (priceDiff !== 0) {
          text += ` (${priceDiff > 0 ? '+' : ''}${priceDiff.toFixed(2)})`;
        }
        text += `\n   üì¶ ${stockStatus}\n`;
        if (variant.sku) {
          text += `   üè∑Ô∏è SKU: \`${variant.sku}\`\n`;
        }
        text += `\n`;
      });
    });

    text += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    text += `\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_view_${productId}` }
        ],
        [
          { text: 'üè™ –ö —Ç–æ–≤–∞—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–∞', callback_data: `store_products_${product.store.id}` }
        ]
      ]
    };

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    logger.error('Show variant details error:', error);
    await bot.editMessageText(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö.',
      { chat_id: chatId, message_id: loadingMsg.message_id }
    );
  }
}

async function showCMSProduct(bot: TelegramBot, chatId: number, session: any, cmsProductId: string) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞...');

  try {
    const cmsBase = process.env.CMS_BASE_URL;
    if (!cmsBase) {
      await bot.editMessageText('‚ùå –ö–∞—Ç–∞–ª–æ–≥ CMS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.', { chat_id: chatId, message_id: loadingMsg.message_id });
      return;
    }

    // Try to map CMS product to local product to enable direct purchase
    if (session.token) {
      try {
        const mappingResp = await apiService.getIntegrationMapping(
          { source: 'MEDUSA', entityType: 'PRODUCT', externalId: cmsProductId },
          session.token
        );
        const localId = mappingResp?.mapping?.localId;
        if (localId) {
          // Reuse the local product flow with direct purchase capabilities
          await showProduct(bot, chatId, session, localId);
          try { await bot.deleteMessage(chatId, loadingMsg.message_id); } catch {}
          return;
        }
      } catch (mapErr) {
        logger.debug('No local mapping found, creating direct CMS purchase flow');
      }
    }

    // Enhanced CMS product display with direct purchase capabilities
    const resp = await cmsService.retrieveProduct(cmsProductId);
    const p = resp.product || resp;

    let defaultPrice = 0;
    let defaultStock = 0;
    const variants = p?.variants || [];

    if (variants.length > 0) {
      defaultPrice = (variants[0]?.prices?.[0]?.amount || 0) / 100;
      defaultStock = variants[0]?.inventory_quantity ?? 0;
    }

    // Enhanced display format
    const priceEmoji = defaultPrice > 1000 ? 'üíé' : 'üí∞';
    const stockStatus = defaultStock > 10 ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' :
                       defaultStock > 0 ? `‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${defaultStock} —à—Ç.` : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';

    let text = `üõçÔ∏è *${p.title}*\n`;
    text += `üè∑Ô∏è CMS –ö–∞—Ç–∞–ª–æ–≥\n\n`;

    if (p.description) {
      const shortDesc = p.description.length > 200
        ? p.description.substring(0, 200) + '...'
        : p.description;
      text += `üìù ${shortDesc}\n\n`;
    }

    text += `${priceEmoji} *–¶–µ–Ω–∞: ${defaultPrice} ‚ÇΩ*\n`;
    text += `üì¶ ${stockStatus}\n\n`;

    const keyboard = { inline_keyboard: [] as any[] };

    // Add purchase options for CMS products
    if (defaultStock > 0 && session.token) {
      text += `üõí *–ë—ã—Å—Ç—Ä–∞—è –ø–æ–∫—É–ø–∫–∞:*\n`;

      if (variants.length > 1) {
        text += `\n*üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:*\n`;
        variants.forEach((variant: any, index: number) => {
          const variantPrice = (variant?.prices?.[0]?.amount || 0) / 100;
          const variantStock = variant?.inventory_quantity ?? 0;
          const emoji = index === 0 ? 'üü¶' : index === 1 ? 'üü©' : index === 2 ? 'üü®' : 'üü™';

          text += `${emoji} ${variant.title}: *${variantPrice} ‚ÇΩ*\n`;

          if (variantStock > 0) {
            keyboard.inline_keyboard.push([
              {
                text: `üõí –ö—É–ø–∏—Ç—å ${variant.title}`,
                callback_data: `cms_buy_variant_${cmsProductId}_${variant.id}_1`
              }
            ]);
          }
        });
      } else {
        // Simple product purchase options
        const quantityRow = [] as any[];
        const maxQty = Math.min(5, defaultStock);
        for (let i = 1; i <= maxQty; i++) {
          quantityRow.push({
            text: `${i} —à—Ç.`,
            callback_data: `cms_buy_simple_${cmsProductId}_${i}`
          });
        }

        if (quantityRow.length > 0) {
          keyboard.inline_keyboard.push(quantityRow);
        }

        if (defaultStock > 5) {
          keyboard.inline_keyboard.push([
            {
              text: 'üìù –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
              callback_data: `cms_buy_custom_${cmsProductId}`
            }
          ]);
        }
      }
    } else if (defaultStock === 0) {
      text += `\n‚ùå *–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è*\n`;
      keyboard.inline_keyboard.push([
        {
          text: 'üîî –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏',
          callback_data: `cms_notify_stock_${cmsProductId}`
        }
      ]);
    } else if (!session.token) {
      text += `\n‚ö†Ô∏è *–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è*\n`;
      keyboard.inline_keyboard.push([
        { text: 'üîë –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data: 'login' }
      ]);
    }

    // Navigation buttons
    keyboard.inline_keyboard.push([
      { text: 'üîô –ö —Ç–æ–≤–∞—Ä–∞–º –∫–∞—Ç–∞–ª–æ–≥–∞', callback_data: 'cms_product_list' },
      { text: 'üè™ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }
    ]);

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    logger.error('CMS product view error:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.', {
      chat_id: chatId,
      message_id: loadingMsg.message_id
    });
  }
}

// Direct-buy: show variant-specific quantity selector

async function handleVariantSelection(bot: TelegramBot, chatId: number, session: any, data: string) {
  // Parse data: product_variant_productId_variantId
  const parts = data.split('_');
  if (parts.length < 4) return;

  const productId = parts[2];
  const variantId = parts[3];

  // Show quantity selector for this variant (direct buy)
  await showVariantQuantitySelector(bot, chatId, session, productId, variantId);
}

async function showVariantQuantitySelector(
  bot: TelegramBot,
  chatId: number,
  session: any,
  productId: string,
  variantId: string
) {
  try {
    const token = session.token;
    if (!token) {
      await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
      return;
    }

    const productResponse = await apiService.getProduct(productId, token);
    const product = productResponse.product;
    const variant = product.variants?.find((v: any) => v.id === variantId);

    if (!variant) {
      await bot.sendMessage(chatId, '–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const variantStock = variant?.stock ?? null;
    const baseStock = product.stock ?? 0;
    const availableStock = variantStock !== null ? variantStock : baseStock;
    const price = variant.price || product.price;
    const currency = product.store.currency;

    let text = `üõí *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*\n\n`;
    text += `üõçÔ∏è –¢–æ–≤–∞—Ä: *${product.name}*\n`;
    text += `üé® –í–∞—Ä–∏–∞–Ω—Ç: *${variant.name}: ${variant.value}*\n`;
    text += `üí∞ –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç: *${price} ${currency}*\n`;
    text += `üì¶ –í –Ω–∞–ª–∏—á–∏–∏: *${availableStock} —à—Ç.*\n\n`;
    
    const keyboard = { inline_keyboard: [] as any[] };

    // Quantity buttons with prices
    const maxSelectable = Math.min(10, availableStock);
    
    // –ü–µ—Ä–≤—ã–π —Ä—è–¥: 1-5
    if (maxSelectable >= 1) {
      const row1: any[] = [];
      for (let i = 1; i <= Math.min(5, maxSelectable); i++) {
        const totalPrice = (price * i).toFixed(2);
        row1.push({
          text: `${i} —à—Ç. (${totalPrice} ${currency})`,
          callback_data: `buy_variant_${productId}_${variantId}_${i}`
        });
      }
      keyboard.inline_keyboard.push(row1);
    }

    // –í—Ç–æ—Ä–æ–π —Ä—è–¥: 6-10 (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (maxSelectable > 5) {
      const row2: any[] = [];
      for (let i = 6; i <= Math.min(10, maxSelectable); i++) {
        const totalPrice = (price * i).toFixed(2);
        row2.push({
          text: `${i} —à—Ç. (${totalPrice} ${currency})`,
          callback_data: `buy_variant_${productId}_${variantId}_${i}`
        });
      }
      keyboard.inline_keyboard.push(row2);
    }

    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (availableStock > 10) {
      keyboard.inline_keyboard.push([
        {
          text: 'üìù –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
          callback_data: `buy_custom_variant_${productId}_${variantId}`
        }
      ]);
    }

    // Navigation buttons
    keyboard.inline_keyboard.push([
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_view_${productId}` },
      { text: 'üè™ –ö —Ç–æ–≤–∞—Ä–∞–º', callback_data: `store_products_${product.store.id}` }
    ]);

    await bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    logger.error('Variant quantity selector error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞.');
  }
}

async function handleQuantitySelection(bot: TelegramBot, chatId: number, session: any, data: string) {
  // Parse data: buy_simple_productId_quantity or buy_variant_productId_variantId_quantity
  const parts = data.split('_');
  if (data.startsWith('buy_variant_')) {
    if (parts.length < 5) return;
    const productId = parts[2];
    const variantId = parts[3];
    const quantity = parseInt(parts[4]);
    await showBuyConfirmation(bot, chatId, session, productId, variantId, quantity);
  } else if (data.startsWith('buy_simple_')) {
    if (parts.length < 4) return;
    const productId = parts[2];
    const quantity = parseInt(parts[3]);
    await showBuyConfirmation(bot, chatId, session, productId, undefined, quantity);
  }
}

async function showBuyConfirmation(
  bot: TelegramBot,
  chatId: number,
  session: any,
  productId: string,
  variantId: string | undefined,
  quantity: number
) {
  try {
    if (!session.token) {
      await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
      return;
    }

    const productResponse = await apiService.getProduct(productId, session.token);
    const product = productResponse.product;
    const variant = variantId ? product.variants?.find((v: any) => v.id === variantId) : null;

    const pricePerUnit = variant?.price || product.price;
    const total = pricePerUnit * quantity;

    let text = `üßæ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n`;
    text += `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${product.store.name}\n`;
    text += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.name}${variant ? ` (${variant.name}: ${variant.value})` : ''}\n`;
    text += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
    text += `üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${pricePerUnit} ${product.store.currency}\n`;
    text += `üí≥ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${total} ${product.store.currency}*\n\n`;
    text += `‚ö° –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–ø–ª–∞—Ç–µ.`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `buy_confirm_${productId}_${variantId || 'null'}_${quantity}` }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `product_view_${productId}` },
          { text: 'üè™ –ö —Ç–æ–≤–∞—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–∞', callback_data: `store_products_${product.store.id}` }
        ]
      ]
    };

    await bot.sendMessage(chatId, text, { parse_mode: 'Markdown', reply_markup: keyboard });
  } catch (error) {
    logger.error('Show buy confirmation error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
  }
}

async function handleBuyConfirmation(
  bot: TelegramBot,
  chatId: number,
  session: any,
  data: string
) {
  try {
    if (!session.token) {
      await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
      return;
    }

    // buy_confirm_productId_variantOrNull_quantity
    const parts = data.split('_');
    if (parts.length < 5) return;
    const productId = parts[2];
    const variantId = parts[3] !== 'null' ? parts[3] : undefined;
    const quantity = parseInt(parts[4]);

    const productResponse = await apiService.getProduct(productId, session.token);
    const product = productResponse.product;

    // Stock check
    let availableStock = product.stock ?? 0;
    let price = product.price;
    let variant = null;
    if (variantId) {
      variant = product.variants?.find((v: any) => v.id === variantId);
      if (!variant) {
        await bot.sendMessage(chatId, '–í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }
      if (typeof variant.stock === 'number') availableStock = variant.stock;
      if (variant.price) price = variant.price;
    }
    if (availableStock < quantity) {
      await bot.sendMessage(chatId, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableStock}`);
      return;
    }

    // Create order directly
    const orderResponse = await apiService.createOrder({
      storeId: product.store.id,
      items: [
        {
          productId,
          variantId,
          quantity,
          price
        }
      ],
      currency: product.store.currency
    }, session.token);

    const orderSummary = orderResponse.order ?? (orderResponse as unknown as OrderSummary);
    const totalAmount = orderSummary.totalAmount ?? (price * quantity);
    const orderNumber = orderSummary.orderNumber ? `#${orderSummary.orderNumber}` : '';

    let payText = `‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!* ${orderNumber}\n\n`;
    payText += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.name}${variant ? ` (${variant.name}: ${variant.value})` : ''}\n`;
    payText += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
    payText += `üí≥ *–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} ${product.store.currency}*\n`;
    payText += `üè™ –ú–∞–≥–∞–∑–∏–Ω: ${product.store.name}\n\n`;
    payText += `üí∞ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:*\n`;

    // Load bot settings for payment instructions/requisites
    const settingsResp = await apiService.getBotSettings(product.store.id, session.token);
    logger.info('üí≥ Bot settings response:', JSON.stringify(settingsResp, null, 2));

    const settings = (settingsResp?.settings as Record<string, unknown>) || {};
    const paymentInstructions = (settings.paymentInstructions as string) || '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ';
    const requisites = settings.paymentRequisites as { card?: string; bank?: string; receiver?: string; comment?: string } | null | undefined;

    logger.info('üí≥ Payment instructions:', paymentInstructions);
    logger.info('üí≥ Payment requisites:', JSON.stringify(requisites, null, 2));

    payText += `üìù ${paymentInstructions}\n\n`;

    // Show requisites if available
    if (requisites && typeof requisites === 'object') {
      const hasAnyRequisite = requisites.card || requisites.bank || requisites.receiver || requisites.comment;

      if (hasAnyRequisite) {
        payText += `üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n`;
        if (requisites.card) payText += `üí≥ –ö–∞—Ä—Ç–∞: \`${requisites.card}\`\n`;
        if (requisites.bank) payText += `üè¶ –ë–∞–Ω–∫: ${requisites.bank}\n`;
        if (requisites.receiver) payText += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${requisites.receiver}\n`;
        if (requisites.comment) payText += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${requisites.comment}\n`;
      } else {
        payText += `‚ùóÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞\n`;
      }
    } else {
      payText += `‚ùóÔ∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n`;
    }

    payText += `\nüì∏ *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)*\n`;
    payText += `üìã –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}\n`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã', callback_data: `upload_proof_${orderSummary.id}` }
        ],
        [
          { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' },
          { text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }
        ]
      ]
    };

    await bot.sendMessage(chatId, payText, { parse_mode: 'Markdown', reply_markup: keyboard });

    // Automatically generate and send QR code if enabled
    if (process.env.AUTO_GENERATE_QR === 'true' && product.store) {
      const storeSummary: StoreSummary = {
        id: product.store.id,
        name: product.store.name,
        slug: (product.store as any).slug ?? product.store.id,
        currency: product.store.currency,
        status: (product.store as any).status,
        description: (product.store as any).description,
        ownerId: (product.store as any).ownerId,
        botUsername: (product.store as any).botUsername,
        contactInfo: (product.store as any).contactInfo,
        _count: (product.store as any)._count
      };
      await generateAndSendQRCode(bot, chatId, orderSummary, storeSummary, session);
    }
  } catch (error) {
    logger.error('Direct buy confirmation error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// =================================
// CMS DIRECT PURCHASE FUNCTIONALITY
// =================================

async function handleCMSPurchase(bot: TelegramBot, chatId: number, session: any, data: string) {
  try {
    if (!session.token) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
      return;
    }

    let cmsProductId = '';
    let variantId: string | undefined;
    let quantity = 1;

    if (data.startsWith('cms_buy_simple_')) {
      // cms_buy_simple_productId_quantity
      const parts = data.replace('cms_buy_simple_', '').split('_');
      cmsProductId = parts[0];
      quantity = parseInt(parts[1]) || 1;
    } else if (data.startsWith('cms_buy_variant_')) {
      // cms_buy_variant_productId_variantId_quantity
      const parts = data.replace('cms_buy_variant_', '').split('_');
      cmsProductId = parts[0];
      variantId = parts[1];
      quantity = parseInt(parts[2]) || 1;
    } else if (data.startsWith('cms_buy_custom_')) {
      // cms_buy_custom_productId
      cmsProductId = data.replace('cms_buy_custom_', '');
      await bot.sendMessage(chatId, 'üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):');
      // Store in session for processing
      userSessions.updateSession(session.telegramId, {
        tempData: { awaitingQuantity: true, cmsProductId }
      });
      return;
    }

    await showCMSBuyConfirmation(bot, chatId, session, cmsProductId, variantId, quantity);
  } catch (error) {
    logger.error('CMS purchase error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ CMS —Ç–æ–≤–∞—Ä–∞.');
  }
}

async function showCMSBuyConfirmation(
  bot: TelegramBot,
  chatId: number,
  session: any,
  cmsProductId: string,
  variantId?: string,
  quantity: number = 1
) {
  try {
    const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∑–∞–∫–∞–∑...');

    // Get CMS product details
    const resp = await cmsService.retrieveProduct(cmsProductId);
    const product = resp.product || resp;

    let price = 0;
    let stock = 0;
    let variant = null;
    const variants = product?.variants || [];

    if (variantId) {
      variant = variants.find((v: any) => v.id === variantId);
      if (!variant) {
        await bot.editMessageText('‚ùå –í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
          chat_id: chatId,
          message_id: loadingMsg.message_id
        });
        return;
      }
      price = (variant?.prices?.[0]?.amount || 0) / 100;
      stock = variant?.inventory_quantity ?? 0;
    } else if (variants.length > 0) {
      price = (variants[0]?.prices?.[0]?.amount || 0) / 100;
      stock = variants[0]?.inventory_quantity ?? 0;
    }

    // Check stock availability
    if (stock < quantity) {
      await bot.editMessageText(
        `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n–í –Ω–∞–ª–∏—á–∏–∏: ${stock} —à—Ç.\n–ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${quantity} —à—Ç.`,
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }

    const total = price * quantity;

    let text = `üßæ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ CMS*\n\n`;
    text += `üè∑Ô∏è –ö–∞—Ç–∞–ª–æ–≥: CMS\n`;
    text += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.title}${variant ? ` (${variant.title})` : ''}\n`;
    text += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
    text += `üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${price} ‚ÇΩ\n`;
    text += `üí≥ *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${total} ‚ÇΩ*\n\n`;
    text += `‚ö° –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–ø–ª–∞—Ç–µ.\n`;
    text += `üìã –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å CMS —Å–∏—Å—Ç–µ–º–æ–π.`;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑',
            callback_data: `cms_buy_confirm_${cmsProductId}_${variantId || 'null'}_${quantity}`
          }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `cms_product_view_${cmsProductId}` },
          { text: 'üè™ –ö –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'cms_product_list' }
        ]
      ]
    };

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    logger.error('Show CMS buy confirmation error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ CMS.');
  }
}

async function handleCMSPurchaseConfirmation(
  bot: TelegramBot,
  chatId: number,
  session: any,
  data: string
) {
  try {
    if (!session.token) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
      return;
    }

    // cms_buy_confirm_productId_variantOrNull_quantity
    const parts = data.split('_');
    if (parts.length < 5) return;

    const cmsProductId = parts[2];
    const variantId = parts[3] !== 'null' ? parts[3] : undefined;
    const quantity = parseInt(parts[4]);

    const loadingMsg = await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –∑–∞–∫–∞–∑ –≤ CMS...');

    // Get CMS product details
    const resp = await cmsService.retrieveProduct(cmsProductId);
    const product = resp.product || resp;
    const variants = product?.variants || [];

    let price = 0;
    let stock = 0;
    let variant = null;

    if (variantId) {
      variant = variants.find((v: any) => v.id === variantId);
      price = (variant?.prices?.[0]?.amount || 0) / 100;
      stock = variant?.inventory_quantity ?? 0;
    } else if (variants.length > 0) {
      price = (variants[0]?.prices?.[0]?.amount || 0) / 100;
      stock = variants[0]?.inventory_quantity ?? 0;
    }

    // Final stock check
    if (stock < quantity) {
      await bot.editMessageText(`‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏. –î–æ—Å—Ç—É–ø–Ω–æ: ${stock}`, {
        chat_id: chatId,
        message_id: loadingMsg.message_id
      });
      return;
    }

    // Create order in local system with CMS reference
    const orderData = {
      cmsProductId,
      cmsVariantId: variantId,
      productName: product.title,
      variantName: variant?.title,
      quantity,
      price,
      currency: 'RUB', // Default for CMS
      source: 'CMS',
      externalData: {
        cmsProductId,
        cmsVariantId: variantId,
        productTitle: product.title,
        variantTitle: variant?.title
      }
    };

    // Create order through API
    const order = await apiService.createOrder(orderData, session.token);

    const totalAmount = order.totalAmount ?? (price * quantity);
    const orderNumber = order.orderNumber ? `#${order.orderNumber}` : '';

    let successText = `‚úÖ *CMS –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!* ${orderNumber}\n\n`;
    successText += `üõçÔ∏è –¢–æ–≤–∞—Ä: ${product.title}${variant ? ` (${variant.title})` : ''}\n`;
    successText += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`;
    successText += `üí≥ *–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${totalAmount} ‚ÇΩ*\n`;
    successText += `üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫: CMS –ö–∞—Ç–∞–ª–æ–≥\n\n`;
    successText += `üí∞ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ:*\n`;
    successText += `1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n`;
    successText += `2Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n`;
    successText += `3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n`;
    successText += `4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n`;
    successText += `üîÑ –ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å CMS —Å–∏—Å—Ç–µ–º–æ–π.`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã', callback_data: `upload_proof_${order.id}` }],
        [
          { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' },
          { text: 'üè™ –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'cms_product_list' }
        ]
      ]
    };

    await bot.editMessageText(successText, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    // SECURITY FIX (CWE-117): Sanitize for logging to prevent log injection
    const { sanitizeForLog } = require('../utils/sanitizer');
    logger.info(`CMS order created: ${sanitizeForLog(order.id)} for product ${sanitizeForLog(cmsProductId)} by user ${sanitizeForLog(session.telegramId)}`);

  } catch (error) {
    logger.error('CMS purchase confirmation error:', error);
    await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CMS –∑–∞–∫–∞–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
}

async function handleCMSStockNotification(
  bot: TelegramBot,
  chatId: number,
  session: any,
  data: string
) {
  try {
    const cmsProductId = data.replace('cms_notify_stock_', '');

    // Create stock notification request
    if (session.token) {
      // TODO: Implement stock notification system
      logger.info(`Stock notification requested for product ${cmsProductId} by user ${session.telegramId}`);

      await bot.sendMessage(chatId,
        `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!*\n\n` +
        `–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –ø–æ—è–≤–∏—Ç—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏.\n` +
        `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.`,
        { parse_mode: 'Markdown' }
      );
    } else {
      await bot.sendMessage(chatId, '‚ùå –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.');
    }
  } catch (error) {
    logger.error('CMS stock notification error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
  }
}

// =================================
// QR CODE PAYMENT FUNCTIONALITY
// =================================

async function handleQRGeneration(
  bot: TelegramBot,
  chatId: number,
  session: any,
  data: string
) {
  try {
    const orderId = data.replace('generate_qr_', '');

    if (!session.token) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞.');
      return;
    }

    const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã...');

    // Get order details
    const orderResponse = await apiService.getOrder(orderId, session.token);
    const order = orderResponse.order;

    const store = order.store;
    if (!store) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞.');
      return;
    }

    const storeSummary: StoreSummary = {
      id: store.id,
      name: store.name,
      slug: (store as any).slug ?? store.id,
      currency: (store as any).currency ?? '‚Äî',
      status: (store as any).status,
      description: (store as any).description,
      ownerId: (store as any).ownerId,
      botUsername: (store as any).botUsername,
      contactInfo: (store as any).contactInfo,
      _count: (store as any)._count
    };

    await generateAndSendQRCode(bot, chatId, order, storeSummary, session, loadingMsg.message_id);

  } catch (error) {
    logger.error('QR generation error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞.');
  }
}

async function generateAndSendQRCode(
  bot: TelegramBot,
  chatId: number,
  order: OrderSummary,
  store: StoreSummary,
  session: any,
  editMessageId?: number
) {
  try {
    const authToken = session?.token;

    let paymentSettings: any = {};
    if (authToken) {
      try {
        const storeSettings = await ttlCache.wrap(
          `bot-settings:${store.id}`,
          5 * 60 * 1000,
          async () => apiService.getBotSettings(store.id, authToken)
        );
        paymentSettings = storeSettings?.settings?.paymentSettings || {};
      } catch (error) {
        logger.warn('Failed to fetch bot settings for QR generation', {
          storeId: store.id,
          error: error instanceof Error ? error.message : error
        });
      }
    } else {
      logger.warn('Missing user token for QR generation', {
        storeId: store.id
      });
    }

    // Prepare QR data
    const qrData = {
      orderId: order.orderNumber,
      amount: order.totalAmount,
      currency: order.currency,
      recipientCard: paymentSettings.cardNumber,
      recipientName: paymentSettings.recipientName || store.name,
      bankName: paymentSettings.bankName,
      comment: `–ó–∞–∫–∞–∑ ${order.orderNumber}`,
      paymentSystem: 'SBP' as const
    };

    // Validate QR data
    if (!qrPaymentService.validatePaymentData(qrData)) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞.');
      return;
    }

    // Generate multiple QR codes
    const qrCodes = await qrPaymentService.generateMultiPaymentQRs(qrData);

    // Generate payment instructions
    const instructions = qrPaymentService.generatePaymentInstructions(qrData);

    // Send QR codes with instructions
    let messageText = `üì± *QR-–∫–æ–¥—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ #${order.orderNumber}*\n\n`;
    messageText += `üí∞ –°—É–º–º–∞: ${order.totalAmount} ${order.currency}\n\n`;
    messageText += `–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üè¶ –°–ë–ü (–ª—é–±–æ–π –±–∞–Ω–∫)', callback_data: `qr_sbp_${order.id}` },
          { text: 'üü¢ –°–±–µ—Ä–±–∞–Ω–∫', callback_data: `qr_sberbank_${order.id}` }
        ],
        [
          { text: 'üü° –¢–∏–Ω—å–∫–æ—Ñ—Ñ', callback_data: `qr_tinkoff_${order.id}` },
          { text: 'üîó –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', callback_data: `qr_custom_${order.id}` }
        ],
        [
          { text: 'üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ', callback_data: `qr_instructions_${order.id}` }
        ],
        [
          { text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫', callback_data: `upload_proof_${order.id}` },
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `order_details_${order.id}` }
        ]
      ]
    };

    if (editMessageId) {
      await bot.editMessageText(messageText, {
        chat_id: chatId,
        message_id: editMessageId,
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      await bot.sendMessage(chatId, messageText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }

    // Send SBP QR code by default
    await bot.sendPhoto(chatId, qrCodes.sbp, {
      caption: `üè¶ *QR-–∫–æ–¥ –°–ë–ü –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.orderNumber}*\n\n` +
               `üí∞ –°—É–º–º–∞: ${order.totalAmount} ${order.currency}\n` +
               `üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–∞–º–µ—Ä–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è`,
      parse_mode: 'Markdown'
    });

    // Store QR codes for later use
    await storeQRCodes(order.id, qrCodes, store.id);

    logger.info(`QR codes generated for order ${order.id}`, {
      orderNumber: order.orderNumber,
      amount: order.totalAmount,
      currency: order.currency,
      storeId: store.id
    });

  } catch (error) {
    logger.error('QR code generation failed:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤.');
  }
}

async function handleQRTypeSelection(
  bot: TelegramBot,
  chatId: number,
  data: string,
  session: any
) {
  try {
    const [qrType, orderId] = data.split('_').slice(1);

    const orderResponse = await apiService.getOrder(orderId, session.token);
    const order = orderResponse.order;

    const qrCodes = await getStoredQRCodes(orderId);
    if (!qrCodes) {
      await bot.sendMessage(chatId, '‚ùå QR-–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    let qrBuffer: Buffer;
    let caption = '';

    switch (qrType) {
      case 'sbp':
        qrBuffer = qrCodes.sbp;
        caption = `üè¶ *QR-–∫–æ–¥ –°–ë–ü*\n\nüì± –î–ª—è –ª—é–±–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞`;
        break;
      case 'sberbank':
        qrBuffer = qrCodes.sberbank;
        caption = `üü¢ *QR-–∫–æ–¥ –°–±–µ—Ä–±–∞–Ω–∫–∞*\n\nüì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –°–±–µ—Ä–±–∞–Ω–∫ –û–Ω–ª–∞–π–Ω`;
        break;
      case 'tinkoff':
        qrBuffer = qrCodes.tinkoff;
        caption = `üü° *QR-–∫–æ–¥ –¢–∏–Ω—å–∫–æ—Ñ—Ñ*\n\nüì± –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫–∞`;
        break;
      case 'custom':
        qrBuffer = qrCodes.custom;
        caption = `üîó *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π QR-–∫–æ–¥*\n\nüì± –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã`;
        break;
      case 'instructions':
        const instructions = qrPaymentService.generatePaymentInstructions({
          orderId: order.orderNumber,
          amount: order.totalAmount,
          currency: order.currency,
          comment: `–ó–∞–∫–∞–∑ ${order.orderNumber}`,
          paymentSystem: 'SBP'
        });

        await bot.sendMessage(chatId, instructions, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö QR-–∫–æ–¥–∞–º', callback_data: `generate_qr_${orderId}` }]
            ]
          }
        });
        return;
      default:
        await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø QR-–∫–æ–¥–∞.');
        return;
    }

    caption += `\n\nüí∞ –°—É–º–º–∞: ${order.totalAmount} ${order.currency}`;
    caption += `\nüìã –ó–∞–∫–∞–∑: #${order.orderNumber}`;
    caption += `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ó–∞–∫–∞–∑ ${order.orderNumber}`;

    await bot.sendPhoto(chatId, qrBuffer, {
      caption,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫', callback_data: `upload_proof_${orderId}` },
            { text: 'üîô –ö QR-–∫–æ–¥–∞–º', callback_data: `generate_qr_${orderId}` }
          ]
        ]
      }
    });

  } catch (error) {
    logger.error('QR type selection error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ QR-–∫–æ–¥–∞.');
  }
}

async function storeQRCodes(orderId: string, qrCodes: any, storeId: string) {
  const payload = {
    orderId,
    qrCodes,
    generatedAt: new Date().toISOString(),
    storeId
  };
  await ttlCache.set(`qr-codes:${orderId}`, payload, 10 * 60 * 1000);
}

async function getStoredQRCodes(orderId: string): Promise<any | null> {
  try {
    return ttlCache.get(`qr:codes:${orderId}`) || null;
  } catch (error) {
    logger.error('Failed to get stored QR codes:', error);
    return null;
  }
}

