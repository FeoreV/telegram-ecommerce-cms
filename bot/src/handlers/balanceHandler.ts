import TelegramBot from 'node-telegram-bot-api';
import { apiService } from '../services/apiService';
import { userSessions } from '../utils/sessionManager';
import { logger } from '../utils/logger';

export async function handleBalance(
  bot: TelegramBot,
  msg: TelegramBot.Message,
  callbackQuery?: TelegramBot.CallbackQuery
) {
  const chatId = msg.chat.id;
  const userId = (callbackQuery?.from?.id || msg.from?.id)?.toString();

  if (!userId) return;

  const session = userSessions.getSession(userId);

  try {
    if (!callbackQuery?.data || callbackQuery.data === 'balance_topup') {
      await showBalanceTopup(bot, chatId, session);
    }
  } catch (error) {
    logger.error('Balance handler error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–ª–∞–Ω—Å–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function showBalanceTopup(bot: TelegramBot, chatId: number, session: any) {
  if (!session.token) {
    await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start');
    return;
  }

  try {
    // Get user balance
    const userBalance = await apiService.getUserBalance(session.token);
    const balance = userBalance?.balance ?? 0;

    // Get all stores to find P2P payment details from any store
    // (in a real scenario, you might want to use a specific store or global settings)
    const storesResponse = await apiService.getStores(session.token);
    const stores = (storesResponse?.stores ?? []) as any[];
    
    let paymentRequisites = null;
    let storeName = '–º–∞–≥–∞–∑–∏–Ω–∞';

    // Try to find payment requisites from any store with a bot
    for (const store of stores) {
      if (store.botUsername && store.id) {
        try {
          const settingsResp = await apiService.getBotSettings(store.id, session.token);
          const settings = (settingsResp?.settings as Record<string, any>) || {};
          const requisites = settings.paymentRequisites || settings.requisites || null;
          
          const hasRequisites = requisites && (
            requisites.card || 
            requisites.bank || 
            requisites.receiver || 
            requisites.comment
          );
          
          if (hasRequisites) {
            paymentRequisites = requisites;
            storeName = store.name;
            break; // Use first store with requisites
          }
        } catch (e) {
          logger.warn(`Failed to fetch payment requisites for store ${store.id}`, e);
        }
      }
    }

    let text = `üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n`;
    text += `üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${balance.toFixed(2)} ‚ÇΩ\n\n`;

    if (paymentRequisites) {
      text += `üìù *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (${storeName}):*\n\n`;
      
      if (paymentRequisites.card) {
        text += `üí≥ *–ö–∞—Ä—Ç–∞:* \`${paymentRequisites.card}\`\n`;
      }
      if (paymentRequisites.bank) {
        text += `üè¶ *–ë–∞–Ω–∫:* ${paymentRequisites.bank}\n`;
      }
      if (paymentRequisites.receiver) {
        text += `üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* ${paymentRequisites.receiver}\n`;
      }
      if (paymentRequisites.comment) {
        text += `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${paymentRequisites.comment}\n`;
      }
      
      text += `\nüìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n`;
      text += `1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º\n`;
      text += `2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n`;
      text += `3. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n`;
      text += `‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤`;
    } else {
      text += `‚ùå *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã*\n\n`;
      text += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.`;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile_menu' }
        ],
        [
          { text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
        ]
      ]
    };

    await bot.sendMessage(chatId, text, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    logger.error('Show balance topup error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
  }
}

