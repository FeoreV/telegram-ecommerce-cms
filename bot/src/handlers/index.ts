import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../utils/logger';
import { sanitizeForLog } from '../utils/sanitizer';
import { handleAdmin, handlePossibleOrderId } from './adminHandler';
import { handleBalance } from './balanceHandler';
import { handleBotCreationCallback, handleBotCreationMessage, handleBotCreationSkipCallback } from './botCreationHandler';
import { handleOrders } from './orderHandler';
import { handlePaymentProofCallback, handlePaymentProofFlow } from './paymentProofHandler';
import { handleProducts } from './productHandler';
import { handleProfile } from './profileHandler';
import { handleStart } from './startHandler';
import { handleStoreCreationMessage, handleStores } from './storeHandler';

export function setupHandlers(bot: TelegramBot) {
  // Command handlers
  bot.onText(/\/start/, (msg) => handleStart(bot, msg));
  bot.onText(/\/stores/, (msg) => handleStores(bot, msg));
  bot.onText(/\/orders/, (msg) => handleOrders(bot, msg));
  bot.onText(/\/admin/, (msg) => handleAdmin(bot, msg));
  bot.onText(/\/help/, (msg) => handleHelp(bot, msg));

  // Callback query handlers
  bot.on('callback_query', async (callbackQuery) => {
    const { data, message } = callbackQuery;

    if (!data || !message) return;

    try {
      // Route callback queries to appropriate handlers
      if (data === 'main_menu') {
        // Return to main menu
        await handleStart(bot, message);
      } else if (data === 'help') {
        await handleHelp(bot, message);
      } else if (data.startsWith('balance_')) {
        await handleBalance(bot, message, callbackQuery);
      } else if (data.startsWith('profile_')) {
        await handleProfile(bot, message, callbackQuery);
      } else if (data.startsWith('store_')) {
        logger.debug(`Handling store callback for user ${message.from?.id}: ${sanitizeForLog(data)}`);
        await handleStores(bot, message, callbackQuery);
      } else if (data.startsWith('product_') || data.startsWith('cms_product_')) {
        await handleProducts(bot, message, callbackQuery);
      } else if (data.startsWith('order_')) {
        await handleOrders(bot, message, callbackQuery);
      } else if (
        data.startsWith('admin_') ||
        data.startsWith('verify_order_') ||
        data.startsWith('reject_order_') ||
        data.startsWith('orders_') ||
        data.startsWith('analytics_') ||
        data.startsWith('alerts_') ||
        data.startsWith('confirm_payment_') ||
        data.startsWith('confirm_reject_')
      ) {
        await handleAdmin(bot, message, callbackQuery);
      } else if (data.startsWith('upload_proof_') || data === 'cancel_payment_proof') {
        await handlePaymentProofCallback(bot, callbackQuery);
      } else if (data.startsWith('bot_') || data === 'create_bot' || data.includes('bot')) {
        // Handle bot creation and management callbacks
        const handled = await handleBotCreationCallback(bot, message.chat.id, data) ||
                       await handleBotCreationSkipCallback(bot, message.chat.id, data);
        if (!handled) {
          logger.warn(`Unhandled bot callback: ${sanitizeForLog(data)}`);
        }
      }

      // Answer callback query to remove loading state
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      logger.error('Callback query error:', error);
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        show_alert: true,
      });
    }
  });

  // Message handlers for text input, photos, and documents
  bot.on('message', async (msg) => {
    // Skip if it's a command (already handled above)
    if (msg.text?.startsWith('/')) return;

    try {
      // Handle payment proof uploads (photos and documents)
      if (msg.photo || msg.document) {
        await handlePaymentProofFlow(bot, msg);
        return;
      }

      // Handle store creation input
      await handleStoreCreationMessage(bot, msg);

      // Handle bot creation input
      await handleBotCreationMessage(bot, msg);

      // Handle contact info input during order process
      if (msg.text && msg.contact) {
        await handleOrders(bot, msg);
      } else if (msg.text) {
        // Handle payment proof text responses or general text messages
        await handlePaymentProofFlow(bot, msg);
        const handledAdmin = await handlePossibleOrderId(bot, msg.chat.id, msg.text);
        if (!handledAdmin) {
          await handleTextMessage(bot, msg);
        }
      }
    } catch (error) {
      logger.error('Message handler error:', error);
      await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });

  logger.info('‚úÖ Bot handlers configured');
}

async function handleHelp(bot: TelegramBot, msg: TelegramBot.Message) {
  const helpText = `
‚ùì *–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/stores - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*
1. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ üè™
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π üõçÔ∏è
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É ‚úÖ
4. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ üí≥
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚è≥

*üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: support@example.com
‚Ä¢ Telegram: @support_bot
‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)

*–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–∞–º–∏

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url: 'https://t.me/support' }
      ],
      [
        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await bot.sendMessage(msg.chat.id, helpText, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

async function handleTextMessage(bot: TelegramBot, msg: TelegramBot.Message) {
  // This could handle various text inputs based on user's current state
  // For now, just provide a helpful response
  await bot.sendMessage(
    msg.chat.id,
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É:\n' +
    '/stores - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤\n' +
    '/help - –ü–æ–º–æ—â—å'
  );
}
