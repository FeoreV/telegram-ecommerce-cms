import TelegramBot from 'node-telegram-bot-api';
import { apiService } from '../services/apiService';
import { cmsService } from '../services/cmsService';
import { ttlCache } from '../utils/cache';
import { userSessions } from '../utils/sessionManager';
import { logger } from '../utils/logger';
import { ApiPagination } from '../types/apiResponses';

export async function handleStores(
  bot: TelegramBot, 
  msg: TelegramBot.Message, 
  callbackQuery?: TelegramBot.CallbackQuery
) {
  const chatId = msg.chat.id;
  // Use callbackQuery.from.id if available (button press), otherwise msg.from.id (command)
  const userId = (callbackQuery?.from?.id || msg.from?.id)?.toString();

  if (!userId) return;

  const session = userSessions.getSession(userId);
  
  // Debug: log session info
  logger.debug(`Store handler - session check:`, {
    telegramId: session.telegramId,
    userId: session.userId,
    hasToken: !!session.token,
    role: session.role
  });
  
  try {
    if (callbackQuery?.data === 'store_list') {
      await showStoreList(bot, chatId, session);
    } else if (callbackQuery?.data?.startsWith('store_select_')) {
      const storeId = callbackQuery.data.replace('store_select_', '');
      await showStore(bot, chatId, session, storeId);
    } else if (callbackQuery?.data?.startsWith('store_products_')) {
      const storeId = callbackQuery.data.replace('store_products_', '');
      await showStoreProducts(bot, chatId, session, storeId);
    } else if (callbackQuery?.data === 'store_create') {
      await showCreateStoreForm(bot, chatId, session);
    } else if (callbackQuery?.data === 'store_create_start') {
      await startStoreCreation(bot, chatId, session);
    } else if (callbackQuery?.data?.startsWith('store_create_skip_')) {
      await handleStoreSkipStep(bot, chatId, session, callbackQuery.data);
    } else if (callbackQuery?.data?.startsWith('store_create_use_slug_')) {
      const slug = callbackQuery.data.replace('store_create_use_slug_', '');
      await handleStoreSlugInput(bot, chatId, session, slug);
    } else if (callbackQuery?.data?.startsWith('store_create_currency_')) {
      const currency = callbackQuery.data.replace('store_create_currency_', '');
      await handleStoreCurrencyInput(bot, chatId, session, currency);
    } else {
      // Default to showing store list
      await showStoreList(bot, chatId, session);
    }
  } catch (error) {
    logger.error('Store handler error:', error);
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function showStoreList(bot: TelegramBot, chatId: number, session: any) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞–≥–∞–∑–∏–Ω—ã...');

  try {
    logger.debug(`showStoreList - session debug:`, {
      telegramId: session.telegramId,
      userId: session.userId,
      hasToken: !!session.token,
      tokenPreview: session.token ? session.token.substring(0, 20) + '...' : 'NO TOKEN',
      role: session.role,
      sessionKeys: Object.keys(session)
    });
    
    if (!session.token) {
      logger.warn(`No token found for user ${session.telegramId}`);
      await bot.editMessageText(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }
    
    const storesResponse = await apiService.getStores(session.token, 1, 10);
    const stores = storesResponse.stores ?? storesResponse.items ?? [];

    if (stores.length === 0) {
      await bot.editMessageText(
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }

    let text = 'üè™ *–ù–∞—à–∏ –º–∞–≥–∞–∑–∏–Ω—ã*\n\nüõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞:\n\n';
    const keyboard = { inline_keyboard: [] as any[] };

    stores.forEach((store: any, index: number) => {
      const storeEmoji = index === 0 ? 'üõçÔ∏è' : index === 1 ? 'üéÅ' : index === 2 ? 'üõí' : 'üè™';
      
      text += `${storeEmoji} *${store.name}*\n`;
      if (store.description) {
        const shortDesc = store.description.length > 100 
          ? store.description.substring(0, 100) + '...' 
          : store.description;
        text += `üìÑ ${shortDesc}\n`;
      }
      text += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${store._count.products} ‚Ä¢ üí∞ ${store.currency}\n\n`;

      keyboard.inline_keyboard.push([
        { 
          text: `${storeEmoji} ${store.name}`, 
          callback_data: `store_select_${store.id}` 
        }
      ]);
    });

    // Add create store button for admins and owners
    if (['ADMIN', 'OWNER'].includes(session.role)) {
      keyboard.inline_keyboard.push([
        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'store_create' }
      ]);
    }

    // Add navigation buttons
    keyboard.inline_keyboard.push([
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    await bot.editMessageText(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤.',
      { chat_id: chatId, message_id: loadingMsg.message_id }
    );
    throw error;
  }
}

async function showStore(bot: TelegramBot, chatId: number, session: any, storeId: string) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ...');

  try {
    if (!session.token) {
      await bot.editMessageText(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }
    
    const storeResponse = await apiService.getStore(storeId, session.token);
    const store = storeResponse.store;

    // Update session with current store
    userSessions.updateSession(session.telegramId, { currentStore: storeId });

    let text = `üè™ *${store.name}*\n\n`;
    
    if (store.description) {
      text += `üìÑ ${store.description}\n\n`;
    }

    const productsCount = store._count?.products ?? 0;
    const ordersCount = store._count?.orders ?? 0;
    text += `üí∞ –í–∞–ª—é—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞: ${store.currency}\n`;
    text += `üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${productsCount}\n`;
    text += `üìã –ó–∞–∫–∞–∑–æ–≤: ${ordersCount}\n\n`;
    text += `üõçÔ∏è *–ù–∞–∂–º–∏—Ç–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞*\n`;

    if (store.contactInfo) {
      text += `*üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
      if (store.contactInfo.phone) {
        text += `–¢–µ–ª–µ—Ñ–æ–Ω: ${store.contactInfo.phone}\n`;
      }
      if (store.contactInfo.email) {
        text += `Email: ${store.contactInfo.email}\n`;
      }
      if (store.contactInfo.address) {
        text += `–ê–¥—Ä–µ—Å: ${store.contactInfo.address}\n`;
      }
      text += '\n';
    }

    const keyboard = {
      inline_keyboard: [
        [
          { 
            text: 'üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã', 
            callback_data: `store_products_${storeId}` 
          }
        ],
        [
          { text: 'üîô –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' },
          { text: 'üè† –ì–ª–∞–≤–Ω–∞—è', callback_data: 'main_menu' }
        ]
      ]
    };

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    await bot.editMessageText(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ.',
      { chat_id: chatId, message_id: loadingMsg.message_id }
    );
    throw error;
  }
}

async function showStoreProducts(bot: TelegramBot, chatId: number, session: any, storeId: string) {
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤...');

  try {
    if (!session.token) {
      await bot.editMessageText(
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start',
        { chat_id: chatId, message_id: loadingMsg.message_id }
      );
      return;
    }
    
    const [storeResponse, productsResponse] = await Promise.all([
      apiService.getStore(storeId, session.token),
      // If CMS is configured, prefer CMS product listing; fallback to backend
      (async () => {
        const cmsBase = process.env.CMS_BASE_URL;
        if (!cmsBase) {
          return apiService.getProducts(storeId, session.token, 1, 10);
        }
        try {
          const data = await ttlCache.wrap(`cms:products:store:${storeId}:p1`, 10000, async () => {
            const resp = await cmsService.listProducts({ limit: 10, offset: 0 });
            return resp;
          });
          // Normalize to backend shape for UI
          const normalized = {
            products: (data.products || []).map((p: any) => ({
              id: p.id,
              name: p.title,
              description: p.description,
              price: p?.variants?.[0]?.prices?.[0]?.amount ? (p.variants[0].prices[0].amount / 100) : 0,
              stock: p?.variants?.[0]?.inventory_quantity ?? 0,
            })),
            pagination: { page: 1, totalPages: 1 },
            source: 'cms'
          };
          return normalized;
        } catch (e) {
          logger.warn('CMS product listing failed, falling back to backend', e);
          return apiService.getProducts(storeId, session.token, 1, 10);
        }
      })()
    ]);

    const store = storeResponse.store;
    const products = productsResponse.products;

    if (products.length === 0) {
      await bot.editMessageText(
        `*${store.name}*\n\n–í —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.`,
        {
          chat_id: chatId,
          message_id: loadingMsg.message_id,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞–≥–∞–∑–∏–Ω—É', callback_data: `store_select_${storeId}` }]
            ]
          }
        }
      );
      return;
    }

    let text = `üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ "${store.name}"*\n\n`;
    const paginationTotal = productsResponse.pagination && typeof (productsResponse.pagination as any).total === 'number'
      ? (productsResponse.pagination as any).total
      : products.length;
    text += `üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${paginationTotal}\n\n`;
    if (paginationTotal === 0) {
      text += `‚ùå –í –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n`;
      text += `–ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∞–≥–∞–∑–∏–Ω.`;
    }

    const keyboard = { inline_keyboard: [] as any[] };
    const isCMS = (productsResponse as any).source === 'cms';

    products.forEach((product: any, index: number) => {
      const priceEmoji = product.price > 1000 ? 'üíé' : 'üí∞';
      const stockStatus = product.stock > 10 ? '‚úÖ' : product.stock > 0 ? '‚ö†Ô∏è' : '‚ùå';
      
      text += `${index + 1}. *${product.name}*\n`;
      text += `${priceEmoji} ${product.price} ${store.currency} ‚Ä¢ ${stockStatus} ${product.stock} —à—Ç.\n`;
      
      if (product.description) {
        const shortDesc = product.description.length > 80 
          ? product.description.substring(0, 80) + '...' 
          : product.description;
        text += `üìù ${shortDesc}\n`;
      }
      text += `\n`;

      keyboard.inline_keyboard.push([
        { 
          text: `üõí ${product.name}`, 
          callback_data: isCMS ? `cms_product_view_${product.id}` : `product_view_${product.id}` 
        }
      ]);
    });

    // Navigation buttons
    keyboard.inline_keyboard.push([
      { text: 'üîô –ö –æ–ø–∏—Å–∞–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–∞', callback_data: `store_select_${storeId}` },
      { text: 'üè™ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }
    ]);

    // Pagination if needed
    const totalPages = productsResponse.pagination?.totalPages ?? 1;
    const currentPage = productsResponse.pagination?.page ?? 1;
    if (totalPages > 1) {
      const paginationRow = [] as any[];
      if (currentPage > 1) {
        paginationRow.push({
          text: '‚¨ÖÔ∏è –ü—Ä–µ–¥.',
          callback_data: `store_products_${storeId}_page_${currentPage - 1}`
        });
      }
      if (currentPage < totalPages) {
        paginationRow.push({
          text: '–°–ª–µ–¥. ‚û°Ô∏è',
          callback_data: `store_products_${storeId}_page_${currentPage + 1}`
        });
      }
      if (paginationRow.length > 0) {
        keyboard.inline_keyboard.push(paginationRow);
      }
    }

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

  } catch (error) {
    await bot.editMessageText(
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.',
      { chat_id: chatId, message_id: loadingMsg.message_id }
    );
    throw error;
  }
}

async function showCreateStoreForm(bot: TelegramBot, chatId: number, session: any) {
  // Check permissions
  if (!['ADMIN', 'OWNER'].includes(session.role)) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
    return;
  }

  const text = `
üè™ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞*

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω –ø—Ä—è–º–æ –≤ Telegram! 

*–ß—Ç–æ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è:*
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (slug)
‚Ä¢ –í–∞–ª—é—Ç–∞ (USD, EUR, RUB –∏ –¥—Ä.)
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

*–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã!*

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
  `;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', callback_data: 'store_create_start' }
      ],
      [
        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º', callback_data: 'store_list' }
      ]
    ]
  };

  await bot.sendMessage(chatId, text, {
    parse_mode: 'Markdown',
    reply_markup: keyboard
  });
}

async function startStoreCreation(bot: TelegramBot, chatId: number, session: any) {
  // Check permissions
  if (!['ADMIN', 'OWNER'].includes(session.role)) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
    return;
  }

  // Initialize store creation session
  userSessions.updateSession(session.telegramId, {
    storeCreation: {
      step: 'name',
      data: {}
    }
  });

  const text = `
üè™ *–®–∞–≥ 1/5: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞*

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–¢–µ—Ö–Ω–æ –ú–∞–≥–∞–∑–∏–Ω"
‚Ä¢ "–ú–æ–¥–Ω–∞—è –æ–¥–µ–∂–¥–∞"
‚Ä¢ "–ö–Ω–∏–∂–Ω–∞—è –ª–∞–≤–∫–∞"

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –û—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã
  `;

  await bot.sendMessage(chatId, text, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'store_list' }]
      ]
    }
  });
}

export async function handleStoreCreationMessage(
  bot: TelegramBot, 
  msg: TelegramBot.Message
) {
  const chatId = msg.chat.id;
  const userId = msg.from?.id?.toString();
  const text = msg.text;

  if (!userId || !text) return;

  const session = userSessions.getSession(userId);
  
  if (!session.storeCreation) return;

  try {
    switch (session.storeCreation.step) {
      case 'name':
        await handleStoreNameInput(bot, chatId, session, text);
        break;
      case 'description':
        await handleStoreDescriptionInput(bot, chatId, session, text);
        break;
      case 'slug':
        await handleStoreSlugInput(bot, chatId, session, text);
        break;
      case 'currency':
        await handleStoreCurrencyInput(bot, chatId, session, text);
        break;
      case 'contact':
        await handleStoreContactInput(bot, chatId, session, text);
        break;
    }
  } catch (error) {
    logger.error('Store creation error:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleStoreNameInput(bot: TelegramBot, chatId: number, session: any, name: string) {
  if (name.length < 3 || name.length > 50) {
    await bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }

  // Update session data
  userSessions.updateSession(session.telegramId, {
    storeCreation: {
      ...session.storeCreation,
      step: 'description',
      data: { ...session.storeCreation.data, name }
    }
  });

  const text = `
‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:* ${name}

üè™ *–®–∞–≥ 2/5: –û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞*

–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º"
‚Ä¢ "–°—Ç–∏–ª—å–Ω–∞—è –æ–¥–µ–∂–¥–∞ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π"
‚Ä¢ "–†–µ–¥–∫–∏–µ –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏"

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –î–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥
  `;

  await bot.sendMessage(chatId, text, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'store_create_skip_description' }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'store_list' }]
      ]
    }
  });
}

async function handleStoreDescriptionInput(bot: TelegramBot, chatId: number, session: any, description: string) {
  if (description.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
    description = '';
  } else if (description.length > 200) {
    await bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }

  // Update session data
  userSessions.updateSession(session.telegramId, {
    storeCreation: {
      ...session.storeCreation,
      step: 'slug',
      data: { ...session.storeCreation.data, description }
    }
  });

  const suggestedSlug = session.storeCreation.data.name
    .toLowerCase()
    .replace(/[^–∞-—è—ëa-z0-9]+/g, '-')
    .replace(/^-+|-+$/g, '');

  const text = `
‚úÖ *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ*

üè™ *–®–∞–≥ 3/5: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (slug)*

–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:

*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:* \`${suggestedSlug}\`

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã
‚Ä¢ –û—Ç 3 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

*–ü—Ä–∏–º–µ—Ä:* tech-store, fashion-shop, book-corner
  `;

  await bot.sendMessage(chatId, text, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: `‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: ${suggestedSlug}`, callback_data: `store_create_use_slug_${suggestedSlug}` }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'store_list' }]
      ]
    }
  });
}

async function handleStoreSlugInput(bot: TelegramBot, chatId: number, session: any, slug: string) {
  const slugRegex = /^[a-z0-9-]+$/;
  
  if (!slugRegex.test(slug) || slug.length < 3 || slug.length > 30) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã (3-30 —Å–∏–º–≤–æ–ª–æ–≤):');
    return;
  }

  // Check if slug is unique
  try {
    const response = await apiService.checkSlugAvailability(slug, session.token);
    if (!response.available) {
      await bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π:');
      return;
    }
  } catch (error) {
    logger.error('Slug check error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }

  // Update session data
  userSessions.updateSession(session.telegramId, {
    storeCreation: {
      ...session.storeCreation,
      step: 'currency',
      data: { ...session.storeCreation.data, slug }
    }
  });

  const text = `
‚úÖ *–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω—è—Ç:* ${slug}

üè™ *–®–∞–≥ 4/5: –í–∞–ª—é—Ç–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:
  `;

  await bot.sendMessage(chatId, text, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üíµ USD', callback_data: 'store_create_currency_USD' },
          { text: 'üí∂ EUR', callback_data: 'store_create_currency_EUR' }
        ],
        [
          { text: '‚ÇΩ RUB', callback_data: 'store_create_currency_RUB' },
          { text: '‚Ç¥ UAH', callback_data: 'store_create_currency_UAH' }
        ],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'store_list' }]
      ]
    }
  });
}

async function handleStoreCurrencyInput(bot: TelegramBot, chatId: number, session: any, currency: string) {
  const validCurrencies = ['USD', 'EUR', 'RUB', 'UAH'];
  
  if (!validCurrencies.includes(currency)) {
    await bot.sendMessage(chatId, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.');
    return;
  }

  // Update session data
  userSessions.updateSession(session.telegramId, {
    storeCreation: {
      ...session.storeCreation,
      step: 'contact',
      data: { ...session.storeCreation.data, currency }
    }
  });

  const text = `
‚úÖ *–í–∞–ª—é—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞:* ${currency}

üè™ *–®–∞–≥ 5/5: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω, email, –∞–¥—Ä–µ—Å):

*–ü—Ä–∏–º–µ—Ä:*
\`\`\`
–¢–µ–ª–µ—Ñ–æ–Ω: +7 900 123-45-67
Email: info@mystore.com
–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123
\`\`\`

*–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ*
  `;

  await bot.sendMessage(chatId, text, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'store_create_skip_contact' }],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'store_list' }]
      ]
    }
  });
}

async function handleStoreContactInput(bot: TelegramBot, chatId: number, session: any, contact: string) {
  let contactInfo = null;
  
  if (contact.toLowerCase() !== '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
    contactInfo = { description: contact };
  }

  // Update session data
  userSessions.updateSession(session.telegramId, {
    storeCreation: {
      ...session.storeCreation,
      data: { ...session.storeCreation.data, contactInfo }
    }
  });

  await createStoreFromSession(bot, chatId, session);
}

async function createStoreFromSession(bot: TelegramBot, chatId: number, session: any) {
  const storeData = session.storeCreation.data;
  
  const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –°–æ–∑–¥–∞—é –º–∞–≥–∞–∑–∏–Ω...');

  try {
    const response = await apiService.createStore({
      name: storeData.name,
      description: storeData.description || '',
      slug: storeData.slug,
      currency: storeData.currency,
      contactInfo: storeData.contactInfo
    }, session.token);

    const store = response.store;

    // Clear store creation session
    userSessions.updateSession(session.telegramId, {
      storeCreation: null
    });

    const text = `
üéâ *–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*

üè™ **${store.name}**
üîó –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${store.slug}
üí∞ –í–∞–ª—é—Ç–∞: ${store.currency}
üìä ID: ${store.id}

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

*–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –º–∞–≥–∞–∑–∏–Ω –≤ –±–æ—Ç–µ:*
\`/stores ‚Üí ${store.name}\`
    `;

    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: loadingMsg.message_id,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè™ –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É', callback_data: `store_select_${store.id}` }],
          [{ text: 'üìã –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }]
        ]
      }
    });

    logger.info(`Store created via Telegram: ${store.id} by user ${session.userId}`);

  } catch (error) {
    logger.error('Store creation API error:', error);
    
    await bot.editMessageText(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      { chat_id: chatId, message_id: loadingMsg.message_id }
    );

    // Clear creation session on error
    userSessions.updateSession(session.telegramId, {
      storeCreation: null
    });
  }
}

async function handleStoreSkipStep(bot: TelegramBot, chatId: number, session: any, callbackData: string) {
  if (callbackData === 'store_create_skip_description') {
    await handleStoreDescriptionInput(bot, chatId, session, '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
  } else if (callbackData === 'store_create_skip_contact') {
    await handleStoreContactInput(bot, chatId, session, '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
  }
}
