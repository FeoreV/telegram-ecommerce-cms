"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleOrders = handleOrders;
const apiService_1 = require("../services/apiService");
const sessionManager_1 = require("../utils/sessionManager");
const logger_1 = require("../utils/logger");
const paymentProofHandler_1 = require("./paymentProofHandler");
async function handleOrders(bot, msg, callbackQuery) {
    const chatId = msg.chat.id;
    const userId = (callbackQuery?.from?.id || msg.from?.id)?.toString();
    if (!userId)
        return;
    const session = sessionManager_1.userSessions.getSession(userId);
    try {
        if (!callbackQuery?.data || callbackQuery.data === 'order_list') {
            await showUserOrders(bot, chatId, session);
        }
        else if (callbackQuery.data.startsWith('order_view_')) {
            const orderId = callbackQuery.data.replace('order_view_', '');
            await showOrder(bot, chatId, session, orderId);
        }
        else if (callbackQuery.data.startsWith('upload_proof_')) {
            const orderId = callbackQuery.data.replace('upload_proof_', '');
            await (0, paymentProofHandler_1.initiatePaymentProofFlow)(bot, chatId, orderId, userId);
            return;
        }
        else {
            await handleOrderText(bot, msg, session);
        }
    }
    catch (error) {
        logger_1.logger.error('Order handler error:', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–∫–∞–∑–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}
async function showUserOrders(bot, chatId, session) {
    if (!session.token) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.');
        return;
    }
    const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã...');
    try {
        const ordersResponse = await apiService_1.apiService.getOrders(session.token, { limit: 10 });
        const orders = ordersResponse.orders ?? [];
        if (orders.length === 0) {
            await bot.editMessageText('*üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.', {
                chat_id: chatId,
                message_id: loadingMsg.message_id,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }]
                    ]
                }
            });
            return;
        }
        let text = '*üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n';
        const keyboard = { inline_keyboard: [] };
        orders.forEach((order) => {
            const statusEmoji = getOrderStatusEmoji(order.status);
            const statusText = getOrderStatusText(order.status);
            text += `${statusEmoji} *–ó–∞–∫–∞–∑ #${order.orderNumber}*\n`;
            text += `üè™ ${order.store?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
            text += `üí∞ ${order.totalAmount} ${order.currency}\n`;
            text += `üìÖ ${new Date(order.createdAt).toLocaleString('ru-RU')}\n`;
            text += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n\n`;
            const orderButtons = [
                {
                    text: `üìã –ó–∞–∫–∞–∑ #${order.orderNumber}`,
                    callback_data: `order_view_${order.id}`
                }
            ];
            if (order.status === 'PENDING_ADMIN' && !order.paymentProof) {
                orderButtons.push({
                    text: 'üì∏ –ß–µ–∫',
                    callback_data: `upload_proof_${order.id}`
                });
            }
            keyboard.inline_keyboard.push(orderButtons);
        });
        keyboard.inline_keyboard.push([
            { text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' },
        ]);
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
    catch (error) {
        await bot.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.', { chat_id: chatId, message_id: loadingMsg.message_id });
        throw error;
    }
}
async function showOrder(bot, chatId, session, orderId) {
    if (!session.token) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
        return;
    }
    const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ...');
    try {
        const orderResponse = await apiService_1.apiService.getOrder(orderId, session.token);
        const order = orderResponse.order;
        const statusEmoji = getOrderStatusEmoji(order.status);
        const statusText = getOrderStatusText(order.status);
        let text = `${statusEmoji} *–ó–∞–∫–∞–∑ #${order.orderNumber}*\n\n`;
        text += `üè™ *–ú–∞–≥–∞–∑–∏–Ω:* ${order.store?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        text += `üìÖ *–î–∞—Ç–∞:* ${new Date(order.createdAt).toLocaleString('ru-RU')}\n`;
        text += `üìä *–°—Ç–∞—Ç—É—Å:* ${statusText}\n\n`;
        if (order.paidAt) {
            text += `‚úÖ *–û–ø–ª–∞—á–µ–Ω–æ:* ${new Date(order.paidAt).toLocaleString('ru-RU')}\n\n`;
        }
        if (order.rejectedAt && order.rejectionReason) {
            text += `‚ùå *–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:* ${new Date(order.rejectedAt).toLocaleString('ru-RU')}\n`;
            text += `üí¨ *–ü—Ä–∏—á–∏–Ω–∞:* ${order.rejectionReason}\n\n`;
        }
        if (orderResponse.items && orderResponse.items.length > 0) {
            text += `üõçÔ∏è *–¢–æ–≤–∞—Ä—ã:*\n`;
            orderResponse.items.forEach((item) => {
                const productName = item.product?.name || '–¢–æ–≤–∞—Ä';
                text += `‚Ä¢ ${productName}`;
                if (item.variant) {
                    text += ` (${item.variant.name}: ${item.variant.value})`;
                }
                text += ` √ó ${item.quantity} = ${item.price * item.quantity} ${order.currency}\n`;
            });
        }
        const customerInfo = order.customerInfo || undefined;
        if (customerInfo) {
            text += `\n\nüìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
            if (customerInfo.name)
                text += `–ò–º—è: ${customerInfo.name}\n`;
            if (customerInfo.phone)
                text += `–¢–µ–ª–µ—Ñ–æ–Ω: ${customerInfo.phone}\n`;
            if (customerInfo.address)
                text += `–ê–¥—Ä–µ—Å: ${customerInfo.address}\n`;
        }
        if (order.notes) {
            text += `\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${order.notes}`;
        }
        const keyboard = {
            inline_keyboard: []
        };
        if (order.status === 'PENDING_ADMIN') {
            keyboard.inline_keyboard.push([
                { text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã', callback_data: `upload_proof_${order.id}` }
            ]);
        }
        keyboard.inline_keyboard.push([
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º', callback_data: 'order_list' }
        ]);
        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    }
    catch (error) {
        await bot.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.', { chat_id: chatId, message_id: loadingMsg.message_id });
        throw error;
    }
}
async function handleOrderText(bot, msg, session) {
    if (session.orderingStep !== 'contact' || !msg.text)
        return;
    const chatId = msg.chat.id;
    try {
        const contactInfo = parseContactInfo(msg.text);
        if (!contactInfo.name || !contactInfo.phone) {
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
                '–ò–º—è: –í–∞—à–µ –∏–º—è\n' +
                '–¢–µ–ª–µ—Ñ–æ–Ω: +7XXXXXXXXXX\n' +
                '–ê–¥—Ä–µ—Å: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n' +
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
            return;
        }
        const orderData = {
            storeId: session.currentStore,
            items: session.tempData?.orderItems || [],
            customerInfo: contactInfo,
            notes: contactInfo.comment
        };
        const orderResponse = await apiService_1.apiService.createOrder(orderData, session.token);
        const order = orderResponse.order;
        sessionManager_1.userSessions.updateSession(session.telegramId, {
            orderingStep: undefined,
            tempData: null
        });
        let successText = `‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n`;
        successText += `üìã *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* #${order.orderNumber}\n`;
        successText += `üí∞ *–°—É–º–º–∞:* ${order.totalAmount} ${order.currency}\n\n`;
        successText += `üí≥ *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:*\n`;
        successText += `1Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –º–∞–≥–∞–∑–∏–Ω–∞\n`;
        successText += `2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)\n`;
        successText += `3Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n`;
        successText += `‚è≥ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã.`;
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–ø–ª–∞—Ç—ã', callback_data: `upload_proof_${order.id}` }
                ],
                [
                    { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' },
                    { text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }
                ]
            ]
        };
        await bot.sendMessage(chatId, successText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        logger_1.logger.info(`Order created: ${order.id} by user ${session.userId}`);
    }
    catch (error) {
        logger_1.logger.error('Create order error:', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}
function parseContactInfo(text) {
    const lines = text.split('\n');
    const info = {};
    lines.forEach(line => {
        const [key, ...valueParts] = line.split(':');
        const value = valueParts.join(':').trim();
        if (key && value) {
            const keyLower = key.toLowerCase().trim();
            if (keyLower.includes('–∏–º—è') || keyLower.includes('name')) {
                info.name = value;
            }
            else if (keyLower.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || keyLower.includes('phone')) {
                info.phone = value;
            }
            else if (keyLower.includes('–∞–¥—Ä–µ—Å') || keyLower.includes('address')) {
                info.address = value;
            }
            else if (keyLower.includes('–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') || keyLower.includes('comment')) {
                info.comment = value;
            }
        }
    });
    return info;
}
function getOrderStatusEmoji(status) {
    switch (status) {
        case 'PENDING_ADMIN':
            return '‚è≥';
        case 'PAID':
            return '‚úÖ';
        case 'REJECTED':
            return '‚ùå';
        case 'CANCELLED':
            return 'üö´';
        case 'SHIPPED':
            return 'üöö';
        case 'DELIVERED':
            return 'üì¶';
        default:
            return 'üìã';
    }
}
function getOrderStatusText(status) {
    switch (status) {
        case 'PENDING_ADMIN':
            return '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';
        case 'PAID':
            return '–û–ø–ª–∞—á–µ–Ω';
        case 'REJECTED':
            return '–û—Ç–∫–ª–æ–Ω–µ–Ω';
        case 'CANCELLED':
            return '–û—Ç–º–µ–Ω–µ–Ω';
        case 'SHIPPED':
            return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
        case 'DELIVERED':
            return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
        default:
            return status;
    }
}
//# sourceMappingURL=orderHandler.js.map