"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleStart = handleStart;
const apiService_1 = require("../services/apiService");
const sessionManager_1 = require("../utils/sessionManager");
const logger_1 = require("../utils/logger");
async function handleStart(bot, msg) {
    const chatId = msg.chat.id;
    const user = msg.from;
    if (!user) {
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
        return;
    }
    try {
        logger_1.logger.debug(`Attempting authentication for user ${user.id}`);
        const authResponse = await apiService_1.apiService.authenticateUser(user.id.toString(), user.username, user.first_name, user.last_name);
        logger_1.logger.debug(`Authentication successful:`, {
            userId: authResponse.user.id,
            role: authResponse.user.role,
            hasToken: !!authResponse.token,
            tokenPreview: authResponse.token ? authResponse.token.substring(0, 20) + '...' : 'none'
        });
        logger_1.logger.debug(`Updating session for telegramId ${user.id.toString()} with:`, {
            userId: authResponse.user.id,
            role: authResponse.user.role,
            hasToken: !!authResponse.token
        });
        sessionManager_1.userSessions.updateSession(user.id.toString(), {
            userId: authResponse.user.id,
            token: authResponse.token,
            role: authResponse.user.role,
        });
        const savedSession = sessionManager_1.userSessions.getSession(user.id.toString());
        logger_1.logger.debug(`Session after update:`, {
            telegramId: savedSession.telegramId,
            userId: savedSession.userId,
            role: savedSession.role,
            hasToken: !!savedSession.token
        });
        const welcomeText = `
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Telegram –º–∞–≥–∞–∑–∏–Ω!*

–ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! üëã

üõçÔ∏è *–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Ä–∞–∑–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –æ–¥–∏–Ω –∫–ª–∏–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞:*
    `;
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üè™ –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤', callback_data: 'store_list' }
                ],
                [
                    { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile_menu' },
                    { text: '‚ùì –ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'help' }
                ]
            ]
        };
        if (['ADMIN', 'OWNER'].includes(authResponse.user.role)) {
            keyboard.inline_keyboard.push([
                { text: '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_dashboard' },
                { text: 'ü§ñ –ë–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤', callback_data: 'bot_list' }
            ]);
        }
        await bot.sendMessage(chatId, welcomeText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        logger_1.logger.info(`User ${user.id} started bot, role: ${authResponse.user.role}`);
    }
    catch (error) {
        logger_1.logger.error('Start handler error:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
}
//# sourceMappingURL=startHandler.js.map