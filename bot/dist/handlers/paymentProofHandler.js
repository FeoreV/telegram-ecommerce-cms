"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePaymentProofFlow = handlePaymentProofFlow;
exports.initiatePaymentProofFlow = initiatePaymentProofFlow;
exports.handlePaymentProofCallback = handlePaymentProofCallback;
const path_1 = __importDefault(require("path"));
const apiService_1 = require("../services/apiService");
const sessionManager_1 = require("../utils/sessionManager");
const logger_1 = require("../utils/logger");
const smartVerificationService_1 = require("../services/smartVerificationService");
async function handlePaymentProofFlow(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from?.id?.toString();
    if (!userId)
        return;
    const session = sessionManager_1.userSessions.getSession(userId);
    if (!session.paymentProofFlow) {
        return;
    }
    try {
        if (msg.photo) {
            await handlePhotoUpload(bot, msg, session);
        }
        else if (msg.document) {
            await handleDocumentUpload(bot, msg, session);
        }
        else if (msg.text) {
            await handleTextResponse(bot, msg, session);
        }
    }
    catch (error) {
        logger_1.logger.error('Payment proof flow error:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}
async function initiatePaymentProofFlow(bot, chatId, orderId, userId) {
    try {
        const session = sessionManager_1.userSessions.getSession(userId);
        sessionManager_1.userSessions.updateSession(userId, {
            paymentProofFlow: {
                orderId,
                awaitingPhoto: true
            }
        });
        let instructionText = `üì∏ *–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ–ø–ª–∞—Ç—ã*\n\n`;
        if (session.token) {
            try {
                const orderResponse = await apiService_1.apiService.getOrder(orderId, session.token);
                const order = orderResponse.order;
                instructionText += `üìã –ó–∞–∫–∞–∑: #${order.orderNumber}\n`;
                instructionText += `üí∞ –°—É–º–º–∞: ${order.totalAmount} ${order.currency}\n\n`;
                if (order.store?.id) {
                    try {
                        const settingsResp = await apiService_1.apiService.getBotSettings(order.store.id, session.token);
                        const settings = settingsResp?.settings || {};
                        const requisites = settings.paymentRequisites || settings.requisites || null;
                        const hasRequisites = requisites && (requisites.card ||
                            requisites.bank ||
                            requisites.receiver ||
                            requisites.comment);
                        if (hasRequisites) {
                            instructionText += `üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n`;
                            if (requisites.card)
                                instructionText += `üí≥ –ö–∞—Ä—Ç–∞: \`${requisites.card}\`\n`;
                            if (requisites.bank)
                                instructionText += `üè¶ –ë–∞–Ω–∫: ${requisites.bank}\n`;
                            if (requisites.receiver)
                                instructionText += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${requisites.receiver}\n`;
                            if (requisites.comment)
                                instructionText += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${requisites.comment}\n`;
                            instructionText += `\n`;
                        }
                    }
                    catch (e) {
                        logger_1.logger.warn('Failed to fetch payment requisites', e);
                    }
                }
            }
            catch (e) {
                logger_1.logger.warn('Failed to fetch order details', e);
            }
        }
        instructionText += `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n\n` +
            `‚Ä¢ –§–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ\n` +
            `‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞\n` +
            `‚Ä¢ –õ—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É\n\n` +
            `‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã:\n` +
            `- –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n` +
            `- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n` +
            `- –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /cancel –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏.`;
        const keyboard = {
            inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_payment_proof' }]
            ]
        };
        await bot.sendMessage(chatId, instructionText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        logger_1.logger.info(`Payment proof flow initiated for order ${orderId} by user ${userId}`);
    }
    catch (error) {
        logger_1.logger.error('Failed to initiate payment proof flow:', error);
        throw error;
    }
}
async function handlePhotoUpload(bot, msg, session) {
    try {
        const photo = msg.photo?.[msg.photo.length - 1];
        const document = msg.document;
        if (!photo && !document) {
            await bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞.');
            return;
        }
        const fileId = photo?.file_id || document?.file_id;
        if (!fileId) {
            await bot.sendMessage(msg.chat.id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.');
            return;
        }
        const processingMsg = await bot.sendMessage(msg.chat.id, 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò...');
        try {
            const fileInfo = await bot.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
            const response = await fetch(fileUrl);
            const arrayBuffer = await response.arrayBuffer();
            const imageBuffer = Buffer.from(arrayBuffer);
            const orderId = session.paymentProofFlow?.orderId;
            if (!orderId) {
                await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞.', {
                    chat_id: msg.chat.id,
                    message_id: processingMsg.message_id
                });
                return;
            }
            const orderResponse = await apiService_1.apiService.getOrder(orderId, session.token);
            const order = orderResponse.order;
            const analysis = await smartVerificationService_1.smartVerificationService.analyzePaymentProof(imageBuffer, {
                totalAmount: order.totalAmount,
                currency: order.currency,
                orderNumber: order.orderNumber,
                expectedRecipient: order.store?.contactInfo?.receiver
            });
            await apiService_1.apiService.uploadPaymentProof(orderId, imageBuffer, `payment_proof_${Date.now()}.jpg`, session.token);
            const report = smartVerificationService_1.smartVerificationService.generateVerificationReport(analysis, {
                totalAmount: order.totalAmount,
                currency: order.currency
            });
            await bot.editMessageText(`üì∏ *–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!*\n\n${report}\n\n` +
                `üìã –ó–∞–∫–∞–∑: #${order.orderNumber}\n` +
                `${analysis.isAutoVerifiable ?
                    'ü§ñ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.' :
                    'üë§ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'}\n\n` +
                `‚è±Ô∏è –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`, {
                chat_id: msg.chat.id,
                message_id: processingMsg.message_id,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' },
                            { text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }
                        ]
                    ]
                }
            });
            sessionManager_1.userSessions.updateSession(session.telegramId, {
                paymentProofFlow: null
            });
            if (analysis.isAutoVerifiable && process.env.ENABLE_AUTO_VERIFICATION === 'true') {
                await handleAutoVerification(orderId, analysis, session.token);
                await bot.sendMessage(msg.chat.id, `üéâ *–ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n` +
                    `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–û–ø–ª–∞—á–µ–Ω"\n` +
                    `üì¶ –û–∂–∏–¥–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ.`, { parse_mode: 'Markdown' });
            }
            else {
                await notifyAdminsWithAIAnalysis(order, analysis);
            }
            logger_1.logger.info(`Payment proof processed for order ${orderId}`, {
                confidenceScore: analysis.confidenceScore,
                isAutoVerifiable: analysis.isAutoVerifiable,
                detectedAmount: analysis.detectedAmount
            });
        }
        catch (error) {
            logger_1.logger.error('Payment proof processing failed:', error);
            await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
                chat_id: msg.chat.id,
                message_id: processingMsg.message_id
            });
        }
    }
    catch (error) {
        logger_1.logger.error('Photo upload handler error:', error);
        await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.');
    }
}
async function handleAutoVerification(orderId, analysis, token) {
    try {
        await apiService_1.apiService.confirmPayment(orderId, token);
        logger_1.logger.info(`Auto-verified payment for order ${orderId}`, {
            confidenceScore: analysis.confidenceScore
        });
    }
    catch (error) {
        logger_1.logger.error('Auto-verification failed:', error);
        throw error;
    }
}
async function notifyAdminsWithAIAnalysis(order, analysis) {
    try {
        logger_1.logger.info(`Payment analysis completed for order ${order.id}`, {
            aiAnalysis: analysis,
            requiresReview: !analysis.isAutoVerifiable,
            priority: analysis.confidenceScore < 0.5 ? 'HIGH' : 'NORMAL'
        });
    }
    catch (error) {
        logger_1.logger.error('Failed to notify admins:', error);
    }
}
async function handleDocumentUpload(bot, msg, session) {
    const chatId = msg.chat.id;
    const document = msg.document;
    if (document.file_size && document.file_size > 10 * 1024 * 1024) {
        await bot.sendMessage(chatId, '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB.');
        return;
    }
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];
    if (document.mime_type && !allowedTypes.includes(document.mime_type)) {
        await bot.sendMessage(chatId, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ PDF.');
        return;
    }
    await processFileUpload(bot, chatId, document.file_id, session, 'document');
}
async function processFileUpload(bot, chatId, fileId, session, fileType) {
    if (!session.paymentProofFlow) {
        return;
    }
    const processingMsg = await bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...');
    try {
        const file = await bot.getFile(fileId);
        const filePath = file.file_path;
        if (!filePath) {
            throw new Error('Failed to get file path');
        }
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${filePath}`;
        const response = await fetch(fileUrl);
        if (!response.ok) {
            throw new Error('Failed to download file');
        }
        const buffer = await response.arrayBuffer();
        const fileExtension = path_1.default.extname(filePath) || (fileType === 'photo' ? '.jpg' : '.pdf');
        const fileName = `payment_proof_${session.paymentProofFlow.orderId}_${Date.now()}${fileExtension}`;
        await apiService_1.apiService.uploadPaymentProof(session.paymentProofFlow.orderId, buffer, fileName, session.token);
        sessionManager_1.userSessions.updateSession(session.telegramId, {
            paymentProofFlow: null
        });
        const successText = `‚úÖ *–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!*\n\n` +
            `–í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n` +
            `–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n\n` +
            `üìã –ó–∞–∫–∞–∑: #${session.paymentProofFlow.orderId.slice(-8)}\n` +
            `‚è∞ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç –¥–æ —á–∞—Å–∞.`;
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' },
                    { text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }
                ]
            ]
        };
        await bot.editMessageText(successText, {
            chat_id: chatId,
            message_id: processingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        logger_1.logger.info(`Payment proof uploaded for order ${session.paymentProofFlow.orderId} by user ${session.telegramId}`);
    }
    catch (error) {
        logger_1.logger.error('File upload error:', error);
        await bot.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', {
            chat_id: chatId,
            message_id: processingMsg.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `upload_proof_${session.paymentProofFlow.orderId}` }]
                ]
            }
        });
    }
}
async function handleTextResponse(bot, msg, session) {
    const chatId = msg.chat.id;
    if (msg.text === '/cancel') {
        sessionManager_1.userSessions.updateSession(session.telegramId, {
            paymentProofFlow: null
        });
        await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' }]
                ]
            }
        });
        return;
    }
    await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —á–µ–∫–æ–º –æ–± –æ–ø–ª–∞—Ç–µ.\n\n' +
        '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É, –Ω–∞–∂–º–∏—Ç–µ /cancel');
}
async function handlePaymentProofCallback(bot, callbackQuery) {
    const data = callbackQuery.data;
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id.toString();
    try {
        if (data === 'cancel_payment_proof') {
            sessionManager_1.userSessions.updateSession(userId, {
                paymentProofFlow: null
            });
            await bot.editMessageText('–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', {
                chat_id: chatId,
                message_id: msg.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' }]
                    ]
                }
            });
        }
        else if (data.startsWith('upload_proof_')) {
            const orderId = data.replace('upload_proof_', '');
            await initiatePaymentProofFlow(bot, chatId, orderId, userId);
        }
    }
    catch (error) {
        logger_1.logger.error('Payment proof callback error:', error);
        await bot.answerCallbackQuery(callbackQuery.id, {
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            show_alert: true
        });
    }
}
//# sourceMappingURL=paymentProofHandler.js.map