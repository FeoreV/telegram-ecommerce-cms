"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startStoreCreation = startStoreCreation;
exports.handleStoreCreationMessage = handleStoreCreationMessage;
exports.handleStoreCreationCallback = handleStoreCreationCallback;
const apiService_1 = require("../services/apiService");
const logger_1 = require("../utils/logger");
const sessionManager_1 = require("../utils/sessionManager");
const SUPPORTED_CURRENCIES = ['USD', 'EUR', 'RUB', 'UAH'];
const CURRENCY_SYMBOLS = {
    USD: '$',
    EUR: '‚Ç¨',
    RUB: '‚ÇΩ',
    UAH: '‚Ç¥'
};
async function startStoreCreation(bot, chatId) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    if (!session || !session.token) {
        await bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.');
        return;
    }
    if (!session.role || !['OWNER', 'ADMIN'].includes(session.role)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
        return;
    }
    const storeCreationState = {
        step: 1,
        data: {}
    };
    sessionManager_1.userSessions.updateSession(chatId.toString(), {
        storeCreation: storeCreationState
    });
    await showStep1NameInput(bot, chatId);
}
async function showStep1NameInput(bot, chatId) {
    const message = `üè™ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n` +
        `*–®–∞–≥ 1 –∏–∑ 5: –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n` +
        `üí° *–°–æ–≤–µ—Ç—ã:*\n` +
        `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ\n` +
        `‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n` +
        `‚Ä¢ –î–ª–∏–Ω–∞: 3-50 —Å–∏–º–≤–æ–ª–æ–≤\n\n` +
        `üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:`;
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', callback_data: 'cancel_store_creation' }]
        ]
    };
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function showStep2DescriptionInput(bot, chatId, storeName) {
    const message = `üè™ *–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ "${storeName}"*\n\n` +
        `*–®–∞–≥ 2 –∏–∑ 5: –û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n` +
        `–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n` +
        `üí° *–°–æ–≤–µ—Ç—ã:*\n` +
        `‚Ä¢ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ\n` +
        `‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n` +
        `‚Ä¢ –î–ª–∏–Ω–∞: 10-500 —Å–∏–º–≤–æ–ª–æ–≤\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:`;
    const keyboard = {
        inline_keyboard: [
            [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'store_creation_step_1' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_store_creation' }
            ]
        ]
    };
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function showStep3SlugInput(bot, chatId, storeName) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    const suggestedSlug = generateSlugFromName(storeName);
    const message = `üè™ *–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ "${storeName}"*\n\n` +
        `*–®–∞–≥ 3 –∏–∑ 5: –ê–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞ (slug)*\n\n` +
        `–≠—Ç–æ –±—É–¥–µ—Ç –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä: \`t.me/yourbot?start=store_${suggestedSlug}\`\n\n` +
        `üí° *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n` +
        `‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n` +
        `‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n` +
        `‚Ä¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º\n\n` +
        `ü§ñ *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:* \`${suggestedSlug}\`\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π:`;
    const keyboard = {
        inline_keyboard: [
            [{ text: `‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "${suggestedSlug}"`, callback_data: `use_suggested_slug_${suggestedSlug}` }],
            [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'store_creation_step_2' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_store_creation' }
            ]
        ]
    };
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function showStep4CurrencySelection(bot, chatId) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    const storeData = session.storeCreation?.data;
    const message = `üè™ *–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ "${storeData?.name}"*\n\n` +
        `*–®–∞–≥ 4 –∏–∑ 5: –í–∞–ª—é—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:\n\n` +
        `üí° *–í–Ω–∏–º–∞–Ω–∏–µ:* –í–∞–ª—é—Ç—É –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞.`;
    const keyboard = {
        inline_keyboard: [
            SUPPORTED_CURRENCIES.map(currency => ({
                text: `${CURRENCY_SYMBOLS[currency]} ${currency}`,
                callback_data: `select_currency_${currency}`
            })),
            [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'store_creation_step_3' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_store_creation' }
            ]
        ]
    };
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function showStep5ContactInfo(bot, chatId) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    const storeData = session.storeCreation?.data;
    const message = `üè™ *–°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ "${storeData?.name}"*\n\n` +
        `*–®–∞–≥ 5 –∏–∑ 5: –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n` +
        `–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤—Å–µ –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ):\n\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏\n` +
        `üìß Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
        `üìç –ê–¥—Ä–µ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω)\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
        `\`–¢–µ–ª–µ—Ñ–æ–Ω: +1234567890\`\n` +
        `\`Email: shop@example.com\`\n` +
        `\`–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123\`\n\n` +
        `–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:`;
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥', callback_data: 'skip_contact_info' }],
            [
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'store_creation_step_4' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_store_creation' }
            ]
        ]
    };
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function showFinalConfirmation(bot, chatId) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    const storeData = session.storeCreation?.data;
    if (!storeData) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    let message = `üè™ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞*\n\n`;
    message += `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${storeData.name}\n`;
    message += `üìÑ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${storeData.description}\n`;
    message += `üîó *–ê–¥—Ä–µ—Å:* ${storeData.slug}\n`;
    message += `üí± *–í–∞–ª—é—Ç–∞:* ${storeData.currency} ${CURRENCY_SYMBOLS[storeData.currency]}\n\n`;
    if (storeData.contactInfo) {
        message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n`;
        if (storeData.contactInfo.phone)
            message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${storeData.contactInfo.phone}\n`;
        if (storeData.contactInfo.email)
            message += `‚Ä¢ Email: ${storeData.contactInfo.email}\n`;
        if (storeData.contactInfo.address)
            message += `‚Ä¢ –ê–¥—Ä–µ—Å: ${storeData.contactInfo.address}\n`;
        message += `\n`;
    }
    message += `‚ùì –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏?`;
    const keyboard = {
        inline_keyboard: [
            [{ text: '‚úÖ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'confirm_store_creation' }],
            [
                { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_store_data' },
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_store_creation' }
            ]
        ]
    };
    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function handleStoreCreationMessage(bot, chatId, text) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    if (!session?.storeCreation) {
        return false;
    }
    const { step, data } = session.storeCreation;
    try {
        switch (step) {
            case 1:
                if (!validateStoreName(text)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n' +
                        '‚Ä¢ –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n' +
                        '‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                    return true;
                }
                const existingByName = await checkStoreNameAvailability(text, session.token);
                if (existingByName === false) {
                    await bot.sendMessage(chatId, `‚ùå –ú–∞–≥–∞–∑–∏–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${text}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n` +
                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
                    return true;
                }
                data.name = text;
                session.storeCreation.step = 2;
                sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
                await showStep2DescriptionInput(bot, chatId, text);
                return true;
            case 2:
                if (!validateStoreDescription(text)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞.\n\n' +
                        '‚Ä¢ –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤\n\n' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                    return true;
                }
                data.description = text;
                session.storeCreation.step = 3;
                sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
                await showStep3SlugInput(bot, chatId, data.name);
                return true;
            case 3:
                const slug = text.toLowerCase().replace(/[^a-z0-9]/g, '');
                if (!validateStoreSlug(slug)) {
                    await bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –º–∞–≥–∞–∑–∏–Ω–∞.\n\n' +
                        '‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n' +
                        '‚Ä¢ –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n\n' +
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                    return true;
                }
                const existingBySlug = await checkStoreSlugAvailability(slug, session.token);
                if (!existingBySlug) {
                    await bot.sendMessage(chatId, `‚ùå –ê–¥—Ä–µ—Å "${slug}" —É–∂–µ –∑–∞–Ω—è—Ç.\n\n` +
                        '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å:');
                    return true;
                }
                data.slug = slug;
                session.storeCreation.step = 4;
                sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
                await showStep4CurrencySelection(bot, chatId);
                return true;
            case 5:
                const contactInfo = parseContactInfo(text);
                data.contactInfo = contactInfo;
                session.storeCreation.step = 6;
                sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
                await showFinalConfirmation(bot, chatId);
                return true;
        }
    }
    catch (error) {
        logger_1.logger.error('Error in store creation message handler:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    return true;
}
async function handleStoreCreationCallback(bot, chatId, callbackData) {
    const session = sessionManager_1.userSessions.getSession(chatId.toString());
    if (!session?.storeCreation) {
        return false;
    }
    try {
        if (callbackData === 'cancel_store_creation') {
            sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: null });
            await bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
            return true;
        }
        if (callbackData.startsWith('use_suggested_slug_')) {
            const slug = callbackData.replace('use_suggested_slug_', '');
            session.storeCreation.data.slug = slug;
            session.storeCreation.step = 4;
            sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
            await showStep4CurrencySelection(bot, chatId);
            return true;
        }
        if (callbackData.startsWith('select_currency_')) {
            const currency = callbackData.replace('select_currency_', '');
            session.storeCreation.data.currency = currency;
            session.storeCreation.step = 5;
            sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
            await showStep5ContactInfo(bot, chatId);
            return true;
        }
        if (callbackData === 'skip_contact_info') {
            session.storeCreation.step = 6;
            sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
            await showFinalConfirmation(bot, chatId);
            return true;
        }
        if (callbackData === 'confirm_store_creation') {
            await createStore(bot, chatId, session);
            return true;
        }
        if (callbackData.startsWith('store_creation_step_')) {
            const step = parseInt(callbackData.replace('store_creation_step_', ''));
            await navigateToStep(bot, chatId, session, step);
            return true;
        }
    }
    catch (error) {
        logger_1.logger.error('Error in store creation callback handler:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    return false;
}
async function createStore(bot, chatId, session) {
    const storeData = session.storeCreation?.data;
    if (!storeData || !storeData.name || !storeData.description || !storeData.slug || !storeData.currency) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.');
        return;
    }
    const loadingMsg = await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –º–∞–≥–∞–∑–∏–Ω...');
    try {
        const newStoreResponse = await apiService_1.apiService.createStore({
            name: storeData.name,
            description: storeData.description,
            slug: storeData.slug,
            currency: storeData.currency,
            contactPhone: storeData.contactInfo?.phone,
            contactEmail: storeData.contactInfo?.email,
            contactAddress: storeData.contactInfo?.address
        }, session.token);
        const newStore = newStoreResponse.store;
        sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: null });
        let successMessage = `üéâ *–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n`;
        successMessage += `üè™ *${newStore.name}*\n`;
        successMessage += `üîó –ê–¥—Ä–µ—Å: \`${newStore.slug}\`\n`;
        successMessage += `üí± –í–∞–ª—é—Ç–∞: ${newStore.currency}\n\n`;
        successMessage += `üì± *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n`;
        successMessage += `‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω\n`;
        successMessage += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã\n`;
        successMessage += `‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n\n`;
        successMessage += `üöÄ –í–∞—à –º–∞–≥–∞–∑–∏–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`;
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data: `add_products_${newStore.id}` },
                    { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: `store_settings_${newStore.id}` }
                ],
                [
                    { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: `store_analytics_${newStore.id}` }
                ]
            ]
        };
        await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
        const sanitizedStoreId = String(newStore.id).replace(/[\r\n]/g, ' ');
        const sanitizedUserId = String(session.telegramId).replace(/[\r\n]/g, ' ');
        logger_1.logger.info(`Store created successfully: ${sanitizedStoreId} by user ${sanitizedUserId}`);
    }
    catch (error) {
        const sanitizedError = error instanceof Error ? error.message.replace(/[\r\n]/g, ' ') : String(error).replace(/[\r\n]/g, ' ');
        logger_1.logger.error('Error creating store:', sanitizedError);
        const errorMessage = error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω';
        await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: ${errorMessage}\n\n` +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'retry_store_creation' }]
                ]
            }
        });
    }
}
function validateStoreName(name) {
    return !!(name && name.length >= 3 && name.length <= 50);
}
function validateStoreDescription(description) {
    return !!(description && description.length >= 10 && description.length <= 500);
}
function validateStoreSlug(slug) {
    return !!(slug && slug.length >= 3 && /^[a-z0-9]+$/.test(slug));
}
function generateSlugFromName(name) {
    return name
        .toLowerCase()
        .replace(/[–∞-—è]/g, char => {
        const cyrillicToLatin = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
        };
        return cyrillicToLatin[char] || char;
    })
        .replace(/[^a-z0-9]/g, '')
        .substring(0, 20);
}
function parseContactInfo(text) {
    const contactInfo = {};
    const phoneMatch = text.match(/—Ç–µ–ª–µ—Ñ–æ–Ω:?\s*([+\d\s\-\(\)]+)/i);
    if (phoneMatch) {
        contactInfo.phone = phoneMatch[1].trim();
    }
    const emailMatch = text.match(/email:?\s*([^\s]+@[^\s]+)/i);
    if (emailMatch) {
        contactInfo.email = emailMatch[1].trim();
    }
    const addressMatch = text.match(/–∞–¥—Ä–µ—Å:?\s*(.+?)(?=\n|email|—Ç–µ–ª–µ—Ñ–æ–Ω|$)/is);
    if (addressMatch) {
        contactInfo.address = addressMatch[1].trim();
    }
    return contactInfo;
}
async function checkStoreNameAvailability(name, token) {
    try {
        const { stores } = await apiService_1.apiService.getStores(token, 1, 50);
        const exists = Array.isArray(stores) && stores.some((store) => store.name?.toLowerCase() === name.toLowerCase());
        return !exists;
    }
    catch (error) {
        logger_1.logger.error('Error checking store name availability:', error);
        return true;
    }
}
async function checkStoreSlugAvailability(slug, token) {
    try {
        const result = await apiService_1.apiService.checkSlugAvailability(slug, token);
        if (typeof result?.available === 'boolean') {
            return result.available;
        }
        return true;
    }
    catch (error) {
        logger_1.logger.error('Error checking store slug availability:', error);
        return true;
    }
}
async function navigateToStep(bot, chatId, session, step) {
    session.storeCreation.step = step;
    sessionManager_1.userSessions.updateSession(chatId.toString(), { storeCreation: session.storeCreation });
    const storeData = session.storeCreation.data;
    switch (step) {
        case 1:
            await showStep1NameInput(bot, chatId);
            break;
        case 2:
            await showStep2DescriptionInput(bot, chatId, storeData.name || '');
            break;
        case 3:
            await showStep3SlugInput(bot, chatId, storeData.name || '');
            break;
        case 4:
            await showStep4CurrencySelection(bot, chatId);
            break;
        case 5:
            await showStep5ContactInfo(bot, chatId);
            break;
    }
}
//# sourceMappingURL=storeCreationHandler.js.map