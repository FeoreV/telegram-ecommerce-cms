"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupHandlers = setupHandlers;
const logger_1 = require("../utils/logger");
const sanitizer_1 = require("../utils/sanitizer");
const adminHandler_1 = require("./adminHandler");
const balanceHandler_1 = require("./balanceHandler");
const botCreationHandler_1 = require("./botCreationHandler");
const orderHandler_1 = require("./orderHandler");
const paymentProofHandler_1 = require("./paymentProofHandler");
const productHandler_1 = require("./productHandler");
const profileHandler_1 = require("./profileHandler");
const startHandler_1 = require("./startHandler");
const storeHandler_1 = require("./storeHandler");
function setupHandlers(bot) {
    bot.onText(/\/start/, (msg) => (0, startHandler_1.handleStart)(bot, msg));
    bot.onText(/\/stores/, (msg) => (0, storeHandler_1.handleStores)(bot, msg));
    bot.onText(/\/orders/, (msg) => (0, orderHandler_1.handleOrders)(bot, msg));
    bot.onText(/\/admin/, (msg) => (0, adminHandler_1.handleAdmin)(bot, msg));
    bot.onText(/\/help/, (msg) => handleHelp(bot, msg));
    bot.on('callback_query', async (callbackQuery) => {
        const { data, message } = callbackQuery;
        if (!data || !message)
            return;
        try {
            if (data === 'main_menu') {
                await (0, startHandler_1.handleStart)(bot, message);
            }
            else if (data === 'help') {
                await handleHelp(bot, message);
            }
            else if (data.startsWith('balance_')) {
                await (0, balanceHandler_1.handleBalance)(bot, message, callbackQuery);
            }
            else if (data.startsWith('profile_')) {
                await (0, profileHandler_1.handleProfile)(bot, message, callbackQuery);
            }
            else if (data.startsWith('store_')) {
                logger_1.logger.debug(`Handling store callback for user ${message.from?.id}: ${(0, sanitizer_1.sanitizeForLog)(data)}`);
                await (0, storeHandler_1.handleStores)(bot, message, callbackQuery);
            }
            else if (data.startsWith('product_') || data.startsWith('cms_product_')) {
                await (0, productHandler_1.handleProducts)(bot, message, callbackQuery);
            }
            else if (data.startsWith('order_')) {
                await (0, orderHandler_1.handleOrders)(bot, message, callbackQuery);
            }
            else if (data.startsWith('admin_') ||
                data.startsWith('verify_order_') ||
                data.startsWith('reject_order_') ||
                data.startsWith('orders_') ||
                data.startsWith('analytics_') ||
                data.startsWith('alerts_') ||
                data.startsWith('confirm_payment_') ||
                data.startsWith('confirm_reject_')) {
                await (0, adminHandler_1.handleAdmin)(bot, message, callbackQuery);
            }
            else if (data.startsWith('upload_proof_') || data === 'cancel_payment_proof') {
                await (0, paymentProofHandler_1.handlePaymentProofCallback)(bot, callbackQuery);
            }
            else if (data.startsWith('bot_') || data === 'create_bot' || data.includes('bot')) {
                const handled = await (0, botCreationHandler_1.handleBotCreationCallback)(bot, message.chat.id, data) ||
                    await (0, botCreationHandler_1.handleBotCreationSkipCallback)(bot, message.chat.id, data);
                if (!handled) {
                    logger_1.logger.warn(`Unhandled bot callback: ${(0, sanitizer_1.sanitizeForLog)(data)}`);
                }
            }
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        catch (error) {
            logger_1.logger.error('Callback query error:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                show_alert: true,
            });
        }
    });
    bot.on('message', async (msg) => {
        if (msg.text?.startsWith('/'))
            return;
        try {
            if (msg.photo || msg.document) {
                await (0, paymentProofHandler_1.handlePaymentProofFlow)(bot, msg);
                return;
            }
            await (0, storeHandler_1.handleStoreCreationMessage)(bot, msg);
            await (0, botCreationHandler_1.handleBotCreationMessage)(bot, msg);
            if (msg.text && msg.contact) {
                await (0, orderHandler_1.handleOrders)(bot, msg);
            }
            else if (msg.text) {
                await (0, paymentProofHandler_1.handlePaymentProofFlow)(bot, msg);
                const handledAdmin = await (0, adminHandler_1.handlePossibleOrderId)(bot, msg.chat.id, msg.text);
                if (!handledAdmin) {
                    await handleTextMessage(bot, msg);
                }
            }
        }
        catch (error) {
            logger_1.logger.error('Message handler error:', error);
            await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    });
    logger_1.logger.info('‚úÖ Bot handlers configured');
}
async function handleHelp(bot, msg) {
    const helpText = `
‚ùì *–ü–æ–º–æ—â—å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/stores - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*
1. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ üè™
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π üõçÔ∏è
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É ‚úÖ
4. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ üí≥
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚è≥

*üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: support@example.com
‚Ä¢ Telegram: @support_bot
‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-18:00 (–ú–°–ö)

*–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–∞–º–∏

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
  `;
    const keyboard = {
        inline_keyboard: [
            [
                { text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url: 'https://t.me/support' }
            ],
            [
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
        ]
    };
    await bot.sendMessage(msg.chat.id, helpText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
    });
}
async function handleTextMessage(bot, msg) {
    await bot.sendMessage(msg.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É:\n' +
        '/stores - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤\n' +
        '/help - –ü–æ–º–æ—â—å');
}
//# sourceMappingURL=index.js.map