"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleBotCreationCallback = handleBotCreationCallback;
exports.handleBotCreationMessage = handleBotCreationMessage;
exports.handleBotCreationSkipCallback = handleBotCreationSkipCallback;
const apiService_1 = require("../services/apiService");
const sessionManager_1 = require("../utils/sessionManager");
const logger_1 = require("../utils/logger");
async function handleBotCreationCallback(bot, chatId, callbackData) {
    const userId = chatId.toString();
    const session = sessionManager_1.userSessions.getSession(userId);
    if (!session.token) {
        await bot.sendMessage(chatId, 'üîê –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        return false;
    }
    try {
        switch (callbackData) {
            case 'create_bot':
                await startBotCreation(bot, chatId, session);
                return true;
            case 'bot_list':
                await showBotList(bot, chatId, session);
                return true;
            case 'bot_back':
                await showMainMenu(bot, chatId, session);
                return true;
            default:
                if (callbackData.startsWith('create_bot_for_store_')) {
                    const storeId = callbackData.replace('create_bot_for_store_', '');
                    await showBotCreationForm(bot, chatId, session, storeId);
                    return true;
                }
                if (callbackData.startsWith('bot_')) {
                    return await handleBotManagement(bot, chatId, callbackData, session);
                }
                break;
        }
    }
    catch (error) {
        logger_1.logger.error('Bot creation callback error:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
    return false;
}
async function startBotCreation(bot, chatId, session) {
    if (!['ADMIN', 'OWNER'].includes(session.role)) {
        await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤.');
        return;
    }
    try {
        const storesResponse = await apiService_1.apiService.getUserStores(session.token);
        const stores = (storesResponse?.stores ?? []);
        const storesWithoutBots = stores.filter((store) => !store.botUsername);
        if (storesWithoutBots.length === 0) {
            const text = `
ü§ñ *–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤*

‚ùå –£ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤ —É–∂–µ –µ—Å—Ç—å –±–æ—Ç—ã, –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.

*–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:*
‚Ä¢ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
‚Ä¢ –ò–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ
      `;
            await bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè™ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'store_create' }],
                        [{ text: 'ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏', callback_data: 'bot_list' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'bot_back' }]
                    ]
                }
            });
            return;
        }
        let text = `ü§ñ *–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞*\n\n`;
        text += `–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞:\n\n`;
        const keyboard = [];
        for (const store of storesWithoutBots) {
            keyboard.push([{
                    text: `üè™ ${store.name}`,
                    callback_data: `create_bot_for_store_${store.id}`
                }]);
        }
        keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'bot_back' }]);
        await bot.sendMessage(chatId, text, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    }
    catch (error) {
        logger_1.logger.error('Error loading stores for bot creation:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}
async function showBotCreationForm(bot, chatId, session, storeId) {
    try {
        const storesResponse = await apiService_1.apiService.getUserStores(session.token);
        const stores = (storesResponse?.stores ?? []);
        const store = stores.find((s) => s.id === storeId);
        if (!store) {
            await bot.sendMessage(chatId, '‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }
        sessionManager_1.userSessions.updateSession(session.telegramId, {
            botCreation: {
                storeId: storeId,
                storeName: store.name,
                step: 'token'
            }
        });
        const text = `
ü§ñ *–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "${store.name}"*

üìù *–®–∞–≥ 1/2: –¢–æ–∫–µ–Ω –±–æ—Ç–∞*

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –æ—Ç @BotFather:

*–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:*
1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot
3Ô∏è‚É£ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
4Ô∏è‚É£ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ username (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot")
5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω

*–ü—Ä–∏–º–µ—Ä —Ç–æ–∫–µ–Ω–∞:*
\`1234567890:ABCdefGhIJKLmnopQRstUVwxyz\`

üì® *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:*
    `;
        await bot.sendMessage(chatId, text, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚ùì –ü–æ–º–æ—â—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞', url: 'https://t.me/BotFather' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'create_bot' }]
                ]
            }
        });
    }
    catch (error) {
        logger_1.logger.error('Error showing bot creation form:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞.');
    }
}
async function handleBotCreationMessage(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from?.id?.toString();
    const text = msg.text;
    if (!userId || !text)
        return;
    const session = sessionManager_1.userSessions.getSession(userId);
    if (!session.botCreation)
        return;
    try {
        switch (session.botCreation.step) {
            case 'token':
                await handleTokenInput(bot, chatId, session, text);
                break;
            case 'username':
                await handleUsernameInput(bot, chatId, session, text);
                break;
        }
    }
    catch (error) {
        logger_1.logger.error('Bot creation message error:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}
async function handleTokenInput(bot, chatId, session, token) {
    const tokenPattern = /^\d+:[A-Za-z0-9_-]+$/;
    if (!tokenPattern.test(token.trim())) {
        await bot.sendMessage(chatId, `
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞*

–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç: \`—á–∏—Å–ª–∞:–±—É–∫–≤—ã_—Å–∏–º–≤–æ–ª—ã\`

*–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:*
\`1234567890:ABCdefGhIJKLmnopQRstUVwxyz\`

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
    `, {
            parse_mode: 'Markdown'
        });
        return;
    }
    sessionManager_1.userSessions.updateSession(session.telegramId, {
        botCreation: {
            ...session.botCreation,
            token: token.trim(),
            step: 'username'
        }
    });
    const text = `
‚úÖ *–¢–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç*

ü§ñ *–®–∞–≥ 2/2: Username –±–æ—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)*

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π username –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

*–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ username.*

*–ü—Ä–∏–º–µ—Ä username:*
\`my_shop_bot\`
  `;
    await bot.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'bot_create_skip_username' }],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'create_bot' }]
            ]
        }
    });
}
async function handleUsernameInput(bot, chatId, session, username) {
    const usernamePattern = /^[a-zA-Z][a-zA-Z0-9_]*bot$/i;
    if (!usernamePattern.test(username.trim())) {
        await bot.sendMessage(chatId, `
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username*

Username –¥–æ–ª–∂–µ–Ω:
‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã
‚Ä¢ –ó–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "bot"
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _

*–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ username:*
\`my_shop_bot\`

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
    `, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'bot_create_skip_username' }]
                ]
            }
        });
        return;
    }
    sessionManager_1.userSessions.updateSession(session.telegramId, {
        botCreation: {
            ...session.botCreation,
            username: username.trim()
        }
    });
    await createBotFromSession(bot, chatId, session);
}
async function handleBotCreationSkipCallback(bot, chatId, callbackData) {
    const userId = chatId.toString();
    const session = sessionManager_1.userSessions.getSession(userId);
    if (callbackData === 'bot_create_skip_username' && session.botCreation) {
        await createBotFromSession(bot, chatId, session);
        return true;
    }
    return false;
}
async function createBotFromSession(bot, chatId, session) {
    const botCreationData = session.botCreation;
    if (!botCreationData || !botCreationData.token || !botCreationData.storeId) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.');
        return;
    }
    const loadingMsg = await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞...');
    try {
        const response = await apiService_1.apiService.createStoreBot({
            storeId: botCreationData.storeId,
            botToken: botCreationData.token,
            botUsername: botCreationData.username
        }, session.token);
        sessionManager_1.userSessions.updateSession(session.telegramId, { botCreation: null });
        const successMessage = `
üéâ *–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*

ü§ñ *@${response.bot.botUsername}*
üè™ –ú–∞–≥–∞–∑–∏–Ω: *${botCreationData.storeName}*
üìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU')}

‚úÖ *–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*

*–ß—Ç–æ –¥–∞–ª—å—à–µ:*
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

*–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:*
https://t.me/${response.bot.botUsername}
    `;
        await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞', url: `https://t.me/${response.bot.botUsername}` }],
                    [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', callback_data: `bot_settings_${botCreationData.storeId}` }],
                    [{ text: 'ü§ñ –í—Å–µ –±–æ—Ç—ã', callback_data: 'bot_list' }]
                ]
            }
        });
        logger_1.logger.info(`Bot created via Telegram: ${response.bot.botUsername} for store ${botCreationData.storeId} by user ${session.userId}`);
    }
    catch (error) {
        logger_1.logger.error('Error creating bot:', error);
        const errorMessage = error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞';
        await bot.editMessageText(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞*

${errorMessage}

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
‚Ä¢ –¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –º–∞–≥–∞–∑–∏–Ω–æ–º
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram API

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    `, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `create_bot_for_store_${botCreationData.storeId}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'create_bot' }]
                ]
            }
        });
    }
}
async function showBotList(bot, chatId, session) {
    try {
        const response = await apiService_1.apiService.getUserBots(session.token);
        const bots = response.bots || [];
        if (bots.length === 0) {
            const text = `
ü§ñ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤.

*–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!*
      `;
            await bot.sendMessage(chatId, text, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞', callback_data: 'create_bot' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'bot_back' }]
                    ]
                }
            });
            return;
        }
        let text = `ü§ñ *–í–∞—à–∏ –±–æ—Ç—ã (${bots.length})*\n\n`;
        const keyboard = [];
        for (const botData of bots) {
            const statusIcon = botData.isActive ? '‚úÖ' : '‚ùå';
            const status = botData.botStatus === 'ACTIVE' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
            text += `${statusIcon} *@${botData.botUsername || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}*\n`;
            text += `üè™ ${botData.storeName}\n`;
            text += `üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
            text += `üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${botData.messageCount || 0}\n\n`;
            keyboard.push([{
                    text: `‚öôÔ∏è ${botData.storeName}`,
                    callback_data: `bot_manage_${botData.storeId}`
                }]);
        }
        keyboard.push([{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞', callback_data: 'create_bot' }], [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'bot_back' }]);
        await bot.sendMessage(chatId, text, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    }
    catch (error) {
        logger_1.logger.error('Error loading bot list:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤.');
    }
}
async function handleBotManagement(bot, chatId, callbackData, session) {
    if (callbackData.startsWith('bot_manage_')) {
        const storeId = callbackData.replace('bot_manage_', '');
        await showBotManagementMenu(bot, chatId, session, storeId);
        return true;
    }
    if (callbackData.startsWith('bot_restart_')) {
        const storeId = callbackData.replace('bot_restart_', '');
        await restartBot(bot, chatId, session, storeId);
        return true;
    }
    if (callbackData.startsWith('bot_delete_')) {
        const storeId = callbackData.replace('bot_delete_', '');
        await deleteBot(bot, chatId, session, storeId);
        return true;
    }
    return false;
}
async function showBotManagementMenu(bot, chatId, session, storeId) {
    try {
        const response = await apiService_1.apiService.getUserBots(session.token);
        const bots = response.bots || [];
        const botData = bots.find((b) => b.storeId === storeId);
        if (!botData) {
            await bot.sendMessage(chatId, '‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }
        const statusIcon = botData.isActive ? '‚úÖ' : '‚ùå';
        const status = botData.botStatus === 'ACTIVE' ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
        const text = `
ü§ñ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º*

${statusIcon} *@${botData.botUsername}*
üè™ –ú–∞–≥–∞–∑–∏–Ω: *${botData.storeName}*
üìä –°—Ç–∞—Ç—É—Å: ${status}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${botData.messageCount || 0}
üìÖ –°–æ–∑–¥–∞–Ω: ${botData.botCreatedAt ? new Date(botData.botCreatedAt).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

*–î–µ–π—Å—Ç–≤–∏—è:*
    `;
        const keyboard = [
            [{ text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞', url: `https://t.me/${botData.botUsername}` }],
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: `bot_restart_${storeId}` }],
            [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞', callback_data: `bot_delete_${storeId}` }],
            [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤', callback_data: 'bot_list' }]
        ];
        await bot.sendMessage(chatId, text, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });
    }
    catch (error) {
        logger_1.logger.error('Error showing bot management menu:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.');
    }
}
async function restartBot(bot, chatId, session, storeId) {
    const loadingMsg = await bot.sendMessage(chatId, 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
    try {
        await apiService_1.apiService.restartBot(storeId, session.token);
        await bot.editMessageText('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!', {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `bot_manage_${storeId}` }]
                ]
            }
        });
    }
    catch (error) {
        logger_1.logger.error('Error restarting bot:', error);
        const errorMessage = error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞';
        await bot.editMessageText(`‚ùå ${errorMessage}`, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `bot_manage_${storeId}` }]
                ]
            }
        });
    }
}
async function deleteBot(bot, chatId, session, storeId) {
    const loadingMsg = await bot.sendMessage(chatId, 'üóëÔ∏è –£–¥–∞–ª—è—é –±–æ—Ç–∞...');
    try {
        await apiService_1.apiService.deleteBot(storeId, session.token);
        await bot.editMessageText('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'ü§ñ –ö —Å–ø–∏—Å–∫—É –±–æ—Ç–æ–≤', callback_data: 'bot_list' }]
                ]
            }
        });
    }
    catch (error) {
        logger_1.logger.error('Error deleting bot:', error);
        const errorMessage = error.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞';
        await bot.editMessageText(`‚ùå ${errorMessage}`, {
            chat_id: chatId,
            message_id: loadingMsg.message_id,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `bot_manage_${storeId}` }]
                ]
            }
        });
    }
}
async function showMainMenu(bot, chatId, session) {
    const text = `
üéõÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
  `;
    await bot.sendMessage(chatId, text, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üè™ –ú–∞–≥–∞–∑–∏–Ω—ã', callback_data: 'store_list' }],
                [{ text: 'ü§ñ –ë–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤', callback_data: 'bot_list' }],
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'analytics' }]
            ]
        }
    });
}
//# sourceMappingURL=botCreationHandler.js.map