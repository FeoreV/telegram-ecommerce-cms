========================================
COPY AND PASTE THESE COMMANDS ON SERVER
========================================

# Navigate to project
cd /root/telegram-ecommerce-cms

# Stash local changes and pull latest
git stash
git pull origin main

# Build backend
cd backend && npm install --production=false && npm run build && cd ..

# Build bot  
cd bot && npm install --production=false && npm run build && cd ..

# Build frontend
cd frontend && npm install --production=false && npm run build && cd ..

# Restart PM2 with new config
pm2 stop all
pm2 delete all
pm2 start config/services/ecosystem.config.cjs
pm2 save

# Check status
pm2 status

# Monitor logs (press Ctrl+C to exit)
pm2 logs telegram-backend --lines 100

========================================
EXPLANATION
========================================

The issue was:
1. PM2 ecosystem config pointed to wrong path (dist/index.js instead of dist/src/index.js)
2. Backend was running from TypeScript source with ts-node, causing module resolution errors
3. The imports use .js extensions which only work with compiled output

The fix:
1. Updated ecosystem.config.cjs to use correct paths:
   - Backend: dist/src/index.js (was dist/index.js)
   - Bot: dist/index.js (correct)
   - Frontend: Added vite preview server
   - Fixed process names to match what PM2 shows

2. Pull latest config and rebuild everything
3. Restart PM2 with corrected configuration

After running these commands, the backend should start successfully from the compiled JavaScript files.

========================================
VERIFY THE FIX
========================================

After running the commands above, check:

1. All services should show "online" status:
   pm2 status

2. Backend logs should NOT show module resolution errors:
   pm2 logs telegram-backend --lines 50 --nostream

3. You should see "Server started" or similar success messages

4. Test the API:
   curl http://localhost:3002/api/health

If you still see errors, check:
   pm2 logs telegram-backend --err --lines 100

